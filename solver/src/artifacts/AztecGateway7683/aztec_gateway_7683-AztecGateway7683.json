{
  "transpiled": true,
  "noir_version": "1.0.0-beta.3+0000000000000000000000000000000000000000",
  "name": "AztecGateway7683",
  "functions": [
    {
      "name": "public_dispatch",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "error_types": {
          "10411837482733946431": {
            "error_kind": "string",
            "string": "Invalid order sender"
          },
          "10852400770788842366": {
            "error_kind": "string",
            "string": "Invalid order domain"
          },
          "10883657705690251125": {
            "error_kind": "string",
            "string": "Invalid order status"
          },
          "11094545764365153162": {
            "error_kind": "string",
            "string": "Function _assert_nonce_and_set_order_details can only be called internally"
          },
          "1149705418984161792": {
            "error_kind": "string",
            "string": "Invalid nonce"
          },
          "12018683598614887596": {
            "error_kind": "string",
            "string": "Function _check_order_status can only be called internally"
          },
          "13250867036985658079": {
            "error_kind": "string",
            "string": "Invalid order data type"
          },
          "13358931442698543651": {
            "error_kind": "string",
            "string": "Order fill expired"
          },
          "13594925270014003382": {
            "error_kind": "string",
            "string": "Function _trigger_settlement can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14563046062317426044": {
            "error_kind": "string",
            "string": "Function _check_order_commitment can only be called internally"
          },
          "15520311074722577191": {
            "error_kind": "string",
            "string": "Function get_config_public can only be called statically"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "255477095918156618": {
            "error_kind": "string",
            "string": "Invalid order"
          },
          "2830029349304997821": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "field"
              }
            ],
            "length": 27
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3089903740940599642": {
            "error_kind": "string",
            "string": "Invalid fill deadline"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6579113687620452371": {
            "error_kind": "string",
            "string": "Invalid order origin domain"
          },
          "692953268510459726": {
            "error_kind": "string",
            "string": "Invalid order id"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8412360910299423372": {
            "error_kind": "string",
            "string": "Invalid order destination domain"
          },
          "9169818942746597700": {
            "error_kind": "string",
            "string": "Function _update_order_status can only be called internally"
          }
        },
        "parameters": [
          {
            "name": "selector",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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KAIBJgQBDQEQAAEBJgABJwMXBAEBKAAXAAIBJi4MASYBJy4OABoBJwEoAScAAgEnLg4AGwEnASgBJwACAScuDgAcAScBKAEnAAIBJy4OAB0BJwEoAScAAgEnLg4AHgEnASgBJwACAScuDgAfAScBKAEnAAIBJy4OACABJwEoAScAAgEnLg4AIQEnASgBJwACAScuDgAiAScBKAEnAAIBJy4OACMBJwEoAScAAgEnLg4AGQEnASgBJwACAScuDgAlAScBKAEnAAIBJy4OACYBJwEoAScAAgEnLg4AJwEnASgBJwACAScuDgAoAScBKAEnAAIBJy4OACkBJwEoAScAAgEnLg4AKgEnASgBJwACAScuDgArAScBKAEnAAIBJy4OACwBJwEoAScAAgEnLg4ALQEnASgBJwACAScuDgAkAScBKAEnAAIBJy4OAC8BJwEoAScAAgEnLg4ALgEnASgBJwACAScuDgAxAScBKAEnAAIBJy4OADIBJwEoAScAAgEnLg4AMwEnASgBJwACAScuDgA0AScBKAEnAAIBJy4OADUBJwEoAScAAgEnLg4ANgEnASgBJwACAScuDgA3AScBKAEnAAIBJy4OADABJwEoAScAAgEnLg4AOgEnASgBJwACAScuDgA7AScBKAEnAAIBJy4OADwBJwEoAScAAgEnLg4APQEnASgBJwACAScuDgA+AScBKAEnAAIBJy4OAD8BJwEoAScAAgEnLg4AQAEnASgBJwACAScuDgBBAScBKAEnAAIBJy4OAEIBJwEoAScAAgEnLg4AQwEnASgBJwACAScuDgBEAScBKAEnAAIBJy4OAEUBJwEoAScAAgEnLg4ARgEnASgBJwACAScuDgBHAScBKAEnAAIBJy4OAEgBJwEoAScAAgEnLg4ASQEnASgBJwACAScuDgBKAScBKAEnAAIBJy4OAEsBJwEoAScAAgEnLg4ATAEnASgBJwACAScuDgBNAScBKAEnAAIBJy4OAE4BJwEoAScAAgEnLg4ATwEnASgBJwACAScuDgBQAScBKAEnAAIBJy4OAFEBJwEoAScAAgEnLg4AUgEnASgBJwACAScuDgBTAScBKAEnAAIBJy4OAFQBJwEoAScAAgEnLg4AVQEnASgBJwACAScuDgBWAScBKAEnAAIBJy4OAFcBJwEoAScAAgEnLg4AWAEnASgBJwACAScuDgA5AScBKAEnAAIBJy4OAFoBJwEoAScAAgEnLg4AWwEnASgBJwACAScuDgBcAScBKAEnAAIBJy4OAF0BJwEoAScAAgEnLg4AXgEnASgBJwACAScuDgBfAScBKAEnAAIBJy4OAGABJwEoAScAAgEnLg4AYQEnASgBJwACAScuDgBiAScBKAEnAAIBJy4OAGMBJwEoAScAAgEnLg4AZAEnASgBJwACAScuDgBlAScBKAEnAAIBJy4OAGYBJwEoAScAAgEnLg4AZwEnASgBJwACAScuDgBoAScBKAEnAAIBJy4OAGkBJwEoAScAAgEnLg4AagEnASgBJwACAScuDgBrAScBKAEnAAIBJy4OAGwBJwEoAScAAgEnLg4AbQEnASgBJwACAScuDgBuAScBKAEnAAIBJy4OAG8BJwEoAScAAgEnLg4AcAEnASgBJwACAScuDgBxAScBKAEnAAIBJy4OAHIBJwEoAScAAgEnLg4AcwEnASgBJwACAScuDgB0AScBKAEnAAIBJy4OAHUBJwEoAScAAgEnLg4AdgEnASgBJwACAScuDgB3AScBKAEnAAIBJy4OAHgBJwEoAScAAgEnLg4AWQEnASgBJwACAScuDgB6AScBKAEnAAIBJy4OAHsBJwEoAScAAgEnLg4AfAEnASgBJwACAScuDgB9AScBKAEnAAIBJy4OAH4BJwEoAScAAgEnLg4AfwEnASgBJwACAScuDgCAAScBKAEnAAIBJy4OAIEBJwEoAScAAgEnLg4AggEnASgBJwACAScuDgCDAScBKAEnAAIBJy4OAIQBJwEoAScAAgEnLg4AhQEnASgBJwACAScuDgCGAScBKAEnAAIBJy4OAIcBJwEoAScAAgEnLg4AiAEnASgBJwACAScuDgCJAScBKAEnAAIBJy4OAIoBJwEoAScAAgEnLg4AiwEnASgBJwACAScuDgCMAScBKAEnAAIBJy4OAI0BJwEoAScAAgEnLg4AjgEnASgBJwACAScuDgCPAScBKAEnAAIBJy4OAJABJwEoAScAAgEnLg4AkQEnASgBJwACAScuDgCSAScBKAEnAAIBJy4OAJMBJwEoAScAAgEnLg4AlAEnASgBJwACAScuDgCVAScBKAEnAAIBJy4OAJYBJwEoAScAAgEnLg4AlwEnASgBJwACAScuDgCYAScBKAEnAAIBJy4OAHkBJwEoAScAAgEnLg4AmgEnASgBJwACAScuDgCbAScBKAEnAAIBJy4OAJwBJwEoAScAAgEnLg4AnQEnASgBJwACAScuDgCeAScBKAEnAAIBJy4OAJ8BJwEoAScAAgEnLg4AoAEnASgBJwACAScuDgChAScBKAEnAAIBJy4OAKIBJwEoAScAAgEnLg4AowEnASgBJwACAScuDgCkAScBKAEnAAIBJy4OAKUBJwEoAScAAgEnLg4ApgEnASgBJwACAScuDgCnAScBKAEnAAIBJy4OAKgBJwEoAScAAgEnLg4AqQEnASgBJwACAScuDgCqAScBKAEnAAIBJy4OAKsBJwEoAScAAgEnLg4ArAEnASgBJwACAScuDgCtAScBKAEnAAIBJy4OAK4BJwEoAScAAgEnLg4ArwEnASgBJwACAScuDgCwAScBKAEnAAIBJy4OALEBJwEoAScAAgEnLg4AsgEnASgBJwACAScuDgCzAScBKAEnAAIBJy4OALQBJwEoAScAAgEnLg4AtQEnASgBJwACAScuDgC2AScBKAEnAAIBJy4OALcBJwEoAScAAgEnLg4AuAEnASgBJwACAScuDgCZAScBKAEnAAIBJy4OALoBJwEoAScAAgEnLg4AuwEnASgBJwACAScuDgC8AScBKAEnAAIBJy4OAL0BJwEoAScAAgEnLg4AvgEnASgBJwACAScuDgC/AScBKAEnAAIBJy4OAMABJwEoAScAAgEnLg4AwQEnASgBJwACAScuDgDCAScBKAEnAAIBJy4OAMMBJwEoAScAAgEnLg4AxAEnASgBJwACAScuDgDFAScBKAEnAAIBJy4OAMYBJwEoAScAAgEnLg4AxwEnASgBJwACAScuDgDIAScBKAEnAAIBJy4OAMkBJwEoAScAAgEnLg4AygEnASgBJwACAScuDgDLAScBKAEnAAIBJy4OAMwBJwEoAScAAgEnLg4AzQEnASgBJwACAScuDgDOAScBKAEnAAIBJy4OAM8BJwEoAScAAgEnLg4A0AEnASgBJwACAScuDgDRAScBKAEnAAIBJy4OANIBJwEoAScAAgEnLg4A0wEnASgBJwACAScuDgDUAScBKAEnAAIBJy4OANUBJwEoAScAAgEnLg4A1gEnASgBJwACAScuDgDXAScBKAEnAAIBJy4OANgBJwEoAScAAgEnLg4AuQEnASgBJwACAScuDgDaAScBKAEnAAIBJy4OANsBJwEoAScAAgEnLg4A3AEnASgBJwACAScuDgDZAScBKAEnAAIBJy4OAN4BJwEoAScAAgEnLg4A3wEnASgBJwACAScuDgDgAScBKAEnAAIBJy4OAN0BJwEoAScAAgEnLg4A4gEnASgBJwACAScuDgDjAScBKAEnAAIBJy4OAOQBJwEoAScAAgEnLg4A5QEnASgBJwACAScuDgDmAScBKAEnAAIBJy4OAOcBJwEoAScAAgEnLg4A6AEnASgBJwACAScuDgDpAScBKAEnAAIBJy4OAOoBJwEoAScAAgEnLg4A6wEnASgBJwACAScuDgDsAScBKAEnAAIBJy4OAO0BJwEoAScAAgEnLg4A7gEnASgBJwACAScuDgDvAScBKAEnAAIBJy4OAPABJwEoAScAAgEnLg4A8QEnASgBJwACAScuDgDyAScBKAEnAAIBJy4OAPMBJwEoAScAAgEnLg4A9AEnASgBJwACAScuDgD1AScBKAEnAAIBJy4OAPYBJwEoAScAAgEnLg4A9wEnASgBJwACAScuDgD4AScBKAEnAAIBJy4OAOEBJwEoAScAAgEnLg4A+gEnASgBJwACAScuDgD7AScBKAEnAAIBJy4OAPwBJwEoAScAAgEnLg4A/QEnASgBJwACAScuDgD+AScBKAEnAAIBJy4OAP8BJwEoAScAAgEnLg4BAAEnASgBJwACAScuDgD5AScBKAEnAAIBJy4OAQIBJwEoAScAAgEnLg4BAwEnASgBJwACAScuDgEEAScBKAEnAAIBJy4OAQEBJwEoAScAAgEnLg4BBgEnASgBJwACAScuDgEFAScBKAEnAAIBJy4OAQgBJwEoAScAAgEnLg4BCQEnASgBJwACAScuDgEKAScBKAEnAAIBJy4OAQsBJwEoAScAAgEnLg4BDAEnASgBJwACAScuDgENAScBKAEnAAIBJy4OAQ4BJwEoAScAAgEnLg4BDwEnASgBJwACAScuDgEQAScBKAEnAAIBJy4OAREBJwEoAScAAgEnLg4BEgEnASgBJwACAScuDgETAScBKAEnAAIBJy4OARQBJwEoAScAAgEnLg4BFQEnASgBJwACAScuDgEWAScBKAEnAAIBJy4OARcBJwEoAScAAgEnLg4BGAEnASgBJwACAScuDgEZAScBKAEn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",
      "debug_symbols": "",
      "brillig_names": ["public_dispatch"]
    },
    {
      "name": "claim_private",
      "is_unconstrained": false,
      "custom_attributes": ["private"],
      "abi": {
        "error_types": {
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 75
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15663063161611103517": {
            "error_kind": "string",
            "string": "Invalid secret"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ],
            "length": 98
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "field"
              }
            ],
            "length": 58
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "secret",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "order_id_bytes",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "origin_data_bytes",
            "type": {
              "kind": "array",
              "length": 268,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "filler_data_bytes",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_notes",
        "store_in_execution_cache_oracle_wrapper",
        "enqueue_public_function_call_internal",
        "store_in_execution_cache_oracle_wrapper",
        "build_msg_block",
        "attach_len_to_msg_block",
        "call_private_function_internal",
        "store_in_execution_cache_oracle_wrapper",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "open_private",
      "is_unconstrained": false,
      "custom_attributes": ["private"],
      "abi": {
        "error_types": {
          "10411837482733946431": {
            "error_kind": "string",
            "string": "Invalid order sender"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 75
          },
          "13250867036985658079": {
            "error_kind": "string",
            "string": "Invalid order data type"
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ],
            "length": 98
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3089903740940599642": {
            "error_kind": "string",
            "string": "Invalid fill deadline"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "field"
              }
            ],
            "length": 58
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6579113687620452371": {
            "error_kind": "string",
            "string": "Invalid order origin domain"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "order",
            "type": {
              "fields": [
                {
                  "name": "fill_deadline",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                },
                {
                  "name": "order_data_type",
                  "type": {
                    "kind": "array",
                    "length": 32,
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  }
                },
                {
                  "name": "order_data",
                  "type": {
                    "kind": "array",
                    "length": 268,
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  }
                }
              ],
              "kind": "struct",
              "path": "types::onchain_cross_chain_order::OnchainCrossChainOrder"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": [
        "discover_new_notes",
        "build_msg_block",
        "attach_len_to_msg_block",
        "store_in_execution_cache_oracle_wrapper",
        "enqueue_public_function_call_internal",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "_check_order_status",
      "is_unconstrained": true,
      "custom_attributes": ["public", "internal"],
      "abi": {
        "error_types": {
          "10883657705690251125": {
            "error_kind": "string",
            "string": "Invalid order status"
          },
          "12018683598614887596": {
            "error_kind": "string",
            "string": "Function _check_order_status can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [
          {
            "name": "order_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "status",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": ["_check_order_status"]
    },
    {
      "name": "get_config",
      "is_unconstrained": false,
      "custom_attributes": ["private", "view"],
      "abi": {
        "error_types": {
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 75
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ],
            "length": 98
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "field"
              }
            ],
            "length": 58
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5276036973553878575": {
            "error_kind": "string",
            "string": "Function get_config can only be called statically"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_notes",
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "store_in_execution_cache_oracle_wrapper",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "constructor",
      "is_unconstrained": true,
      "custom_attributes": ["public", "initializer"],
      "abi": {
        "error_types": {
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [
          {
            "name": "portal",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::protocol_types::address::eth_address::EthAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": ["constructor"]
    },
    {
      "name": "get_config_public",
      "is_unconstrained": true,
      "custom_attributes": ["public", "view"],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "15520311074722577191": {
            "error_kind": "string",
            "string": "Function get_config_public can only be called statically"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          }
        },
        "parameters": [],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "portal",
                "type": {
                  "fields": [
                    {
                      "name": "inner",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "aztec::protocol_types::address::eth_address::EthAddress"
                }
              }
            ],
            "kind": "struct",
            "path": "config::Config"
          },
          "visibility": "public"
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgEEACcCAgQAHxgAAgABgEQlAAAARSUAAABGLgQAAYBEKAIAAgSARCcCAwQBOw0AAgADJiUAAADOHgIAAQAeAgACADM4AAEAAgADJwIBAQEkAgADAAAAbyUAAAD3HgIAAQknAgIAAQo4AQIDJAIAAwAAAIslAAABCS8MAAIAARwMAQIALAIAAwAAAAAAAAAAAAAAAAD//////////////////////////w44AgMEJAIABAAAAM0lAAABGyYoAIAEBHgADQAAAIAEgAMkAIADAAAA9ioBAAEF96Hzr6Wt1Mo8AQECJioBAAEFvh4//z6k9vo8AQECJioBAAEF12M4sTxmeyc8AQECJioBAAEFWgLkG7UeqZ88AQECJi4AGMoYyg==",
      "debug_symbols": "7Zffa8JADMf/lz73IbnLj7v9K2OMqnUUSpWqgyH+77uK13buWIeI9EEfxMgnJpdvcjbHbFUuDh/vVbPe7LKX12NWb5bFvto0wTqe8mzRVnVdfbyPv86ge1M+87tt0XTmbl+0++wFyQHkWdmsus/ecviNdVWXwTJwyn/zYEzEgcxAoyZoEuILTcLU04oJ2JHzF9gx8Bh+yzMH90nfxxiI6B+Y/p2qz66vvpuqPrJqpMXav9P3rPGsXtBdpe/tvdNH8zP9Loh7QBAEeUQUxHQUUOyjgLcTUTQgF1xD604oaEiigkb8lYKI8p+Mfp678zN4o9+N8Szd6OeTfuFlhom32PsxJ2pomSJtZTTEKC7VBMbFmUE7pn2KVpbYMspuQky1EmdXCeRvOJxL+uYNhbDX2hPPvjb9OKnAxE1L6mOjk7PDVWV8ciz6ew0BYIAlOXDG92mYCRaRbF89cRM0a4TZj/533Fkfhqc+c9bH6VOfOevjzVOfGetj4Hm/zVefU7A+i7YqFnV52SLXh2Y5Wir3X9vyar/ctptluTq0ZbdpDksmdkJbk1s9P3IGgygnCTFCnG8=",
      "brillig_names": ["get_config_public"]
    },
    {
      "name": "process_log",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 75
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ],
            "length": 48
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ],
            "length": 98
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "field"
              }
            ],
            "length": 58
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ],
            "length": 61
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          }
        },
        "parameters": [
          {
            "name": "log_ciphertext",
            "type": {
              "fields": [
                {
                  "name": "storage",
                  "type": {
                    "kind": "array",
                    "length": 18,
                    "type": {
                      "kind": "field"
                    }
                  }
                },
                {
                  "name": "len",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "std::collections::bounded_vec::BoundedVec"
            },
            "visibility": "private"
          },
          {
            "name": "tx_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "unique_note_hashes_in_tx",
            "type": {
              "fields": [
                {
                  "name": "storage",
                  "type": {
                    "kind": "array",
                    "length": 64,
                    "type": {
                      "kind": "field"
                    }
                  }
                },
                {
                  "name": "len",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "std::collections::bounded_vec::BoundedVec"
            },
            "visibility": "private"
          },
          {
            "name": "first_nullifier_in_tx",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": ["process_log"]
    },
    {
      "name": "sync_notes",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 75
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ],
            "length": 98
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "field"
              }
            ],
            "length": 58
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          }
        },
        "parameters": [],
        "return_type": null
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": ["sync_notes"]
    },
    {
      "name": "_update_order_status",
      "is_unconstrained": true,
      "custom_attributes": ["public", "internal"],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "9169818942746597700": {
            "error_kind": "string",
            "string": "Function _update_order_status can only be called internally"
          }
        },
        "parameters": [
          {
            "name": "order_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "status",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": ["_update_order_status"]
    },
    {
      "name": "_trigger_settlement",
      "is_unconstrained": true,
      "custom_attributes": ["public", "internal"],
      "abi": {
        "error_types": {
          "13594925270014003382": {
            "error_kind": "string",
            "string": "Function _trigger_settlement can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          }
        },
        "parameters": [
          {
            "name": "order_id_bytes",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "filler_data",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": ["_trigger_settlement"]
    },
    {
      "name": "_check_order_commitment",
      "is_unconstrained": true,
      "custom_attributes": ["public", "internal"],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14563046062317426044": {
            "error_kind": "string",
            "string": "Function _check_order_commitment can only be called internally"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "255477095918156618": {
            "error_kind": "string",
            "string": "Invalid order"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          }
        },
        "parameters": [
          {
            "name": "order_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "origin_data_bytes",
            "type": {
              "kind": "array",
              "length": 268,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "filler_data_bytes",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": ["_check_order_commitment"]
    },
    {
      "name": "_assert_nonce_and_set_order_details",
      "is_unconstrained": true,
      "custom_attributes": ["internal", "public"],
      "abi": {
        "error_types": {
          "11094545764365153162": {
            "error_kind": "string",
            "string": "Function _assert_nonce_and_set_order_details can only be called internally"
          },
          "1149705418984161792": {
            "error_kind": "string",
            "string": "Invalid nonce"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          }
        },
        "parameters": [
          {
            "name": "order_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "order_data",
            "type": {
              "kind": "array",
              "length": 268,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": ["_assert_nonce_and_set_order_details"]
    },
    {
      "name": "open",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "error_types": {
          "10411837482733946431": {
            "error_kind": "string",
            "string": "Invalid order sender"
          },
          "1149705418984161792": {
            "error_kind": "string",
            "string": "Invalid nonce"
          },
          "13250867036985658079": {
            "error_kind": "string",
            "string": "Invalid order data type"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3089903740940599642": {
            "error_kind": "string",
            "string": "Invalid fill deadline"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6579113687620452371": {
            "error_kind": "string",
            "string": "Invalid order origin domain"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          }
        },
        "parameters": [
          {
            "name": "order",
            "type": {
              "fields": [
                {
                  "name": "fill_deadline",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                },
                {
                  "name": "order_data_type",
                  "type": {
                    "kind": "array",
                    "length": 32,
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  }
                },
                {
                  "name": "order_data",
                  "type": {
                    "kind": "array",
                    "length": 268,
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  }
                }
              ],
              "kind": "struct",
              "path": "types::onchain_cross_chain_order::OnchainCrossChainOrder"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": ["open"]
    },
    {
      "name": "fill",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "error_types": {
          "13358931442698543651": {
            "error_kind": "string",
            "string": "Order fill expired"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "692953268510459726": {
            "error_kind": "string",
            "string": "Invalid order id"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8412360910299423372": {
            "error_kind": "string",
            "string": "Invalid order destination domain"
          }
        },
        "parameters": [
          {
            "name": "order_id_bytes",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "origin_data_bytes",
            "type": {
              "kind": "array",
              "length": 268,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "filler_data_bytes",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": ["fill"]
    },
    {
      "name": "fill_private",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "error_types": {
          "10852400770788842366": {
            "error_kind": "string",
            "string": "Invalid order domain"
          },
          "13358931442698543651": {
            "error_kind": "string",
            "string": "Order fill expired"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "692953268510459726": {
            "error_kind": "string",
            "string": "Invalid order id"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          }
        },
        "parameters": [
          {
            "name": "order_id_bytes",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "origin_data_bytes",
            "type": {
              "kind": "array",
              "length": 268,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "filler_data_bytes",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": ["fill_private"]
    }
  ],
  "outputs": {
    "globals": {
      "notes": [
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        },
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        }
      ],
      "storage": [
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "Token"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "admin",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "minters",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000002"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "total_supply",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000004"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "public_balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "symbol",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000006"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "name",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000008"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "decimals",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000a"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        },
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "AztecGateway7683"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "config",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "claimable_orders",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "open_orders",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000004"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "order_status",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "used_nonces",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000006"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        }
      ]
    },
    "structs": {
      "events": [
        {
          "fields": [
            {
              "name": "order_id",
              "type": {
                "kind": "array",
                "length": 32,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            },
            {
              "name": "origin_data",
              "type": {
                "kind": "array",
                "length": 268,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            },
            {
              "name": "filler_data",
              "type": {
                "kind": "array",
                "length": 32,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::Filled"
        }
      ],
      "functions": [
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "portal",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::constructor_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::constructor_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "order_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "status",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::_check_order_status_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::_check_order_status_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "order_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "status",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::_update_order_status_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::_update_order_status_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "order_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "origin_data_bytes",
                    "type": {
                      "kind": "array",
                      "length": 268,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "filler_data_bytes",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::_check_order_commitment_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::_check_order_commitment_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "order_id_bytes",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "origin_data_bytes",
                    "type": {
                      "kind": "array",
                      "length": 268,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "filler_data_bytes",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::fill_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::fill_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "secret",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "order_id_bytes",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "origin_data_bytes",
                    "type": {
                      "kind": "array",
                      "length": 268,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "filler_data_bytes",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::claim_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::claim_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "order_id_bytes",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "origin_data_bytes",
                    "type": {
                      "kind": "array",
                      "length": 268,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "filler_data_bytes",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::fill_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::fill_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "order_id_bytes",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "filler_data",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::_trigger_settlement_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::_trigger_settlement_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "order_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "order_data",
                    "type": {
                      "kind": "array",
                      "length": 268,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::_assert_nonce_and_set_order_details_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::_assert_nonce_and_set_order_details_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "AztecGateway7683::get_config_public_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "portal",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "config::Config"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::get_config_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "AztecGateway7683::get_config_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "portal",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "config::Config"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::get_config_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "order",
                    "type": {
                      "fields": [
                        {
                          "name": "fill_deadline",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 32
                          }
                        },
                        {
                          "name": "order_data_type",
                          "type": {
                            "kind": "array",
                            "length": 32,
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          }
                        },
                        {
                          "name": "order_data",
                          "type": {
                            "kind": "array",
                            "length": 268,
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "types::onchain_cross_chain_order::OnchainCrossChainOrder"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::open_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::open_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "order",
                    "type": {
                      "fields": [
                        {
                          "name": "fill_deadline",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 32
                          }
                        },
                        {
                          "name": "order_data_type",
                          "type": {
                            "kind": "array",
                            "length": 32,
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          }
                        },
                        {
                          "name": "order_data",
                          "type": {
                            "kind": "array",
                            "length": 268,
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "types::onchain_cross_chain_order::OnchainCrossChainOrder"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::open_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::open_abi"
        }
      ]
    }
  },
  "file_map": {
    "104": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n    hash::poseidon2_hash_with_separator, utils::field::full_field_less_than,\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::oracle::get_public_data_witness::get_public_data_witness;\nuse protocol_types::traits::{Hash, ToField};\n\nmod test;\n\npub trait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(\n        header: BlockHeader,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for BlockHeader {\n    fn public_storage_historical_read(\n        self,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n        );\n\n        // 2) Get the membership witness for the tree index.\n        // Safety: The witness is only used as a \"magical value\" that makes the proof below pass. Hence it's safe.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index,\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert_eq(\n            self.state.partial.public_data_tree.root,\n            root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path),\n            \"Proving public value inclusion failed\",\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(\n                preimage.slot,\n                public_data_tree_index,\n                \"Public data tree index doesn't match witness\",\n            );\n            preimage.value\n        };\n\n        value\n    }\n}\n"
    },
    "109": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr",
      "source": "use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n"
    },
    "113": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/macros/dispatch/mod.nr",
      "source": "use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let name = function.name();\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n"
    },
    "116": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/macros/functions/call_interface_stubs.nr",
      "source": "use crate::macros::utils::{\n    add_to_field_slice, AsStrQuote, compute_fn_selector, is_fn_private, is_fn_view,\n};\nuse std::meta::{type_of, unquote};\n\ncomptime global FROM_FIELD: TypedExpr = {\n    let from_field_trait = quote { protocol_types::traits::FromField }.as_trait_constraint();\n    let function_selector_typ =\n        quote { protocol_types::abis::function_selector::FunctionSelector }.as_type();\n    function_selector_typ.get_trait_impl(from_field_trait).unwrap().methods().filter(|m| {\n        m.name() == quote { from_field }\n    })[0]\n        .as_typed_expr()\n};\n\ncomptime global SERIALIZED_ARGS_SLICE_NAME: Quoted = quote { serialized_args };\n\npub comptime fn stub_fn(f: FunctionDefinition) -> Quoted {\n    let is_static_call = is_fn_view(f);\n    let is_void = f.return_type() == type_of(());\n\n    if is_fn_private(f) {\n        if is_static_call {\n            if is_void {\n                create_private_static_void_stub(f)\n            } else {\n                create_private_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_private_void_stub(f)\n            } else {\n                create_private_stub(f)\n            }\n        }\n    } else {\n        if is_static_call {\n            if is_void {\n                create_public_static_void_stub(f)\n            } else {\n                create_public_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_public_void_stub(f)\n            } else {\n                create_public_stub(f)\n            }\n        }\n    }\n}\n\n/// Utility function creating stubs used by all the stub functions in this file.\ncomptime fn create_stub_base(\n    f: FunctionDefinition,\n) -> (Quoted, Quoted, Quoted, Quoted, u32, Field) {\n    let fn_name = f.name();\n    let fn_parameters = f.parameters();\n    let fn_parameters_list =\n        fn_parameters.map(|(name, typ): (Quoted, Type)| quote { $name: $typ }).join(quote {,});\n\n    // Example of what the fold(...) below will generate for `target_address` and `fee_juice_limit_per_tx` function\n    // parameters:\n    // ```\n    // let mut serialized_args =  &[];\n    // serialized_args = serialized_args.append(aztec::protocol_types::traits::Serialize::serialize(target_address));\n    // serialized_args = serialized_args.push_back(fee_juice_limit_per_tx as Field);\n    // ```\n    let serialized_args_slice_construction = fn_parameters.fold(\n        quote {\n            let mut $SERIALIZED_ARGS_SLICE_NAME = &[];\n        },\n        |args, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let arg_to_append = add_to_field_slice(SERIALIZED_ARGS_SLICE_NAME, name, typ);\n            quote {\n                $args\n                $arg_to_append\n            }\n        },\n    );\n\n    let (fn_name_str, _) = fn_name.as_str_quote();\n    let fn_name_len: u32 = unquote!(quote { $fn_name_str.as_bytes().len()});\n    let fn_selector: Field = compute_fn_selector(f);\n\n    (\n        fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len,\n        fn_selector,\n    )\n}\n\ncomptime fn create_private_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_private_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n\ncomptime fn create_public_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_public_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n"
    },
    "117": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"
    },
    "12": {
      "path": "std/convert.nr",
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n"
    },
    "120": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr",
      "source": "use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_initializer, is_fn_internal,\n        is_fn_private, is_fn_public, is_fn_view, modify_fn_body, module_has_initializer,\n        module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform note discovery, since they may need to access notes. This is slightly inefficient\n    // and could be improved by only doing it once we actually attempt to read any.\n    let note_discovery_call = if NOTES.len() > 0 {\n        create_note_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $note_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, &[], false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn find_and_transform_top_level_unconstrained_fns(m: Module) {\n    // Top-level unconstrained fns are contract entrypoints, but they're not explicitly designated in any way. They're\n    // the fallback case for a function that matches no other rules.\n    // TODO(#12743): improve this\n\n    // We first find non-standard contract entrypoints, i.e. functions in the `contract` mod that are not private or\n    // public, but which *are* contract entrypoints (i.e. they're not opting out via the #[test] or\n    // #[contract_library_method] attributes). Ideally entrypoints would be explicitly designated instead.\n    let non_private_public_entrypoint_functions = m.functions().filter(|f: FunctionDefinition| {\n        !is_fn_private(f)\n            & !is_fn_public(f)\n            & !f.has_named_attribute(\"contract_library_method\")\n            & !f.has_named_attribute(\"test\")\n    });\n\n    // TODO: uncomment the code below and emit a warning once support for them is added to Noir (tracked in\n    // https://github.com/noir-lang/noir/issues/7714). We can't simply print a message since that'd otherwise break the\n    // output of utils such as `nargo test --list-tests`.\n    // // We don't expect to see any custom constrained entrypoints (i.e. private functions created outside of aztec-nr's\n    // // #[private] macro, possibly resulting in a non-standard interface).\n    // for f in non_private_public_entrypoint_functions.filter(|f: FunctionDefinition| {\n    //     !f.is_unconstrained()\n    // }) {\n    //     let name = f.name();\n    //     warn(\n    //         f\"found private contract function '{name}' which does not have the #[private] attribute - make sure you know what you're doing!\",\n    //     );\n    // }\n\n    // An unconstrained contract entrypoints is what we call a top-level unconstrained function, to which we apply the\n    // appropriate transformation. Ideally these would be explicitly designated as such instead.\n    for f in non_private_public_entrypoint_functions.filter(|f: FunctionDefinition| {\n        f.is_unconstrained()\n    }) {\n        transform_top_level_unconstrained(f);\n    }\n}\n\npub(crate) comptime fn transform_top_level_unconstrained(f: FunctionDefinition) {\n    let context_creation = quote { let mut context = dep::aztec::context::unconstrained_context::UnconstrainedContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All unconstrained functions perform note discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let note_discovery_call = if NOTES.len() > 0 {\n        create_note_discovery_call()\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $note_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_return_public(true);\n    f.set_body(modified_body);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::discovery::discover_new_notes`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_note_discovery_call() -> Quoted {\n    quote {\n        /// Safety: note discovery returns nothing and is performed solely for its side-effects. It is therefore always\n        /// safe to call.\n        unsafe {\n            dep::aztec::discovery::discover_new_notes(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n"
    },
    "121": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/macros/mod.nr",
      "source": "pub mod dispatch;\npub mod functions;\npub mod utils;\npub mod notes;\npub mod storage;\npub mod events;\n\nuse functions::{\n    stub_registry,\n    utils::{create_note_discovery_call, find_and_transform_top_level_unconstrained_fns},\n};\nuse notes::{generate_note_export, NOTES};\nuse storage::STORAGE_LAYOUT_NAME;\n\nuse dispatch::generate_public_dispatch;\nuse utils::{get_trait_impl_method, module_has_storage};\n\nuse crate::discovery::MAX_NOTE_PACKED_LEN;\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `process_log` and `sync_notes` functions PXE requires in order to discover notes.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    find_and_transform_top_level_unconstrained_fns(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let process_log = generate_process_log();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_notes = generate_sync_notes();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $process_log\n        $public_dispatch\n        $sync_notes\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The note discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(nonce).into() \n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_notes`, `do_process_log`\n            /// and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::discovery::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                nonce: Field,\n            ) -> Option<aztec::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::discovery::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_process_log() -> Quoted {\n    // This mandatory function processes a log emitted by the contract. This is currently used to process private logs\n    // and perform note discovery of either private notes or partial notes.\n    // The bulk of the work of this function is done by aztec::discovery::do_process_log, so all we need to do is call\n    // that function.\n\n    // We'll produce the entire body of the function in one go and then insert it into the function.\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        quote {\n            unconstrained fn process_log(\n                log_ciphertext: BoundedVec<Field, dep::aztec::protocol_types::constants::PRIVATE_LOG_SIZE_IN_FIELDS>,\n                tx_hash: Field,\n                unique_note_hashes_in_tx: BoundedVec<Field, dep::aztec::protocol_types::constants::MAX_NOTE_HASHES_PER_TX>,\n                first_nullifier_in_tx: Field,\n                recipient: aztec::protocol_types::address::AztecAddress,\n            ) {\n                // Because this unconstrained function is injected after the contract is processed by the macros, it'll not\n                // be modified by the macros that alter unconstrained functions. As such, we need to manually inject the\n                // unconstrained execution context since it will not be available otherwise.\n                let context = dep::aztec::context::unconstrained_context::UnconstrainedContext::new();\n\n                // TODO(#10727): allow other contracts to process logs and deliver notes\n                let contract_address = context.this_address();\n\n                aztec::discovery::private_logs::do_process_log(\n                    contract_address,\n                    log_ciphertext,\n                    tx_hash,\n                    unique_note_hashes_in_tx,\n                    first_nullifier_in_tx,\n                    recipient,\n                    _compute_note_hash_and_nullifier,\n                );\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            unconstrained fn process_log(\n                _log_ciphertext: BoundedVec<Field, dep::aztec::protocol_types::constants::PRIVATE_LOG_SIZE_IN_FIELDS>,\n                _tx_hash: Field,\n                _unique_note_hashes_in_tx: BoundedVec<Field, dep::aztec::protocol_types::constants::MAX_NOTE_HASHES_PER_TX>,\n                _first_nullifier_in_tx: Field,\n                _recipient: aztec::protocol_types::address::AztecAddress,\n            ) {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_notes() -> Quoted {\n    let note_discovery_call = create_note_discovery_call();\n    quote {\n        unconstrained fn sync_notes() {\n            // Because this unconstrained function is injected after the contract is processed by the macros, it'll not\n            // be modified by the macros that alter unconstrained functions. As such, we need to manually inject the\n            // unconstrained execution context since it will not be available otherwise.\n            let context = dep::aztec::context::unconstrained_context::UnconstrainedContext::new();\n\n            $note_discovery_call\n        }\n    }\n}\n"
    },
    "122": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/macros/notes/mod.nr",
      "source": "use crate::{macros::utils::AsStrQuote, note::note_getter_options::PropertySelector};\nuse protocol_types::meta::{derive_packable_and_get_packed_len, generate_serialize_to_fields};\nuse std::{\n    collections::umap::UHashMap,\n    hash::{BuildHasherDefault, Hash, Hasher, poseidon2::Poseidon2Hasher},\n    meta::{type_of, unquote},\n};\n\n/// A map from note type to (note_struct_definition, note_packed_len, note_type_id, fields).\n/// `fields` is an array of tuples where each tuple contains the name of the field/struct member (e.g. `amount`\n/// in `TokenNote`), the index of where the packed member starts in the packed note and a flag indicating\n/// whether the field is nullable or not.\npub comptime mut global NOTES: UHashMap<Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]), BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\npub comptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < 128 as u32,\n        \"A contract can contain at most 128 different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates a quote that implements `Packable` for a given struct `s`.\n/// If the note struct already implements `Packable`, we return an empty quote.\ncomptime fn derive_packable_if_not_implemented_and_get_len(s: TypeDefinition) -> (Quoted, u32) {\n    // We try to get the packed length of the note struct. If it does not implement `Packable`, we get Option::none()\n    let packed_len_typ = std::meta::typ::fresh_type_variable();\n    // We don't care about the result of the implements check. We just want the get the packed length.\n    let _ = s.as_type().implements(\n        quote { crate::protocol_types::traits::Packable<$packed_len_typ> }.as_trait_constraint(),\n    );\n    let maybe_packed_length = packed_len_typ.as_constant();\n\n    if maybe_packed_length.is_some() {\n        // We got some packed length meaning that the note struct implements `Packable`. For this reason we return\n        // an empty quote for the implementation and the packed length.\n        (quote {}, maybe_packed_length.unwrap())\n    } else {\n        // We didn't manage to get the packed length which means the note struct doesn't implement `Packable`\n        // so we derive it and return it along with the packed length.\n        derive_packable_and_get_packed_len(s)\n    }\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_interface(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::utils::arrays::array_concat(aztec::protocol_types::traits::Packable::pack(self), [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::prelude::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _): (Quoted, Type)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates note export for a given note struct `s`. The export is a global variable that contains note type id,\n/// note name and information about note fields (field name, index and whether the field is nullable or not).\n///\n/// Example:\n/// ```\n/// struct TokenNoteFields_5695262104 {\n///     amount: aztec::note::note_field::NoteField,\n///     owner: aztec::note::note_field::NoteField\n/// }\n///\n/// #[abi(notes)]\n/// global TokenNote_EXPORTS_5695262104: (Field, str<8>, TokenNoteFields_5695262104) = (\n///     0,\n///     \"TokenNote\",\n///     TokenNoteFields_5695262104 {\n///         amount: aztec::note::note_field::NoteField { index: 0, nullable: false },\n///         owner: aztec::note::note_field::NoteField { index: 1, nullable: false }\n///     }\n/// );\n///\n/// Randomly looking value at the end of the export name is generated by hashing the note struct type and is included\n/// to prevent naming collisions in case there are multiple notes with the same name imported in a contract.\npub(crate) comptime fn generate_note_export(\n    s: TypeDefinition,\n    note_type_id: Field,\n    fields: [(Quoted, u32, bool)],\n) -> Quoted {\n    let name = s.name();\n    let mut hasher = Poseidon2Hasher::default();\n    s.as_type().hash(&mut hasher);\n    let hash = hasher.finish() as u32;\n    let global_export_name = f\"{name}_EXPORTS_{hash}\".quoted_contents();\n    let note_fields_name = f\"{name}Fields_{hash}\".quoted_contents();\n    let (note_name_as_str, _) = name.as_str_quote();\n    let note_name_str_len = unquote!(quote { $note_name_as_str.as_bytes().len() });\n\n    let mut note_fields = &[];\n    let mut note_field_constructors = &[];\n    for field in fields {\n        let (name, index, nullable) = field;\n        note_fields = note_fields.push_back(quote { $name: aztec::note::note_field::NoteField });\n        note_field_constructors = note_field_constructors.push_back(\n            quote { $name: aztec::note::note_field::NoteField { index: $index, nullable: $nullable }},\n        );\n    }\n\n    let note_fields = note_fields.join(quote {,});\n    let note_field_constructors = note_field_constructors.join(quote {,});\n\n    quote {\n        pub struct $note_fields_name {\n            pub $note_fields\n        }\n\n        #[abi(notes)]\n        global $global_export_name: (Field, str<$note_name_str_len>, $note_fields_name) = ($note_type_id, $note_name_as_str, $note_fields_name { $note_field_constructors });\n    }\n}\n\n/// Registers a note struct `note` with the given `note_packed_len`, `note_type_id`, `fixed_fields` and\n/// `nullable_fields` in the global `NOTES` map.\ncomptime fn register_note(\n    note: TypeDefinition,\n    note_packed_len: u32,\n    note_type_id: Field,\n    fixed_fields: [(Quoted, Type, u32)],\n    nullable_fields: [(Quoted, Type, u32)],\n) {\n    let mut fields = &[];\n    for field in fixed_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, false));\n    }\n    for field in nullable_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, true));\n    }\n\n    NOTES.insert(note.as_type(), (note, note_packed_len, note_type_id, fields));\n}\n\n/// Separates note struct members into fixed and nullable ones. It also stores the index of where each struct member\n/// starts in the serialized note. Note that each struct member can occupy multiple fields (as in Field type).\ncomptime fn index_note_fields(\n    s: TypeDefinition,\n    nullable_fields: [Quoted],\n) -> ([(Quoted, Type, u32)], [(Quoted, Type, u32)]) {\n    let mut indexed_fixed_fields: [(Quoted, Type, u32)] = &[];\n    let mut indexed_nullable_fields = &[];\n    let mut counter: u32 = 0;\n    for field in s.fields_as_written() {\n        let (name, typ) = field;\n        if nullable_fields.all(|field| field != name) {\n            indexed_fixed_fields = indexed_fixed_fields.push_back((name, typ, counter));\n        } else {\n            indexed_nullable_fields = indexed_nullable_fields.push_back((name, typ, counter));\n        }\n        let (serialization_fields, _) = generate_serialize_to_fields(name, typ, &[], true);\n        // Each struct member can occupy multiple fields so we need to increment the counter accordingly\n        counter += serialization_fields.len();\n    }\n    (indexed_fixed_fields, indexed_nullable_fields)\n}\n\n/// Generates the following:\n/// - NoteTypeProperties\n/// - NoteType trait implementation\n/// - NoteHash trait implementation\n/// - Packable implementation\n///\n/// Registers the note in the global `NOTES` map.\n///\n/// For more details on the generated code, see the individual functions.\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $note_hash_impl\n        $packable_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - Packable implementation: Enables serialization/deserialization of the note\n///\n/// # Registration\n/// Registers the note in the global `NOTES` map with:\n/// - Note type ID\n/// - Packed length\n/// - Field indices and nullability\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n    let note_type_id = get_next_note_type_id();\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    let note_properties = generate_note_properties(s);\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $packable_impl\n    }\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    assert(\n        has_owner,\n        \"Note must have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n"
    },
    "123": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/macros/storage/mod.nr",
      "source": "use std::{collections::umap::UHashMap, hash::{BuildHasherDefault, poseidon2::Poseidon2Hasher}};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\nuse super::utils::is_note;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract. Only a single struct in the entire contract\n/// should have this macro (or `storage_no_init`) applied to it.\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot }, false);\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n/// Only a single struct in the entire contract should have this macro (or `storage`) applied to it.\npub comptime fn storage_no_init(_s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(\n    typ: Type,\n    slot: Quoted,\n    parent_is_map: bool,\n) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot }, true);\n        (quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }, 1)\n    } else {\n        let storage_size = if parent_is_map {\n            // Variables inside a map do not require contiguous slots since the map slot derivation is assumed to result\n            // in slots very far away from one another.\n            1\n        } else {\n            let (_, container_struct_generics) = typ.as_data_type().unwrap();\n            let stored_struct = container_struct_generics[0];\n\n            if is_note(stored_struct) {\n                // Private notes always occupy a single slot, since the slot is only used as a state variable\n                // identifier.\n                1\n            } else {\n                get_storage_size(typ)\n            }\n        };\n\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        (quote { $struct_name::new(context, $slot)}, storage_size)\n    }\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n"
    },
    "124": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/macros/utils.nr",
      "source": "use std::meta::unquote;\n\npub(crate) comptime fn get_fn_visibility(f: FunctionDefinition) -> Quoted {\n    if f.has_named_attribute(\"private\") {\n        quote { private }\n    } else if f.has_named_attribute(\"public\") {\n        quote { public }\n    } else {\n        panic(f\"Function is neither private nor public\")\n    }\n}\n\npub(crate) comptime fn is_fn_private(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"private\")\n}\n\npub(crate) comptime fn is_fn_public(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"public\")\n}\n\npub(crate) comptime fn is_fn_view(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"view\")\n}\n\npub(crate) comptime fn is_fn_internal(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"internal\")\n}\n\npub(crate) comptime fn is_fn_initializer(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"initializer\")\n}\n\npub(crate) comptime fn fn_has_noinitcheck(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"noinitcheck\")\n}\n\n/// Takes a function body as a collection of expressions, and alters it by prepending and appending quoted values.\npub(crate) comptime fn modify_fn_body(body: [Expr], prepend: Quoted, append: Quoted) -> Expr {\n    // We need to quote the body before we can alter its contents, so we fold it by quoting each expression.\n    let mut body_quote = body.fold(quote {}, |full_quote: Quoted, expr: Expr| {\n        let expr_quote = expr.quoted();\n        quote {\n                $full_quote\n                $expr_quote\n            }\n    });\n    body_quote = quote {\n        {\n            $prepend\n            $body_quote\n            $append\n        }\n    };\n    let body_expr = body_quote.as_expr();\n    body_expr.expect(f\"Body is not an expression: {body_quote}\")\n}\n\npub(crate) comptime fn add_to_field_slice(slice_name: Quoted, name: Quoted, typ: Type) -> Quoted {\n    if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        quote { $slice_name = $slice_name.push_back($name as Field); }\n    } else if typ.as_data_type().is_some() {\n        // We invoke serialize as a static trait function rather than calling $name.serialize() directly in the quote\n        // to avoid \"trait not in scope\" compiler warnings.\n        quote { $slice_name = $slice_name.append(aztec::protocol_types::traits::Serialize::serialize($name)); }\n    } else if typ.as_array().is_some() {\n        let (element_type, _) = typ.as_array().unwrap();\n        let serialized_name = f\"{name}_serialized\".quoted_contents();\n        // We invoke serialize as a static trait function rather than calling x.serialize() directly in the quote\n        // to avoid \"trait not in scope\" compiler warnings.\n        quote {\n            let $serialized_name = $name.map(|x: $element_type | aztec::protocol_types::traits::Serialize::serialize(x));\n            for i in 0..$name.len() {\n                $slice_name = $slice_name.append($serialized_name[i].as_slice());\n            }\n        }\n    } else if typ.as_str().is_some() {\n        quote {\n            $slice_name = $slice_name.append($name.as_bytes().map(| byte: u8 | byte as Field).as_slice());\n        }\n    } else {\n        panic(\n            f\"Cannot add to slice: unsupported type {typ} variable {name}\",\n        )\n    }\n}\n\n/// Adds a value to a hash::ArgsHasher. Structs and values inside arrays are required to implement the Serialize trait.\npub(crate) comptime fn add_to_hasher(hasher_name: Quoted, name: Quoted, typ: Type) -> Quoted {\n    if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        quote { $hasher_name.add($name as Field); }\n    } else if typ.as_data_type().is_some() {\n        quote { $hasher_name.add_multiple(dep::aztec::protocol_types::traits::Serialize::serialize($name)); }\n    } else if typ.as_array().is_some() {\n        let (element_type, _) = typ.as_array().unwrap();\n        let serialized_name = f\"{name}_serialized\".quoted_contents();\n        quote {\n           let $serialized_name = $name.map(|x: $element_type | dep::aztec::protocol_types::traits::Serialize::serialize(x));\n            for i in 0..$name.len() {\n                $hasher_name.add_multiple($serialized_name[i]);\n            }\n        }\n    } else if typ.as_str().is_some() {\n        quote {\n            $hasher_name.add_multiple($name.as_bytes().map(| byte: u8 | byte as Field));\n        }\n    } else {\n        panic(\n            f\"Cannot add to hasher: unsupported type {typ} of variable {name}\",\n        )\n    }\n}\n\ncomptime fn signature_of_type(typ: Type) -> Quoted {\n    if typ.is_field() {\n        quote {Field}\n    } else if typ.as_integer().is_some() {\n        let (is_signed, bit_size) = typ.as_integer().unwrap();\n        if is_signed {\n            f\"i{bit_size}\".quoted_contents()\n        } else {\n            f\"u{bit_size}\".quoted_contents()\n        }\n    } else if typ.is_bool() {\n        quote {bool}\n    } else if typ.as_str().is_some() {\n        let str_len_typ = typ.as_str().unwrap();\n        let str_len = str_len_typ.as_constant().unwrap();\n        f\"str<{str_len}>\".quoted_contents()\n    } else if typ.as_array().is_some() {\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let element_typ_quote = signature_of_type(element_type);\n        f\"[{element_typ_quote};{array_len}]\".quoted_contents()\n    } else if typ.as_data_type().is_some() {\n        let (s, generics) = typ.as_data_type().unwrap();\n        let field_signatures = s\n            .fields(generics)\n            .map(|(_, typ): (Quoted, Type)| signature_of_type(typ))\n            .join(quote {,});\n        f\"({field_signatures})\".quoted_contents()\n    } else if typ.as_tuple().is_some() {\n        // Note that tuples are handled the same way as structs\n        let types = typ.as_tuple().unwrap();\n        let field_signatures = types.map(|typ: Type| signature_of_type(typ)).join(quote {,});\n        f\"({field_signatures})\".quoted_contents()\n    } else {\n        panic(f\"Unsupported type {typ}\")\n    }\n}\n\npub(crate) trait AsStrQuote {\n    fn as_str_quote(self) -> (Self, u32);\n}\n\nimpl<let N: u32, Env> AsStrQuote for Quoted {\n    // Used to convert an arbitrary quoted type into a quoted string, removing whitespace between tokens\n    comptime fn as_str_quote(self) -> (Quoted, u32) {\n        let tokens = self.tokens();\n        let mut acc: [u8] = &[];\n        let mut total_len: u32 = 0;\n        for token in tokens {\n            let token_as_fmt_str = f\"{token}\";\n            let token_as_str = unquote!(quote {$token_as_fmt_str});\n            let token_len = unquote!(quote { $token_as_str.as_bytes().len() });\n            let token_as_bytes = unquote!(quote { $token_as_str.as_bytes().as_slice() });\n            total_len += token_len;\n            acc = acc.append(token_as_bytes);\n        }\n        let result = unquote!(\n            quote {\n                let signature_as_array: [u8; $total_len] = $acc.as_array();\n                signature_as_array.as_str_unchecked()\n            },\n        );\n        (quote { $result }, total_len)\n    }\n}\n\npub(crate) comptime fn compute_fn_selector(f: FunctionDefinition) -> Field {\n    // The function selector is computed from the function signature, which is made up of the function name and types of\n    // parameters, but not including the return type. For example, given:\n    //\n    // fn foo(a: Field, b: AztecAddress) -> Field\n    //\n    // The signature will be \"foo(Field,AztecAddress)\".\n    let fn_name = f.name();\n    let args_signatures =\n        f.parameters().map(|(_, typ): (Quoted, Type)| signature_of_type(typ)).join(quote {,});\n    let signature_quote = quote { $fn_name($args_signatures) };\n    let (signature_str_quote, _) = signature_quote.as_str_quote();\n\n    let computation_quote = quote {\n        protocol_types::traits::ToField::to_field(protocol_types::abis::function_selector::FunctionSelector::from_signature($signature_str_quote))\n    };\n    unquote!(computation_quote)\n}\n\npub(crate) comptime fn compute_event_selector(s: TypeDefinition) -> Field {\n    // The event selector is computed from the type signature of the struct in the event, similar to how one might type\n    // the constructor function. For example, given:\n    //\n    // struct Foo {\n    //   a: Field,\n    //   b: AztecAddress,\n    // }\n    //\n    // The signature will be \"Foo(Field,AztecAddress)\".\n    let event_name = s.name();\n    let args_signatures = s\n        .fields_as_written()\n        .map(|(_, typ): (Quoted, Type)| {\n            // signature_of_type can handle structs, so this supports nested structs\n            // FIXME: Field generics are not handled here!\n            signature_of_type(typ)\n        })\n        .join(quote {,});\n    let signature_quote = quote { $event_name($args_signatures) };\n    let (signature_str_quote, _) = signature_quote.as_str_quote();\n\n    let computation_quote = quote {\n        protocol_types::traits::ToField::to_field(protocol_types::abis::event_selector::EventSelector::from_signature($signature_str_quote))\n    };\n    unquote!(computation_quote)\n}\n\n/// Returns how many storage slots a type needs to reserve for itself. State variables must implement the Storage trait\n/// for slots to be allocated for them.\npub(crate) comptime fn get_storage_size(typ: Type) -> u32 {\n    // We create a type variable for the storage size. We can't simply read the value used in the implementation because\n    // it may not be a constant (e.g. N + 1). We then bind it to the implementation of the Storage trait.\n    let storage_size = std::meta::typ::fresh_type_variable();\n    assert(\n        typ.implements(quote { crate::state_vars::Storage<$storage_size> }.as_trait_constraint()),\n        f\"Attempted to fetch storage size, but {typ} does not implement the Storage trait\",\n    );\n\n    storage_size.as_constant().unwrap()\n}\n\npub(crate) comptime fn module_has_storage(m: Module) -> bool {\n    m.structs().any(|s: TypeDefinition| {\n        s.has_named_attribute(\"storage\") | s.has_named_attribute(\"storage_no_init\")\n    })\n}\n\npub(crate) comptime fn module_has_initializer(m: Module) -> bool {\n    m.functions().any(|f: FunctionDefinition| is_fn_initializer(f))\n}\n\npub(crate) comptime fn is_note(typ: Type) -> bool {\n    typ.as_data_type().map_or(false, |struc: (TypeDefinition, [Type])| {\n        let (def, _) = struc;\n        def.has_named_attribute(\"note\")\n            | def.has_named_attribute(\"partial_note\")\n            | def.has_named_attribute(\"custom_note\")\n    })\n}\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `noir-protocol-circuits/crates/types/src/meta/mod.nr`. We maintain separate\n/// copies because importing it here from there would cause the `target_trait` to be interpreted in the context\n/// of the protocol circuits types crate, making it impossible to compile code for traits from this crate\n/// (e.g. NoteType).\npub(crate) comptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ.get_trait_impl(trait_constraint).expect(f\"Type does not implement trait\").methods().filter(\n        |m| m.name() == target_method,\n    )[0]\n        .as_typed_expr()\n}\n"
    },
    "135": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr",
      "source": "use protocol_types::traits::Serialize;\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, nonce: Field },\n//   Settled{ nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_nonce }\n            }\n        } else if maybe_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n"
    },
    "138": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/note/utils.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let nonce = retrieved_note.metadata.to_pending_previous_phase().nonce();\n\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n"
    },
    "141": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"
    },
    "142": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr",
      "source": "use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n"
    },
    "143": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr",
      "source": "use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) -> Field {}\n\npub unconstrained fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) -> Field {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) -> Field {}\n\npub unconstrained fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) -> Field {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"
    },
    "144": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
    },
    "145": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr",
      "source": "/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values) };\n}\n\npub unconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field]) {\n    let _ = store_in_execution_cache_oracle(values);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field]) -> Field {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n"
    },
    "146": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress,\n    constants::CONTRACT_INSTANCE_LENGTH,\n    contract_class_id::ContractClassId,\n    contract_instance::ContractInstance,\n    traits::{Deserialize, FromField},\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(\n    _address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(\n    address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance =\n        unsafe { ContractInstance::deserialize(get_contract_instance_internal(address)) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"
    },
    "150": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr",
      "source": "use crate::utils::array;\nuse dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: u32 = 45;\n\npub struct PublicDataWitness {\n    pub index: Field,\n    pub leaf_preimage: PublicDataTreeLeafPreimage,\n    pub path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field,\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\npub unconstrained fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field,\n) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage {\n            slot: fields[1],\n            value: fields[2],\n            next_index: fields[3] as u32,\n            next_slot: fields[4],\n        },\n        path: array::subarray(fields, 1 + LEAF_PREIMAGE_LENGTH),\n    }\n}\n"
    },
    "151": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr",
      "source": "use dep::protocol_types::{\n    abis::validation_requests::{\n        key_validation_request::KEY_VALIDATION_REQUEST_LENGTH, KeyValidationRequest,\n    },\n    traits::Deserialize,\n};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"
    },
    "152": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"
    },
    "155": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/oracle/note_discovery.nr",
      "source": "use crate::discovery::MAX_NOTE_PACKED_LEN;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PUBLIC_LOG_DATA_SIZE_IN_FIELDS},\n};\n\n/// Finds new notes that may have been sent to all registered accounts in PXE in the current contract and makes them\n/// available for later querying via the `get_notes` oracle.\npub unconstrained fn sync_notes() {\n    sync_notes_oracle();\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle() {}\n\n/// Informs PXE of a note's existence so that it can later be retrieved by the `getNotes` oracle. The note will be\n/// scoped to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The packed note is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was successfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        packed_note,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n/// The contents of a public log, plus contextual information about the transaction in which the log was emitted. This\n/// is the data required in order to discover notes that are being delivered in a log.\n// TODO(#11639): this could also be used to fetch private logs, but the `BoundedVec` maximum length is that of a public\n// log.\npub struct LogWithTxData {\n    pub log_content: BoundedVec<Field, PUBLIC_LOG_DATA_SIZE_IN_FIELDS>,\n    pub tx_hash: Field,\n    /// The array of new note hashes created by `tx_hash`\n    pub unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    /// The first nullifier created by `tx_hash`\n    pub first_nullifier_in_tx: Field,\n}\n\n/// Fetches a log from the node that has the corresponding `tag`. The log can be either a public or a private log, and\n/// the tag is the first field in the log's content. Returns `Option::none` if no such log exists. Throws if more than\n/// one log with that tag exists.\n/// Public logs have an extra field included at the beginning with the address of the contract that emitted them.\n// TODO(#11627): handle multiple logs with the same tag.\n// TODO(#10273): improve contract siloing of logs, don't introduce an extra field.\npub unconstrained fn get_log_by_tag(tag: Field) -> Option<LogWithTxData> {\n    get_log_by_tag_oracle(tag)\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n\n#[oracle(getLogByTag)]\nunconstrained fn get_log_by_tag_oracle(tag: Field) -> Option<LogWithTxData> {}\n"
    },
    "158": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr",
      "source": "use dep::protocol_types::{\n    address::aztec_address::AztecAddress,\n    point::{Point, POINT_LENGTH},\n    traits::Deserialize,\n};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(\n    address: AztecAddress,\n    ephPk: Point,\n) -> [Field; POINT_LENGTH] {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    let fields = get_shared_secret_oracle(address, ephPk);\n    Point::deserialize(fields)\n}\n"
    },
    "159": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/oracle/storage.nr",
      "source": "use dep::protocol_types::{address::AztecAddress, traits::{Packable, ToField}};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field,\n    )\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n"
    },
    "16": {
      "path": "std/embedded_curve_ops.nr",
      "source": "use crate::cmp::Eq;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint {\n        x: 1,\n        y: 17631683881184975370165255887551781615748388533673675138860,\n        is_infinite: false,\n    };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint {\n        x: point1.x + (x_coordinates_match as Field),\n        y: point1.y,\n        is_infinite: x_coordinates_match,\n    };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result = point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"
    },
    "161": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr",
      "source": "use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"
    },
    "168": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr",
      "source": "use crate::{\n    context::{PrivateContext, PublicContext, UnconstrainedContext},\n    state_vars::storage::Storage,\n    utils::with_hash::WithHash,\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::Packable};\n\n/// Stores an immutable value in public state which can be read from public, private and unconstrained execution\n/// contexts.\n///\n/// Leverages `WithHash<T>` to enable efficient private reads of public storage. `WithHash` wrapper allows for\n/// efficient reads by verifying large values through a single hash check and then proving inclusion only of the hash\n/// in the public storage. This reduces the number of required tree inclusion proofs from O(M) to O(1).\n///\n/// This is valuable when T packs to multiple fields, as it maintains \"almost constant\" verification overhead\n/// regardless of the original data size.\n///\n/// # Optimizing private reads in your contract\n/// Given that reading T from public immutable in private has \"almost constant\" constraints cost for different sizes\n/// of T it is recommended to group multiple values into a single struct when they are being read together. This can\n/// typically be some kind of configuration set up during contract initialization. E.g.:\n///\n/// ```noir\n/// use dep::aztec::protocol_types::{address::AztecAddress, traits::Packable};\n/// use std::meta::derive;\n///\n/// #[derive(Eq, Packable)]\n/// pub struct Config \\{\n///     pub address_1: AztecAddress,\n///     pub value_1: u128,\n///     pub value_2: u64,\n///     ...\n/// }\n/// ```\n///\n// docs:start:public_immutable_struct\npub struct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\n/// `WithHash<T>` stores both the packed value (using N fields) and its hash (1 field), requiring N = M + 1 total\n/// fields.\nimpl<T, Context, let M: u32, let N: u32> Storage<N> for PublicImmutable<T, Context>\nwhere\n    WithHash<T, M>: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, &mut PublicContext>\nwhere\n    T: Packable<T_PACKED_LEN> + Eq,\n{\n    // docs:start:public_immutable_struct_write\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, WithHash::new(value));\n    }\n    // docs:end:public_immutable_struct_write\n\n    // Note that we don't access the context, but we do call oracles that are only available in public\n    // docs:start:public_immutable_struct_read\n    pub fn read(self) -> T {\n        WithHash::public_storage_read(*self.context, self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, UnconstrainedContext>\nwhere\n    T: Packable<T_PACKED_LEN> + Eq,\n{\n    pub unconstrained fn read(self) -> T {\n        WithHash::unconstrained_public_storage_read(self.context, self.storage_slot)\n    }\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, &mut PrivateContext>\nwhere\n    T: Packable<T_PACKED_LEN> + Eq,\n{\n    pub fn read(self) -> T {\n        WithHash::historical_public_storage_read(\n            self.context.get_block_header(),\n            self.context.this_address(),\n            self.storage_slot,\n        )\n    }\n}\n"
    },
    "169": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr",
      "source": "use crate::context::{PublicContext, UnconstrainedContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicMutable<T, &mut PublicContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicMutable<T, UnconstrainedContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    pub unconstrained fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"
    },
    "17": {
      "path": "std/field/bn254.nr",
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"
    },
    "18": {
      "path": "std/field/mod.nr",
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"
    },
    "183": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/utils/array/append.nr",
      "source": "/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n"
    },
    "185": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/utils/array/mod.nr",
      "source": "pub mod append;\npub mod collapse;\npub mod subarray;\npub mod subbvec;\n\npub use append::append;\npub use collapse::collapse;\npub use subarray::subarray;\npub use subbvec::subbvec;\n\n// This will eventually be replaced by `BoundedVec::for_each`, once that's implemented.\npub unconstrained fn for_each_in_bounded_vec<T, let MaxLen: u32, Env>(\n    vec: BoundedVec<T, MaxLen>,\n    f: fn[Env](T, u32) -> (),\n) {\n    for i in 0..vec.len() {\n        f(vec.get_unchecked(i), i);\n    }\n}\n"
    },
    "186": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr",
      "source": "/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n"
    },
    "187": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr",
      "source": "use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n"
    },
    "189": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr",
      "source": "use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n"
    },
    "190": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr",
      "source": "// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n"
    },
    "192": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/utils/field.nr",
      "source": "use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n"
    },
    "194": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/utils/point.nr",
      "source": "use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n"
    },
    "198": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/utils/with_hash.nr",
      "source": "use crate::{\n    context::{PublicContext, UnconstrainedContext},\n    history::public_storage::PublicStorageHistoricalRead,\n    oracle,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, hash::poseidon2_hash, traits::Packable,\n};\n\n/// A struct that allows for efficient reading of value `T` from public storage in private.\n///\n/// The efficient reads are achieved by verifying large values through a single hash check\n/// and then proving inclusion only of the hash in public storage. This reduces the number\n/// of required tree inclusion proofs from `N` to 1.\n///\n/// # Type Parameters\n/// - `T`: The underlying type being wrapped, must implement `Packable<N>`\n/// - `N`: The number of field elements required to pack values of type `T`\npub struct WithHash<T, let N: u32> {\n    value: T,\n    packed: [Field; N],\n    hash: Field,\n}\n\nimpl<T, let N: u32> WithHash<T, N>\nwhere\n    T: Packable<N> + Eq,\n{\n    pub fn new(value: T) -> Self {\n        let packed = value.pack();\n        Self { value, packed, hash: poseidon2_hash(packed) }\n    }\n\n    pub fn get_value(self) -> T {\n        self.value\n    }\n\n    pub fn get_hash(self) -> Field {\n        self.hash\n    }\n\n    pub fn public_storage_read(context: PublicContext, storage_slot: Field) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub unconstrained fn unconstrained_public_storage_read(\n        context: UnconstrainedContext,\n        storage_slot: Field,\n    ) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub fn historical_public_storage_read(\n        header: BlockHeader,\n        address: AztecAddress,\n        storage_slot: Field,\n    ) -> T {\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for each field in `packed`, but that would require one\n        // full sibling path per storage slot (since due to kernel siloing the storage is not contiguous). Instead, we\n        // get an oracle to provide us the values, and instead we prove inclusion of their hash, which is both a much\n        // smaller proof (a single slot), and also independent of the size of T (except in that we need to pack and hash T).\n        let hint = WithHash::new(\n            // Safety: We verify that a hash of the hint/packed data matches the stored hash.\n            unsafe {\n                oracle::storage::storage_read(address, storage_slot, historical_block_number)\n            },\n        );\n\n        let hash = header.public_storage_historical_read(storage_slot + N as Field, address);\n\n        if hash != 0 {\n            assert_eq(hash, hint.get_hash(), \"Hint values do not match hash\");\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized. Therefore, the hints must then be zero\n            // (i.e. the default value for public storage) as well.\n            assert_eq(\n                hint.get_value(),\n                T::unpack(std::mem::zeroed()),\n                \"Non-zero hint for zero hash\",\n            );\n        };\n\n        hint.get_value()\n    }\n}\n\nimpl<T, let N: u32> Packable<N + 1> for WithHash<T, N>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n        for i in 0..N {\n            result[i] = self.packed[i];\n        }\n        result[N] = self.hash;\n\n        result\n    }\n\n    fn unpack(packed: [Field; N + 1]) -> Self {\n        let mut value_packed: [Field; N] = std::mem::zeroed();\n        for i in 0..N {\n            value_packed[i] = packed[i];\n        }\n        let hash = packed[N];\n\n        Self { value: T::unpack(value_packed), packed: value_packed, hash }\n    }\n}\n\nmod test {\n    use crate::{\n        oracle::random::random,\n        test::{\n            helpers::{cheatcodes, test_environment::TestEnvironment},\n            mocks::mock_struct::MockStruct,\n        },\n        utils::with_hash::WithHash,\n    };\n    use dep::protocol_types::hash::poseidon2_hash;\n    use dep::protocol_types::traits::{Packable, ToField};\n    use dep::std::{mem, test::OracleMock};\n\n    global storage_slot: Field = 47;\n\n    #[test]\n    unconstrained fn create_and_recover() {\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n        let recovered = WithHash::unpack(value_with_hash.pack());\n\n        assert_eq(recovered.value, value);\n        assert_eq(recovered.packed, value.pack());\n        assert_eq(recovered.hash, poseidon2_hash(value.pack()));\n    }\n\n    #[test]\n    unconstrained fn read_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n\n        // We should get zeroed value\n        let expected: MockStruct = mem::zeroed();\n        assert_eq(result, expected);\n    }\n\n    #[test]\n    unconstrained fn read_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n\n        // We write the value with hash to storage\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            storage_slot,\n            value_with_hash.pack(),\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n\n        assert_eq(result, value);\n    }\n\n    #[test(should_fail_with = \"Non-zero hint for zero hash\")]\n    unconstrained fn test_bad_hint_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        env.advance_block_to(6);\n\n        let value_packed = MockStruct { a: 1, b: 1 }.pack();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        // Mock the oracle to return a non-zero hint/packed value\n        let _ = OracleMock::mock(\"storageRead\")\n            .with_params((\n                address.to_field(), storage_slot, block_header.global_variables.block_number as u32,\n                value_packed.len(),\n            ))\n            .returns(value_packed)\n            .times(1);\n\n        // This should revert because the hint value is non-zero and the hash is zero (default value of storage)\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n    }\n\n    #[test(should_fail_with = \"Hint values do not match hash\")]\n    unconstrained fn test_bad_hint_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value_packed = MockStruct { a: 5, b: 3 }.pack();\n\n        // We write the value to storage\n        cheatcodes::direct_storage_write(env.contract_address(), storage_slot, value_packed);\n\n        // Now we write incorrect hash to the hash storage slot\n        let incorrect_hash = random();\n        let hash_storage_slot = storage_slot + (value_packed.len() as Field);\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            hash_storage_slot,\n            [incorrect_hash],\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n    }\n}\n"
    },
    "216": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"
    },
    "24": {
      "path": "std/hash/poseidon2.nr",
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
    },
    "252": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr",
      "source": "use crate::{point::Point, traits::{Deserialize, Empty, Serialize}};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pub pk_m: Point,\n    pub sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [self.pk_m.x, self.pk_m.y, self.pk_m.is_infinite as Field, self.sk_app]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool },\n            sk_app: fields[3],\n        }\n    }\n}\n"
    },
    "259": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr",
      "source": "use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse ec::{pow, sqrt};\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"
    },
    "260": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr",
      "source": "use crate::{\n    constants::ETH_ADDRESS_LENGTH,\n    traits::{Deserialize, Empty, Packable, Serialize, ToField},\n};\n\npub struct EthAddress {\n    inner: Field,\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl Packable<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn pack(self) -> [Field; ETH_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size::<160>();\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"
    },
    "274": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr",
      "source": "use crate::{\n    data::public_data_tree_leaf::PublicDataTreeLeaf,\n    merkle_tree::leaf_preimage::{IndexedTreeLeafPreimage, LeafPreimage},\n    traits::{Empty, Hash},\n};\n\npub struct PublicDataTreeLeafPreimage {\n    pub slot: Field,\n    pub value: Field,\n    pub next_slot: Field,\n    pub next_index: u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Eq for PublicDataTreeLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.slot == other.slot)\n            & (self.value == other.value)\n            & (self.next_slot == other.next_slot)\n            & (self.next_index == other.next_index)\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([\n                self.slot,\n                self.value,\n                (self.next_index as Field),\n                self.next_slot,\n            ])\n        }\n    }\n}\n\nimpl LeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage<PublicDataTreeLeaf> for PublicDataTreeLeafPreimage {\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn points_to_infinity(self) -> bool {\n        (self.next_slot == 0) & (self.next_index == 0)\n    }\n\n    fn update_pointers(self, next_slot: Field, next_index: u32) -> Self {\n        Self { slot: self.slot, value: self.value, next_slot, next_index }\n    }\n\n    fn update_value(self, write: PublicDataTreeLeaf) -> Self {\n        Self {\n            slot: self.slot,\n            value: write.value,\n            next_slot: self.next_slot,\n            next_index: self.next_index,\n        }\n    }\n\n    fn build_insertion_leaf(write: PublicDataTreeLeaf, low_leaf: Self) -> Self {\n        Self {\n            slot: write.slot,\n            value: write.value,\n            next_slot: low_leaf.next_slot,\n            next_index: low_leaf.next_index,\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"
    },
    "276": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr",
      "source": "/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"
    },
    "277": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
      "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"
    },
    "287": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr",
      "source": "use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N],\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"
    },
    "291": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr",
      "source": "use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `omit`: A list of field names (as `Quoted`) to be excluded from the serialized output.\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, &[], false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, &[], false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], &[], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, &[], false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with Omitted Field and packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// Serializing while omitting `value2`:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, MyStruct, &[quote { self.value2 }], true)\n/// // Returns:\n/// // ([`value_packed[0]`], [`let value_packed = self.value.pack()`])\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    omit: [Quoted],\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // Proceed if none of the omit rules omits this name\n    if !omit.any(|to_omit| to_omit == name) {\n        // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n        let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n        let packable_constraint =\n            quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n        if (should_pack & typ.implements(packable_constraint)) {\n            // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n            // method, add the resulting field array to `aux_vars` and each field to `fields`.\n            let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n            // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n            let name_at_one_token = collapse_to_one_token(name);\n            let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n            // We add the individual fields to the fields array\n            let pack_method = get_trait_impl_method(\n                typ,\n                quote { crate::traits::Packable<$packed_len> },\n                quote { pack },\n            );\n            let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n            for i in 0..packed_len {\n                fields = fields.push_back(quote { $packed_struct_name[$i] });\n            }\n\n            // We add the new auxiliary variable to the aux_vars array\n            aux_vars = aux_vars.push_back(packed_struct);\n        } else if typ.is_field() {\n            // For field we just add the value to fields\n            fields = fields.push_back(name);\n        } else if typ.as_integer().is_some() | typ.is_bool() {\n            // For integer and bool we just cast to Field and add the value to fields\n            fields = fields.push_back(quote { $name as Field });\n        } else if typ.as_data_type().is_some() {\n            // For struct we pref\n            let nested_struct = typ.as_data_type().unwrap();\n            let params = nested_struct.0.fields(nested_struct.1);\n            let struct_flattened = params.map(|(param_name, param_type): (Quoted, Type)| {\n                let maybe_prefixed_name = if name == quote {} {\n                    // Triggered when the param name is of a value available in the current scope (e.g. a function\n                    // argument) --> then we don't prefix the name with anything.\n                    param_name\n                } else {\n                    // Triggered when we want to prefix the param name with the `name` from function input. This\n                    // can typically be `self` when implementing a method on a struct.\n                    quote { $name.$param_name }\n                };\n                generate_serialize_to_fields(\n                    quote {$maybe_prefixed_name},\n                    param_type,\n                    omit,\n                    should_pack,\n                )\n            });\n            let struct_flattened_fields = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n            );\n            let struct_flattened_aux_vars = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n            );\n            fields = fields.append(struct_flattened_fields);\n            aux_vars = aux_vars.append(struct_flattened_aux_vars);\n        } else if typ.as_array().is_some() {\n            // For array we recursively call `generate_serialize_to_fields(...)` for each element\n            let (element_type, array_len) = typ.as_array().unwrap();\n            let array_len = array_len.as_constant().unwrap();\n            for i in 0..array_len {\n                let (element_fields, element_aux_vars) = generate_serialize_to_fields(\n                    quote { $name[$i] },\n                    element_type,\n                    omit,\n                    should_pack,\n                );\n                fields = fields.append(element_fields);\n                aux_vars = aux_vars.append(element_aux_vars);\n            }\n        } else if typ.as_str().is_some() {\n            // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n            // then we add each byte to fields as a Field\n            let length_type = typ.as_str().unwrap();\n            let str_len = length_type.as_constant().unwrap();\n            let as_member = name.as_expr().unwrap().as_member_access();\n            let var_name = if as_member.is_some() {\n                as_member.unwrap().1\n            } else {\n                name\n            };\n            let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n            let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n            for i in 0..str_len {\n                fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n            }\n            aux_vars = aux_vars.push_back(as_bytes);\n        } else {\n            panic(\n                f\"Unsupported type for serialization of argument {name} and type {typ}\",\n            )\n        }\n    }\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub(crate) comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    quote {\n        impl Serialize<$serialized_len> for $typ {\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) =\n        generate_serialize_to_fields(quote { self }, typ, &[], packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n"
    },
    "293": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr",
      "source": "pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n"
    },
    "294": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr",
      "source": "use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n"
    },
    "3": {
      "path": "std/array/mod.nr",
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n"
    },
    "303": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr",
      "source": "use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize, ToField},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"
    },
    "314": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr",
      "source": "use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"
    },
    "328": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr",
      "source": "use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n}\n\nimpl<T> Empty for Option<T> {\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n"
    },
    "332": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr",
      "source": "use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"
    },
    "333": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"
    },
    "349": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr",
      "source": "pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n"
    },
    "350": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr",
      "source": "pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"
    },
    "352": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
      "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
    },
    "364": {
      "path": "/Users/eidoo/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr",
      "source": "use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n"
    },
    "393": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/uint-note/src/uint_note.nr",
      "source": "use dep::aztec::{\n    context::{PrivateContext, PublicContext},\n    encrypted_logs::log_assembly_strategies::default_aes128,\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::custom_note,\n    note::note_interface::{NoteHash, NoteType},\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress,\n        constants::{GENERATOR_INDEX__NOTE_HASH, GENERATOR_INDEX__NOTE_NULLIFIER},\n        hash::poseidon2_hash_with_separator,\n        traits::{Deserialize, Hash, Packable, Serialize, ToField},\n        utils::arrays::array_concat,\n    },\n};\n\n// UintNote supports partial notes, i.e. the ability to create an incomplete note in private, hiding certain values (the\n// owner, storage slot and randomness), and then completing the note in public with the ones missing (the amount).\n// Partial notes are being actively developed and are not currently fully supported via macros, and so we rely on the\n// #[custom_note] macro to implement it manually, resulting in some boilerplate. This is expected to be unnecessary once\n// macro support is expanded.\n\n/// A private note representing a numeric value associated to an account (e.g. a token balance).\n#[custom_note]\n#[derive(Eq, Serialize)]\npub struct UintNote {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintPartialNotePrivateContent, and\n    //   b) have the public field at the end\n    // Correct ordering is checked by the tests in this module.\n\n    /// The owner of the note, i.e. the account whose nullifier secret key is required to compute the nullifier.\n    owner: AztecAddress,\n    /// Random value, protects against note hash preimage attacks.\n    randomness: Field,\n    /// The number stored in the note.\n    value: u128,\n}\n\nimpl NoteHash for UintNote {\n    fn compute_note_hash(self, storage_slot: Field) -> Field {\n        // Partial notes can be implemented by having the note hash be either the result of multiscalar multiplication\n        // (MSM), or two rounds of poseidon. MSM results in more constraints and is only required when multiple variants\n        // of partial notes are supported. Because UintNote has just one variant (where the value is public), we use\n        // poseidon instead.\n\n        // We must compute the same note hash as would be produced by a partial note created and completed with the same\n        // values, so that notes all behave the same way regardless of how they were created. To achieve this, we\n        // perform both steps of the partial note computation.\n\n        // First we create the partial note from a commitment to the private content (including storage slot).\n        let private_content =\n            UintPartialNotePrivateContent { owner: self.owner, randomness: self.randomness };\n        let partial_note = PartialUintNote {\n            commitment: private_content.compute_partial_commitment(storage_slot),\n        };\n\n        // Then compute the completion note hash. In a real partial note this step would be performed in public.\n        partial_note.compute_complete_note_hash(self.value)\n    }\n\n    // The nullifiers are nothing special - this is just the canonical implementation that would be injected by the\n    // #[note] macro.\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n\n    unconstrained fn compute_nullifier_unconstrained(self, note_hash_for_nullify: Field) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl UintNote {\n    pub fn new(value: u128, owner: AztecAddress) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { value, owner, randomness }\n    }\n\n    pub fn get_value(self) -> u128 {\n        self.value\n    }\n\n    /// Creates a partial note that will hide the owner and storage slot but not the value, since the note will be later\n    /// completed in public. This is a powerful technique for scenarios in which the value cannot be known in private\n    /// (e.g. because it depends on some public state, such as a DEX).\n    ///\n    /// The returned `PartialUintNote` value must be sent to public execution via a secure channel, since it is not\n    /// possible to verify the integrity of its contents due to it hiding information. The recommended ways to do this\n    /// are to retrieve it from public storage, or to receive it in an internal public function call.\n    ///\n    /// Each partial note should only be used once, since otherwise multiple notes would be linked together and known to\n    /// belong to the same owner.\n    ///\n    /// As part of the partial note creation process, a log will be sent to `recipient` from `sender` so that they can\n    /// discover the note. `recipient` will typically be the same as `owner`.\n    pub fn partial(\n        owner: AztecAddress,\n        storage_slot: Field,\n        context: &mut PrivateContext,\n        recipient: AztecAddress,\n        sender: AztecAddress,\n    ) -> PartialUintNote {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n\n        // We create a commitment to the private data, which we then use to construct the log we send to the recipient.\n        let commitment = UintPartialNotePrivateContent { owner, randomness }\n            .compute_partial_commitment(storage_slot);\n\n        // Our partial note log encoding scheme includes a field with the tag of the public completion log, and we use\n        // the commitment as the tag. This is good for multiple reasons:\n        //  - the commitment is uniquely tied to this partial note\n        //  - the commitment is already public information, so we're not revealing anything else\n        //  - we don't need to create any additional information, private or public, for the tag\n        //  - other contracts cannot impersonate us and emit logs with the same tag due to public log siloing\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n\n        // TODO: we're abusing the note encoding scheme by computing the log for a fake note type with such a note type\n        // id that the recipient will realize that these are the private fields of a partial note. Ideally we'd not rely\n        // on this crude mechanism and we'd instead compute it as a proper event log. However, given the current state\n        // of the log library it's far easier to do it this way.\n        let encrypted_log = default_aes128::note::compute_log(\n            *context,\n            private_log_content,\n            storage_slot,\n            recipient,\n            sender,\n        );\n        context.emit_private_log(encrypted_log);\n\n        PartialUintNote { commitment }\n    }\n}\n\n/// The private content of a partial UintNote, i.e. the fields that will remain private. All other note fields will be\n/// made public.\n#[derive(Packable)]\nstruct UintPartialNotePrivateContent {\n    // The ordering of these fields is important given that it must match that of UintNote.\n    // Correct ordering is checked by the tests in this module.\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl UintPartialNotePrivateContent {\n    fn compute_partial_commitment(self, storage_slot: Field) -> Field {\n        // Here we commit to all private values, including the storage slot.\n        poseidon2_hash_with_separator(\n            array_concat(self.pack(), [storage_slot]),\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\n#[derive(Packable)]\nstruct PrivateUintPartialNotePrivateLogContent {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintNote, and\n    //   b) have the public log tag at the beginning\n    // Correct ordering is checked by the tests in this module.\n    public_log_tag: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl NoteType for PrivateUintPartialNotePrivateLogContent {\n    fn get_id() -> Field {\n        // We abuse the fact that note type ids are 7 bits long to use the 8th bit indicate the log corresponds to a\n        // partial note. Ideally we'd use proper events with selectors, but those are not handled well at the moment.\n        UintNote::get_id() + 128\n    }\n}\n\n/// A partial instance of a UintNote. This value represents a private commitment to the owner, randomness and storage\n/// slot, but the value field has not yet been set. A partial note can be completed in public with the `complete`\n/// function (revealing the value to the public), resulting in a UintNote that can be used like any other one (except\n/// of course that its value is known).\n#[derive(Packable, Serialize, Deserialize)]\npub struct PartialUintNote {\n    commitment: Field,\n}\n\nimpl PartialUintNote {\n    pub fn commitment(self) -> Field {\n        self.commitment\n    }\n}\n\nimpl PartialUintNote {\n    /// Completes the partial note, creating a new note that can be used like any other UintNote.\n    pub fn complete(self, value: u128, context: &mut PublicContext) {\n        // We need to do two things:\n        //  - emit a public log containing the public fields (the value). The contract will later find it by searching\n        //  for the expected tag (which is simply the partial note commitment).\n        //  - insert the completion note hash (i.e. the hash of the note) into the note hash tree. This is typically\n        //  only done in private to hide the preimage of the hash that is inserted, but completed partial notes are\n        //  inserted in public as the public values are provided and the note hash computed.\n        context.emit_public_log(self.compute_note_completion_log(value));\n        context.push_note_hash(self.compute_complete_note_hash(value));\n    }\n\n    fn compute_note_completion_log(self, value: u128) -> [Field; 2] {\n        // The first field of this log must be the tag that the recipient of the partial note private field logs\n        // expects, which is equal to the partial note commitment.\n        [self.commitment, value.to_field()]\n    }\n\n    fn compute_complete_note_hash(self, value: u128) -> Field {\n        // Here we finalize the note hash by including the (public) value into the partial note commitment. Note that we\n        // use the same generator index as we used for the first round of poseidon - this is not an issue.\n        poseidon2_hash_with_separator(\n            [self.commitment, value.to_field()],\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\nmod test {\n    use super::{\n        PartialUintNote, PrivateUintPartialNotePrivateLogContent, UintNote,\n        UintPartialNotePrivateContent,\n    };\n    use dep::aztec::{\n        note::note_interface::NoteHash,\n        protocol_types::{\n            address::AztecAddress,\n            traits::{FromField, Packable},\n            utils::arrays::array_concat,\n        },\n        utils::array::subarray,\n    };\n\n    global value: u128 = 17;\n    global randomness: Field = 42;\n    global owner: AztecAddress = AztecAddress::from_field(50);\n    global storage_slot: Field = 13;\n\n    #[test]\n    fn note_hash_matches_completed_partial_note_hash() {\n        // Tests that a UintNote has the same note hash as a PartialUintNote created and then completed with the same\n        // private values. This requires for the same hash function to be used in both flows, with the fields in the\n        // same order.\n\n        let note = UintNote { value, randomness, owner };\n        let note_hash = note.compute_note_hash(storage_slot);\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n\n        let partial_note = PartialUintNote {\n            commitment: partial_note_private_content.compute_partial_commitment(storage_slot),\n        };\n        let completed_partial_note_hash = partial_note.compute_complete_note_hash(value);\n\n        assert_eq(note_hash, completed_partial_note_hash);\n    }\n\n    #[test]\n    fn unpack_from_partial_note_encoding() {\n        // Tests that the packed representation of a regular UintNote can be reconstructed given the partial note\n        // private fields log and the public completion log, ensuring the recipient will be able to compute the\n        // completed note as if it were a regular UintNote.\n\n        let note = UintNote { value, randomness, owner };\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n        let commitment = partial_note_private_content.compute_partial_commitment(storage_slot);\n\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n        let partial_note = PartialUintNote { commitment };\n\n        // The first field of the partial note private content is the public completion log tag, so it should match the\n        // first field of the public log.\n        assert_eq(\n            private_log_content.pack()[0],\n            partial_note.compute_note_completion_log(value)[0],\n        );\n\n        // Then we extract all fields except the first of both logs (i.e. the public log tag), and combine them to\n        // produce the note's packed representation. This requires that the members of the intermediate structs are in\n        // the same order as in UintNote.\n        let private_log_without_public_tag: [_; 2] = subarray(private_log_content.pack(), 1);\n        let public_log_without_tag: [_; 1] =\n            subarray(partial_note.compute_note_completion_log(value), 1);\n\n        assert_eq(\n            array_concat(private_log_without_public_tag, public_log_without_tag),\n            note.pack(),\n        );\n    }\n}\n"
    },
    "46": {
      "path": "std/option.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"
    },
    "47": {
      "path": "std/panic.nr",
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
    },
    "5": {
      "path": "std/cmp.nr",
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n"
    },
    "50": {
      "path": "std/slice.nr",
      "source": "use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n"
    },
    "55": {
      "path": "/Users/eidoo/Desktop/work/substancelabs/aztec-evm-bridge/aztec/aztec_gateway_7683/src/main.nr",
      "source": "mod config;\nmod types;\nmod utils;\n\nuse dep::aztec::macros::aztec;\n\n#[aztec]\npub contract AztecGateway7683 {\n    // context.chain_id() returns 1, which corresponds to the mainnet, making it unsuitable for our use case.\n    // Instead, we designate 999999 as the destination domain.\n    global LOCAL_DESTINATION_DOMAIN: u32 = 999999;\n\n    global UNKNOWN: u32 = 0;\n    global OPENED: u32 = 1;\n    global FILLED: u32 = 2;\n    global INITIATED_PRIVATELY: u32 = 3;\n\n    global SETTLE_ORDER_TYPE: [u8; 32] = [\n        100, 26, 150, 232, 234, 193, 205, 65, 73, 216, 31, 243, 122, 123, 194, 24, 136, 159, 246,\n        156, 124, 228, 38, 13, 122, 9, 202, 154, 234, 92, 186, 189,\n    ]; // sha256(\"SETTLE_ORDER_TYPE\")\n\n    use crate::{\n        config::Config,\n        types::{\n            helpers::InternalRCOParams,\n            onchain_cross_chain_order::OnchainCrossChainOrder,\n            order_data::{ORDER_DATA_LENGTH, ORDER_DATA_TYPE, OrderData},\n            resolved_cross_chain_order::{\n                FILL_INSTRUCTIONS_MAX_INSTRUCTIONS, FillInstruction, MAX_SPENT_MAX_OUTPUTS,\n                MIN_RECEIVED_MAX_OUTPUTS, Output, ResolvedCrossChainOrder,\n            },\n        },\n        utils::{u8_32_to_aztec_address, u8_32_to_u128},\n    };\n    use dep::aztec::{\n        event::event_interface::EventInterface,\n        macros::{\n            events::event,\n            functions::{initializer, internal, private, public, view},\n            storage::storage,\n        },\n        prelude::{AztecAddress, EthAddress, Map, PublicImmutable, PublicMutable},\n        protocol_types::{hash::sha256_to_field, traits::Serialize},\n        unencrypted_logs::unencrypted_event_emission::encode_event,\n    };\n    use token::Token;\n\n    #[derive(Serialize)]\n    #[event]\n    struct Filled {\n        order_id: [u8; 32],\n        origin_data: [u8; ORDER_DATA_LENGTH],\n        filler_data: [u8; 32],\n    }\n\n    #[storage]\n    struct Storage<Context> {\n        config: PublicImmutable<Config, Context>,\n        claimable_orders: Map<Field, PublicMutable<Field, Context>, Context>,\n        open_orders: Map<Field, PublicMutable<[u8; 32], Context>, Context>, // order_data + order_type\n        order_status: Map<Field, PublicMutable<u32, Context>, Context>,\n        used_nonces: Map<AztecAddress, Map<Field, PublicMutable<bool, Context>, Context>, Context>,\n    }\n\n    #[public]\n    #[initializer]\n    fn constructor(portal: EthAddress) {\n        storage.config.initialize(Config { portal });\n    }\n\n    #[public]\n    fn open(order: OnchainCrossChainOrder) {\n        assert(order.order_data_type == ORDER_DATA_TYPE, \"Invalid order data type\");\n\n        let data = _resolve(order, context.msg_sender(), context.timestamp());\n        let order_data = data.order_data;\n        let resolved_order = data.resolved_cross_chain_order;\n        let order_id = data.order_id;\n        let nonce = Field::from_be_bytes(order_data.sender_nonce);\n\n        assert(order_data.origin_domain == LOCAL_DESTINATION_DOMAIN, \"Invalid order origin domain\");\n        assert(!storage.used_nonces.at(context.msg_sender()).at(nonce).read(), \"Invalid nonce\");\n\n        // We cannot store the entire order_data + ORDER_DATA_TYPE as it raises the following error:\n        // Reached the limit (63) on number of 'public data (contract storage) write' per tx 'storage_write_opcode(storage_slot, value).\n        // For this reason we store a commitment of it.\n        storage.open_orders.at(order_id).write(_get_open_order_commitment(order.order_data));\n        storage.order_status.at(order_id).write(OPENED);\n        storage.used_nonces.at(context.msg_sender()).at(nonce).write(true);\n\n        for i in 0..resolved_order.min_received.len() {\n            let min_received = resolved_order.min_received[i];\n\n            Token::at(u8_32_to_aztec_address(min_received.token))\n                .transfer_in_public(\n                    context.msg_sender(),\n                    context.this_address(),\n                    u8_32_to_u128(min_received.amount),\n                    0,\n                )\n                .call(&mut context);\n        }\n\n        // TODO emit event Open(order_id, resolved_order);\n    }\n\n    #[private]\n    fn open_private(order: OnchainCrossChainOrder) {\n        assert(order.order_data_type == ORDER_DATA_TYPE, \"Invalid order data type\");\n\n        // NOTE: Force the sender to be zero in order to avoid creating a connection between the sender and the recipient.\n        let data = _resolve(order, AztecAddress::zero(), 0 as u64);\n        let order_data = data.order_data;\n        let resolved_order = data.resolved_cross_chain_order;\n        let order_id = data.order_id;\n        let nonce = Field::from_be_bytes(order_data.sender_nonce);\n\n        assert(order_data.origin_domain == LOCAL_DESTINATION_DOMAIN, \"Invalid order origin domain\");\n        AztecGateway7683::at(context.this_address())\n            ._assert_nonce_and_set_order_details(order_id, order.order_data, nonce)\n            .enqueue(&mut context);\n\n        for i in 0..resolved_order.min_received.len() {\n            let min_received = resolved_order.min_received[i];\n\n            Token::at(u8_32_to_aztec_address(min_received.token))\n                .transfer_in_private(\n                    context.msg_sender(),\n                    context.this_address(),\n                    u8_32_to_u128(min_received.amount),\n                    0,\n                )\n                .call(&mut context);\n        }\n\n        // TODO emit event Open(order_id, resolved_order);\n    }\n\n    #[internal]\n    #[public]\n    fn _assert_nonce_and_set_order_details(\n        order_id: Field,\n        order_data: [u8; ORDER_DATA_LENGTH],\n        nonce: Field,\n    ) {\n        assert(!storage.used_nonces.at(context.msg_sender()).at(nonce).read(), \"Invalid nonce\");\n        // We cannot store the entire order_data + ORDER_DATA_TYPE as it raises the following error:\n        // Reached the limit (63) on number of 'public data (contract storage) write' per tx 'storage_write_opcode(storage_slot, value).\n        // For this reason we store a commitment of it.\n        storage.open_orders.at(order_id).write(_get_open_order_commitment(order_data));\n        storage.order_status.at(order_id).write(OPENED);\n        storage.used_nonces.at(context.msg_sender()).at(nonce).write(true);\n    }\n\n    #[private]\n    fn claim_private(\n        secret: [u8; 32],\n        order_id_bytes: [u8; 32],\n        origin_data_bytes: [u8; ORDER_DATA_LENGTH],\n        filler_data_bytes: [u8; 32],\n    ) {\n        let order_id = Field::from_be_bytes(order_id_bytes);\n\n        AztecGateway7683::at(context.this_address())\n            ._check_order_status(order_id, INITIATED_PRIVATELY)\n            .enqueue(&mut context);\n\n        // verify that a commitment exists for the given order.\n        AztecGateway7683::at(context.this_address())\n            ._check_order_commitment(order_id, origin_data_bytes, filler_data_bytes)\n            .enqueue(&mut context);\n\n        let order_data = OrderData::decode(origin_data_bytes);\n        // if a commitment exists, the order is valid, allowing us to compare the recipient with hash(secret).\n        assert(sha256::digest(secret) == order_data.recipient, \"Invalid secret\");\n\n        Token::at(u8_32_to_aztec_address(order_data.output_token))\n            .transfer_to_private(context.msg_sender(), u8_32_to_u128(order_data.amount_out))\n            .call(&mut context);\n\n        AztecGateway7683::at(context.this_address())._update_order_status(order_id, FILLED).enqueue(\n            &mut context,\n        );\n\n        // TODO: store filled order\n        // TODO: emit event\n\n        AztecGateway7683::at(context.this_address())\n            ._trigger_settlement(\n                order_id_bytes,\n                filler_data_bytes, // at the moment filler data contains the ethereum address where the filler wants to receive the funds during the settlement\n            )\n            .enqueue(&mut context);\n    }\n\n    #[public]\n    fn fill(\n        order_id_bytes: [u8; 32],\n        origin_data_bytes: [u8; ORDER_DATA_LENGTH],\n        filler_data_bytes: [u8; 32],\n    ) {\n        let order_id = Field::from_be_bytes(order_id_bytes);\n        AztecGateway7683::at(context.this_address())._check_order_status(order_id, UNKNOWN).call(\n            &mut context,\n        );\n\n        let order_data = OrderData::decode(origin_data_bytes);\n        assert(order_id_bytes == sha256::digest(origin_data_bytes), \"Invalid order id\");\n        assert(context.timestamp() as u32 <= order_data.fill_deadline, \"Order fill expired\");\n        assert(\n            order_data.destination_domain == LOCAL_DESTINATION_DOMAIN,\n            \"Invalid order destination domain\",\n        );\n\n        Token::at(u8_32_to_aztec_address(order_data.output_token))\n            .transfer_in_public(\n                context.msg_sender(),\n                u8_32_to_aztec_address(order_data.recipient),\n                u8_32_to_u128(order_data.amount_out),\n                Field::from_be_bytes(order_data.sender_nonce),\n            )\n            .call(&mut context);\n\n        storage.order_status.at(order_id).write(FILLED);\n        // TODO: store filled order\n\n        AztecGateway7683::at(context.this_address())\n            ._trigger_settlement(\n                order_id_bytes,\n                filler_data_bytes, // at the moment filler data contains the ethereum address where the filler wants to receive the funds during the settlement\n            )\n            .call(&mut context);\n\n        // TODO: \"Emitted public log is too large, max: 13, passed: 333\"\n        // Filled { order_id: order_id_bytes, origin_data: origin_data_bytes, filler_data: filler_data_bytes }.emit(encode_event(&mut context));\n    }\n\n    #[public]\n    fn fill_private(\n        order_id_bytes: [u8; 32],\n        origin_data_bytes: [u8; ORDER_DATA_LENGTH],\n        filler_data_bytes: [u8; 32],\n    ) {\n        let order_id = Field::from_be_bytes(order_id_bytes);\n        AztecGateway7683::at(context.this_address())._check_order_status(order_id, UNKNOWN).call(\n            &mut context,\n        );\n\n        let order_data = OrderData::decode(origin_data_bytes);\n        assert(order_id_bytes == sha256::digest(origin_data_bytes), \"Invalid order id\");\n        assert(context.timestamp() as u32 <= order_data.fill_deadline, \"Order fill expired\");\n        assert(order_data.destination_domain == LOCAL_DESTINATION_DOMAIN, \"Invalid order domain\");\n\n        Token::at(u8_32_to_aztec_address(order_data.output_token))\n            .transfer_in_public(\n                context.msg_sender(),\n                context.this_address(),\n                u8_32_to_u128(order_data.amount_out),\n                0,\n            )\n            .call(&mut context);\n\n        storage.claimable_orders.at(order_id).write(sha256_to_field(_get_order_pre_image(\n            origin_data_bytes,\n            filler_data_bytes,\n        )));\n        storage.order_status.at(order_id).write(INITIATED_PRIVATELY);\n    }\n\n    #[private]\n    #[view]\n    fn get_config() -> Config {\n        storage.config.read()\n    }\n\n    #[public]\n    #[view]\n    fn get_config_public() -> Config {\n        storage.config.read()\n    }\n\n    #[contract_library_method]\n    fn _get_open_order_commitment(order_data: [u8; ORDER_DATA_LENGTH]) -> [u8; 32] {\n        let mut data: [u8; ORDER_DATA_LENGTH + 32] = [0; ORDER_DATA_LENGTH + 32];\n        for i in 0..32 {\n            data[i] = ORDER_DATA_TYPE[i];\n        }\n        for i in 0..ORDER_DATA_LENGTH {\n            data[i + 32] = order_data[i];\n        }\n        sha256::digest(data)\n    }\n\n    #[public]\n    #[internal]\n    fn _check_order_status(order_id: Field, status: u32) {\n        assert(storage.order_status.at(order_id).read() == status, \"Invalid order status\");\n    }\n\n    #[public]\n    #[internal]\n    fn _update_order_status(order_id: Field, status: u32) {\n        storage.order_status.at(order_id).write(status);\n    }\n\n    #[public]\n    #[internal]\n    fn _check_order_commitment(\n        order_id: Field,\n        origin_data_bytes: [u8; ORDER_DATA_LENGTH],\n        filler_data_bytes: [u8; 32],\n    ) {\n        let order_commitment = storage.claimable_orders.at(order_id).read();\n        assert(\n            order_commitment\n                == sha256_to_field(_get_order_pre_image(origin_data_bytes, filler_data_bytes)),\n            \"Invalid order\",\n        );\n    }\n\n    #[public]\n    #[internal]\n    fn _trigger_settlement(order_id_bytes: [u8; 32], filler_data: [u8; 32]) {\n        let mut settlement_message_bytes: [u8; 96] = [0; 96];\n\n        for i in 0..32 {\n            settlement_message_bytes[i] = SETTLE_ORDER_TYPE[i]; // order_type\n            settlement_message_bytes[i + 32] = order_id_bytes[i]; // order_id_bytes\n            settlement_message_bytes[i + 54] = filler_data[i]; // recipient\n        }\n\n        let config = storage.config.read();\n        context.message_portal(config.portal, sha256_to_field(settlement_message_bytes));\n    }\n\n    #[contract_library_method]\n    fn _resolve(\n        order: OnchainCrossChainOrder,\n        sender: AztecAddress,\n        timestamp: u64,\n    ) -> InternalRCOParams {\n        let mut order_data = OrderData::decode(order.order_data);\n\n        assert(order_data.fill_deadline == order.fill_deadline, \"Invalid fill deadline\");\n        assert(u8_32_to_aztec_address(order_data.sender) == sender, \"Invalid order sender\");\n\n        let order_id_bytes = sha256::digest(order.order_data);\n        let order_id = Field::from_be_bytes(order_id_bytes);\n\n        let min_received_output = Output {\n            token: order_data.input_token,\n            recipient: [0; 32],\n            amount: order_data.amount_in,\n            chain_id: order_data.origin_domain,\n        };\n        let min_received: [Output; MIN_RECEIVED_MAX_OUTPUTS] =\n            [min_received_output; MIN_RECEIVED_MAX_OUTPUTS];\n\n        let max_spent_output = Output {\n            token: order_data.output_token,\n            recipient: order_data.recipient,\n            amount: order_data.amount_out,\n            chain_id: order_data.destination_domain,\n        };\n        let max_spent: [Output; MAX_SPENT_MAX_OUTPUTS] = [max_spent_output; MAX_SPENT_MAX_OUTPUTS];\n\n        let fill_instruction = FillInstruction {\n            destination_chain_id: order_data.destination_domain,\n            destination_settler: order_data.destination_settler,\n            origin_data: order.order_data,\n        };\n        let fill_instructions: [FillInstruction; FILL_INSTRUCTIONS_MAX_INSTRUCTIONS] =\n            [fill_instruction; FILL_INSTRUCTIONS_MAX_INSTRUCTIONS];\n\n        let resolved_order = ResolvedCrossChainOrder {\n            user: sender,\n            origin_chain_id: LOCAL_DESTINATION_DOMAIN,\n            open_dealine: timestamp as u32,\n            fill_deadline: order.fill_deadline,\n            order_id: order_id_bytes,\n            min_received,\n            max_spent,\n            fill_instructions,\n        };\n\n        InternalRCOParams { order_id, resolved_cross_chain_order: resolved_order, order_data }\n    }\n\n    #[contract_library_method]\n    fn _get_order_pre_image(\n        origin_data_bytes: [u8; ORDER_DATA_LENGTH],\n        filler_data_bytes: [u8; 32],\n    ) -> [u8; ORDER_DATA_LENGTH + 32] {\n        let mut pre_image: [u8; ORDER_DATA_LENGTH + 32] = [0; ORDER_DATA_LENGTH + 32];\n        for i in 0..ORDER_DATA_LENGTH {\n            pre_image[i] = origin_data_bytes[i];\n        }\n        for i in 0..32 {\n            pre_image[i + ORDER_DATA_LENGTH] = filler_data_bytes[i];\n        }\n        pre_image\n    }\n}\n"
    },
    "58": {
      "path": "/Users/eidoo/Desktop/work/substancelabs/aztec-evm-bridge/aztec/aztec_gateway_7683/src/types/order_data.nr",
      "source": "use crate::utils::u8_4_to_u32;\nuse dep::aztec::protocol_types::traits::{Deserialize, Serialize};\n\npub global ORDER_DATA_LENGTH: u32 = 268;\npub global ORDER_DATA_TYPE: [u8; 32] = [\n    173, 204, 173, 178, 32, 162, 60, 236, 175, 247, 61, 145, 92, 30, 0, 53, 229, 56, 188, 175, 1,\n    140, 3, 218, 24, 138, 249, 243, 35, 40, 184, 19,\n];\n\n#[derive(Deserialize, Eq, Serialize)]\npub struct OrderData {\n    pub sender: [u8; 32],\n    pub recipient: [u8; 32],\n    pub input_token: [u8; 32],\n    pub output_token: [u8; 32],\n    pub amount_in: [u8; 32],\n    pub amount_out: [u8; 32],\n    pub sender_nonce: [u8; 32],\n    pub origin_domain: u32,\n    pub destination_domain: u32,\n    pub destination_settler: [u8; 32],\n    pub fill_deadline: u32,\n}\n\nimpl OrderData {\n    pub fn decode(bytes: [u8; ORDER_DATA_LENGTH]) -> OrderData {\n        let sender = u8_order_data_length_to_u8_32(bytes, 0);\n        let recipient = u8_order_data_length_to_u8_32(bytes, 32);\n        let input_token = u8_order_data_length_to_u8_32(bytes, 64);\n        let output_token = u8_order_data_length_to_u8_32(bytes, 96);\n        let amount_in = u8_order_data_length_to_u8_32(bytes, 128);\n        let amount_out = u8_order_data_length_to_u8_32(bytes, 160);\n        let sender_nonce = u8_order_data_length_to_u8_32(bytes, 192);\n        let origin_domain = u8_4_to_u32(u8_order_data_length_to_u8_4(bytes, 224));\n        let destination_domain = u8_4_to_u32(u8_order_data_length_to_u8_4(bytes, 228));\n        let destination_settler = u8_order_data_length_to_u8_32(bytes, 232);\n        let fill_deadline = u8_4_to_u32(u8_order_data_length_to_u8_4(bytes, 264));\n\n        OrderData {\n            sender,\n            recipient,\n            input_token,\n            output_token,\n            amount_in,\n            amount_out,\n            sender_nonce,\n            origin_domain,\n            destination_domain,\n            destination_settler,\n            fill_deadline,\n        }\n    }\n}\n\nfn u8_order_data_length_to_u8_32(bytes: [u8; ORDER_DATA_LENGTH], start: u32) -> [u8; 32] {\n    let mut result = [0; 32];\n    for i in 0..32 {\n        result[i] = bytes[start + i];\n    }\n    result\n}\n\nfn u8_order_data_length_to_u8_4(bytes: [u8; ORDER_DATA_LENGTH], start: u32) -> [u8; 4] {\n    let mut result = [0; 4];\n    for i in 0..4 {\n        result[i] = bytes[start + i];\n    }\n    result\n}\n"
    },
    "6": {
      "path": "std/collections/bounded_vec.nr",
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n"
    },
    "61": {
      "path": "/Users/eidoo/Desktop/work/substancelabs/aztec-evm-bridge/aztec/aztec_gateway_7683/src/utils.nr",
      "source": "use dep::aztec::{prelude::AztecAddress, protocol_types::traits::FromField};\n\npub(crate) fn u8_32_to_u128(input: [u8; 32]) -> u128 {\n    let mut result = 0;\n    for i in 0..16 {\n        result = result + (input[31 - i] as u128) * (1 << (i * 8));\n    }\n    result\n}\n\npub(crate) fn u8_4_to_u32(bytes: [u8; 4]) -> u32 {\n    let field = Field::from_be_bytes(bytes);\n    field.assert_max_bit_size::<32>();\n    field as u32\n}\n\npub(crate) fn u8_32_to_aztec_address(bytes: [u8; 32]) -> AztecAddress {\n    AztecAddress::from_field(Field::from_be_bytes(bytes))\n}\n"
    },
    "62": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/capsules/mod.nr",
      "source": "use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T, let N: u32> CapsuleArray<T>\nwhere\n    T: Serialize<N> + Deserialize<N>,\n{\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push(self, value: T) {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get(self, index: u32) -> T {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().unkonstrained().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n}\n"
    },
    "63": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, traits::Deserialize,\n};\n\nuse crate::context::{gas::GasOpts, private_context::PrivateContext, public_context::PublicContext};\n\nuse crate::hash::hash_args;\nuse crate::oracle::execution_cache;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\n// PrivateCallInterface\n\npub struct PrivateCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let returns: T = returns_hash.get_preimage();\n        returns\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateVoidCallInterface\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static }\n    }\n\n    pub fn call(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticCallInterface\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticVoidCallInterface\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static: true }\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicCallInterface\n\npub struct PublicCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            gas_opts: GasOpts::default(),\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicVoidCallInterface\n\npub struct PublicVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n\n    pub fn set_as_teardown(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.set_public_teardown_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            false,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticCallInterface\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticVoidCallInterface\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n"
    },
    "70": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
      "source": "use dep::protocol_types::debug_log::debug_log_format;\n\nuse crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n            set_public_teardown_function_call_internal,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS, PUBLIC_DISPATCH_SELECTOR,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, FromField, Hash, ToField},\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n\n        // WARNING(https://github.com/AztecProtocol/aztec-packages/issues/10558): if you delete this debug_log_format line, some tests fail.\n        debug_log_format(\n            \"Context.note_hashes, after pushing new note hash: {0}\",\n            self.note_hashes.storage().map(|nh: NoteHash| nh.value),\n        );\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        execution_cache::store(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request =\n            self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index],\n                },\n            );\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_public_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_public_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_public_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // Safety: TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle hashes the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = unsafe {\n            enqueue_public_function_call_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                counter,\n                is_static_call,\n            )\n        };\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n            args_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.set_public_teardown_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn set_public_teardown_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // Safety: TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle hashes the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = unsafe {\n            set_public_teardown_function_call_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                counter,\n                is_static_call,\n            )\n        };\n\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n            args_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
    },
    "71": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr",
      "source": "use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n\n        call(gas_for_call(gas_opts), contract_address, args);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n\n        call_static(gas_for_call(gas_opts), contract_address, args);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_opcode(gas, address, args)\n}\n\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"
    },
    "72": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/context/returns_hash.nr",
      "source": "use crate::{hash::hash_args_array, oracle::execution_cache};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct ReturnsHash {\n    hash: Field,\n}\n\nimpl ReturnsHash {\n    pub fn new(hash: Field) -> Self {\n        ReturnsHash { hash }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.hash, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.hash\n    }\n\n    /// This is only used during private execution, since in public it is the VM itself that keeps track of return\n    /// values.\n    pub fn get_preimage<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        // Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage));\n\n        Deserialize::deserialize(preimage)\n    }\n}\n"
    },
    "73": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr",
      "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"
    },
    "75": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/discovery/mod.nr",
      "source": "// TODO(#12750): don't make this value assume we're using AES.\nuse crate::encrypted_logs::log_assembly_strategies::default_aes128::note::encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\nuse dep::protocol_types::{address::AztecAddress, debug_log::debug_log};\n\npub mod private_logs;\npub mod partial_notes;\npub mod nonce_discovery;\n\n/// We reserve two fields in the note private log that are not part of the note content: one for the storage slot, and\n/// one for the combined log and note type ID.\nglobal NOTE_PRIVATE_LOG_RESERVED_FIELDS: u32 = 2;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size, encryption\n/// overhead and extra fields in the log (e.g. the combined log and note type ID).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS - NOTE_PRIVATE_LOG_RESERVED_FIELDS;\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of note discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, nonce, storage slot and note type\n/// ID and attempts to compute its note hash (not siloed by nonce nor address) and inner nullifier (not siloed by\n/// address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note_content, contract_address, nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note_content.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note_content */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the note discovery process, in which private and public logs are downloaded and inspected to find private\n/// notes, partial notes, and their completion. This is the mechanism via which PXE learns of new notes.\n///\n/// Receives the address of the contract on which discovery is performed (i.e. the contract that emitted the notes)\n/// along with its `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_notes<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing note discovery\");\n\n    private_logs::fetch_and_process_private_tagged_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    partial_notes::fetch_and_process_public_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n}\n"
    },
    "76": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/discovery/nonce_discovery.nr",
      "source": "use crate::{discovery::{ComputeNoteHashAndNullifier, MAX_NOTE_PACKED_LEN}, utils::array};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note_content: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting note discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    array::for_each_in_bounded_vec(\n        unique_note_hashes_in_tx,\n        |expected_unique_note_hash, i| {\n            // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n            // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n            let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n            // Given nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n            // the note hash at the array index we're currently processing.\n            // TODO(#11157): handle failed note_hash_and_nullifier computation\n            let hashes = compute_note_hash_and_nullifier(\n                packed_note_content,\n                storage_slot,\n                note_type_id,\n                contract_address,\n                candidate_nonce,\n            )\n                .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n            let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n            let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n            if unique_note_hash == expected_unique_note_hash {\n                // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n                // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n                // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n                // PXE may fail to realize that a given note has been nullified already, and calls to the application\n                // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n                // application already has more direct means of making a call to it fail the transaction.\n                discovered_notes.push(\n                    DiscoveredNoteInfo {\n                        nonce: candidate_nonce,\n                        note_hash: hashes.note_hash,\n                        inner_nullifier: hashes.inner_nullifier,\n                    },\n                );\n\n                // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n                // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n                // notes containing random values in order to hide their contents.\n            }\n        },\n    );\n\n    debug_log_format(\n        \"Discovered a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n"
    },
    "77": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/discovery/partial_notes.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    discovery::{\n        ComputeNoteHashAndNullifier,\n        nonce_discovery::{attempt_note_nonce_discovery, DiscoveredNoteInfo},\n        private_logs::MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN,\n    },\n    oracle::note_discovery::{deliver_note, get_log_by_tag},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::PUBLIC_LOG_DATA_SIZE_IN_FIELDS,\n    debug_log::debug_log_format,\n    traits::{Deserialize, Serialize, ToField},\n};\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\n// TODO(#11630): come up with some sort of slot allocation scheme.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = 77;\n\n/// Public logs contain an extra field at the beginning with the address of the contract that emitted them, and partial\n/// notes emit their completion tag in the log, resulting in the first two fields in the public log not being part of\n/// the packed public content.\n// TODO(#10273): improve how contract log siloing is handled\npub global NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG: u32 = 2;\n\n/// The maximum length of the packed representation of public fields in a partial note. This is limited by public log\n/// size and extra fields in the log (e.g. the tag).\npub global MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH: u32 =\n    PUBLIC_LOG_DATA_SIZE_IN_FIELDS - NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG;\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\n/// Searches for public logs that would result in the completion of pending partial notes, ultimately resulting in the\n/// notes being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_public_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    let mut i = &mut 0;\n    whyle(\n        || *i < pending_partial_notes.len(),\n        || {\n            let pending_partial_note: DeliveredPendingPartialNote = pending_partial_notes.get(*i);\n\n            let maybe_log = get_log_by_tag(pending_partial_note.note_completion_log_tag);\n            if maybe_log.is_none() {\n                debug_log_format(\n                    \"Found no completion logs for partial note with tag {}\",\n                    [pending_partial_note.note_completion_log_tag],\n                );\n                *i += 1 as u32;\n                // Note that we're not removing the pending partial note from the PXE DB, so we will continue searching\n                // for this tagged log when performing note discovery in the future until we either find it or the entry\n                // is somehow removed from the PXE DB.\n            } else {\n                debug_log_format(\n                    \"Completion log found for partial note with tag {}\",\n                    [pending_partial_note.note_completion_log_tag],\n                );\n                let log = maybe_log.unwrap();\n\n                // Public logs have an extra field at the beginning with the contract address, which we use to verify\n                // that we're getting the logs from the expected contract.\n                // TODO(#10273): improve how contract log siloing is handled\n                assert_eq(\n                    log.log_content.get(0),\n                    contract_address.to_field(),\n                    \"Got a public log emitted by a different contract\",\n                );\n\n                // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n                // private and public packed fields (i.e. the contents of the log sans the extra fields) to get the\n                // complete packed content.\n                let packed_public_note_content: BoundedVec<_, MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH> =\n                    array::subbvec(log.log_content, NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG);\n                let complete_packed_note_content = array::append(\n                    pending_partial_note.packed_private_note_content,\n                    packed_public_note_content,\n                );\n\n                let discovered_notes = attempt_note_nonce_discovery(\n                    log.unique_note_hashes_in_tx,\n                    log.first_nullifier_in_tx,\n                    compute_note_hash_and_nullifier,\n                    contract_address,\n                    pending_partial_note.storage_slot,\n                    pending_partial_note.note_type_id,\n                    complete_packed_note_content,\n                );\n\n                debug_log_format(\n                    \"Discovered {0} notes for partial note with tag {1}\",\n                    [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n                );\n\n                array::for_each_in_bounded_vec(\n                    discovered_notes,\n                    |discovered_note: DiscoveredNoteInfo, _| {\n                        // TODO:(#10728): decide how to handle notes that fail delivery. This could be due to e.g. a\n                        // temporary node connectivity issue - is simply throwing good enough here?\n                        assert(\n                            deliver_note(\n                                contract_address,\n                                pending_partial_note.storage_slot,\n                                discovered_note.nonce,\n                                complete_packed_note_content,\n                                discovered_note.note_hash,\n                                discovered_note.inner_nullifier,\n                                log.tx_hash,\n                                pending_partial_note.recipient,\n                            ),\n                            \"Failed to deliver note\",\n                        );\n                    },\n                );\n\n                // Because there is only a single log for a given tag, once we've processed the tagged log then we\n                // simply delete the pending work entry, regardless of whether it was actually completed or not.\n                // TODO(#11627): only remove the pending entry if we actually process a log that results in the note\n                // being completed.\n                pending_partial_notes.remove(*i);\n\n                // We don't increment `i` here, because CapsuleArray is contiguous and its `remove(...)` function\n                // shifts the elements to the left if the removed element is not the last element.\n            }\n        },\n    );\n}\n\n/// Custom version of a while loop, calls `body` repeatedly until `condition` returns false. To be removed once Noir\n/// supports looping in unconstrained code.\nfn whyle<Env, Env2>(condition: fn[Env]() -> bool, body: fn[Env2]() -> ()) {\n    if condition() {\n        body();\n        whyle(condition, body);\n    }\n}\n"
    },
    "78": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/discovery/private_logs.nr",
      "source": "use std::static_assert;\n\nuse crate::{\n    capsules::CapsuleArray,\n    oracle::note_discovery::{deliver_note, sync_notes},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PRIVATE_LOG_SIZE_IN_FIELDS},\n    debug_log::{debug_log, debug_log_format},\n};\n\nuse crate::discovery::{\n    ComputeNoteHashAndNullifier,\n    MAX_NOTE_PACKED_LEN,\n    nonce_discovery::{attempt_note_nonce_discovery, DiscoveredNoteInfo},\n    NOTE_PRIVATE_LOG_RESERVED_FIELDS,\n    partial_notes::{\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT, DeliveredPendingPartialNote,\n    },\n};\nuse crate::encrypted_logs::log_assembly_strategies::default_aes128::note::encryption::decrypt_log;\n// TODO(#12750): don't make this value assume we're using AES.\nuse crate::encrypted_logs::log_assembly_strategies::default_aes128::note::encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\npub global PARTIAL_NOTE_COMPLETION_LOG_TAG_LEN: u32 = 1;\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private log (i.e.\n/// the note completion log tag).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_NOTE_PACKED_LEN - PARTIAL_NOTE_COMPLETION_LOG_TAG_LEN;\n\n/// Searches for private logs that signal new private notes that are then delivered to PXE, or new partial notes that\n/// are stored in the PXE capsules so that `fetch_and_process_public_partial_note_completion_logs` can later search for\n/// public logs that will complete them.\npub unconstrained fn fetch_and_process_private_tagged_logs<Env>(\n    _contract_address: AztecAddress,\n    _compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    // We will eventually fetch tagged logs, decrypt and process them here, but for now we simply call the `syncNotes`\n    // oracle. This has PXE perform tag synchronization, log download, decryption, and finally calls to the the\n    // `process_log` contract function with the decrypted payload, which will in turn call `do_process_log` with a\n    // decrypted log, letting us continue the work outside of PXE.\n    sync_notes();\n}\n\n/// Processes a log's ciphertext by decrypting it and then searching the plaintext for private notes or partial notes. Private\n/// notes result in nonce discovery being performed prior to delivery, which requires knowledge of the transaction hash in\n/// which the notes would've been created (typically the same transaction in which the log was emitted), along with the\n/// list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier` function.\npub unconstrained fn do_process_log<Env>(\n    contract_address: AztecAddress,\n    log: BoundedVec<Field, PRIVATE_LOG_SIZE_IN_FIELDS>,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let log_plaintext = decrypt_log(log, recipient);\n\n    // The first thing to do after decrypting the log is to determine what type of private log we're processing. We\n    // currently just have two log types: 0 for private notes and 1 for partial notes. This will likely be expanded and\n    // improved upon in the future to also handle events, etc.\n\n    let (storage_slot, note_type_id, log_type_id, log_payload) =\n        destructure_log_plaintext(log_plaintext);\n\n    if log_type_id == 0 {\n        debug_log(\"Processing private note log\");\n\n        attempt_note_discovery(\n            contract_address,\n            tx_hash,\n            unique_note_hashes_in_tx,\n            first_nullifier_in_tx,\n            recipient,\n            compute_note_hash_and_nullifier,\n            storage_slot,\n            note_type_id,\n            log_payload,\n        );\n    } else if log_type_id == 1 {\n        debug_log(\"Processing partial note private log\");\n\n        process_partial_note_private_log(\n            contract_address,\n            storage_slot,\n            note_type_id,\n            log_payload,\n            recipient,\n        );\n    } else {\n        // TODO(#11569): handle events\n        debug_log_format(\n            \"Unknown log type id {0} (probably belonging to an event log)\",\n            [log_type_id],\n        );\n    }\n}\n\nunconstrained fn destructure_log_plaintext(\n    log_plaintext: BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    assert(log_plaintext.len() >= NOTE_PRIVATE_LOG_RESERVED_FIELDS);\n\n    // If NOTE_PRIVATE_LOG_RESERVED_FIELDS is changed, causing the assertion below to fail, then the declarations for\n    // `storage_slot` and `note_type_id` must be updated as well.\n    static_assert(\n        NOTE_PRIVATE_LOG_RESERVED_FIELDS == 2,\n        \"unexpected value for NOTE_PRIVATE_LOG_RESERVED_FIELDS\",\n    );\n    let storage_slot = log_plaintext.get(0);\n\n    // We currently identify log types by packing the log type ID and note type ID into a single field, called the\n    // combined type ID. We can do this because the note type ID is only 7 bits long, and so use an 8th bit to\n    // distinguish private note logs and partial note logs.\n    // This abuses the fact that the encoding of both of these logs is extremely similar, and will need improving and\n    // more formalization once we introduce other dissimilar log types, such as events. Ideally we'd be able to\n    // leverage enums and tagged unions to achieve this goal.\n    let combined_type_id = log_plaintext.get(1);\n    let note_type_id = ((combined_type_id as u64) % 128) as Field;\n    let log_type_id = ((combined_type_id as u64) / 128) as Field;\n\n    let log_payload = array::subbvec(log_plaintext, NOTE_PRIVATE_LOG_RESERVED_FIELDS);\n\n    (storage_slot, note_type_id, log_type_id, log_payload)\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note_content: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note_content,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private log\",\n        [discovered_notes.len() as Field],\n    );\n\n    array::for_each_in_bounded_vec(\n        discovered_notes,\n        |discovered_note: DiscoveredNoteInfo, _| {\n            // TODO:(#10728): handle notes that fail delivery. This could be due to e.g. a temporary node connectivity\n            // issue, and we should perhaps not have marked the tag index as taken.\n            assert(\n                deliver_note(\n                    contract_address,\n                    storage_slot,\n                    discovered_note.nonce,\n                    packed_note_content,\n                    discovered_note.note_hash,\n                    discovered_note.inner_nullifier,\n                    tx_hash,\n                    recipient,\n                ),\n                \"Failed to deliver note\",\n            );\n        },\n    );\n}\n\nunconstrained fn process_partial_note_private_log(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    log_payload: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    recipient: AztecAddress,\n) {\n    // We store the information of the partial note we found so that we can later search for the public log that will\n    // complete it. The tag is the first value in the payload, with the packed note content taking up the rest of it.\n    static_assert(\n        PARTIAL_NOTE_COMPLETION_LOG_TAG_LEN == 1,\n        \"unexpected value for PARTIAL_NOTE_COMPLETION_LOG_TAG_LEN\",\n    );\n\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag: log_payload.get(0),\n        storage_slot,\n        note_type_id,\n        packed_private_note_content: array::subbvec(log_payload, 1),\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n"
    },
    "79": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypt/aes128.nr",
      "source": "use dep::protocol_types::{\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::utils::point::point_to_bytes;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n"
    },
    "85": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/log_assembly_strategies/default_aes128/note/encryption.nr",
      "source": "use crate::{\n    encrypted_logs::{\n        encrypt::aes128::derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256,\n        log_assembly_strategies::default_aes128::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n    },\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    oracle::{\n        aes128_decrypt::aes128_decrypt_oracle,\n        notes::{get_app_tag_as_sender, increment_app_tagging_secret_index_as_sender},\n        shared_secret::get_shared_secret,\n    },\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign},\n        random::get_random_bytes,\n    },\n};\nuse protocol_types::{address::AztecAddress, constants::PRIVATE_LOG_SIZE_IN_FIELDS, traits::ToField};\nuse std::aes128::aes128_encrypt;\n\n// contract_address (32) + ciphertext_length (2) + 16 bytes pkcs#7 AES padding.\npub(crate) global HEADER_CIPHERTEXT_SIZE_IN_BYTES: u32 = 48;\n\nglobal TAG_AND_EPH_PK_X_SIZE_IN_FIELDS: u32 = 2;\nglobal EPH_PK_SIGN_BYTE_SIZE_IN_BYTES: u32 = 1;\npub global PRIVATE_LOG_PLAINTEXT_SIZE_IN_BYTES: u32 = (\n    PRIVATE_LOG_SIZE_IN_FIELDS - TAG_AND_EPH_PK_X_SIZE_IN_FIELDS\n)\n    * 31\n    - HEADER_CIPHERTEXT_SIZE_IN_BYTES\n    - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES;\n// Each field of the original note log was serialized to 32 bytes. Below we convert the bytes back to fields.\npub global PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS: u32 = PRIVATE_LOG_PLAINTEXT_SIZE_IN_BYTES / 32;\n\n/// Computes an encrypted log using AES-128 encryption in CBC mode.\n///\n/// The resulting log has the following format:\n/// ```text\n/// [\n///   tag: Field,                    // Tag for note discovery, derived from sender/recipient\n///   epk_x: Field,                  // X coordinate of ephemeral public key\n///   log_bytes: [Field],            // Encrypted data converted from bytes to fields, containing:\n///     [\n///       epk_sign: u8,              // Sign bit of ephemeral public key Y coordinate\n///       header_ciphertext: [u8],   // AES encrypted header containing:\n///         [\n///           contract_address: [u8; 32],  // Contract address that emitted the note\n///           ciphertext_length: [u8; 2],  // Length of main ciphertext in bytes\n///           padding: [u8; 14]            // PKCS#7 padding to AES block size\n///         ],\n///       ciphertext: [u8],          // AES encrypted note data containing:\n///         [\n///           plaintext_bytes: [u8],       // The plaintext\n///           padding: [u8]                // PKCS#7 padding to AES block size\n///         ],\n///       padding: [u8]              // Random padding to make log_bytes multiple of 31\n///     ],\n///   padding: [Field]               // Random padding to PRIVATE_LOG_SIZE_IN_FIELDS\n/// ]\n/// ```\n///\n/// The encryption process:\n/// 1. Generate ephemeral key-pair and ECDH shared secret with recipient\n/// 2. Derive AES key and IV from shared secret using SHA-256\n/// 3. Encrypt header and note data separately using AES-128-CBC\n/// 4. Format into final log structure with padding\npub fn encrypt_log<let PT: u32>(\n    contract_address: AztecAddress,\n    plaintext: [Field; PT],\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS] {\n    // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n    // (This process is then reversed when processing the log in `do_process_log`)\n    let plaintext_bytes = fields_to_bytes(plaintext);\n\n    // *****************************************************************************\n    // Compute the shared secret\n    // *****************************************************************************\n\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n    // (not to be confused with the tagging shared secret)\n    let ciphertext_shared_secret = derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n    // TODO: also use this shared secret for deriving note randomness.\n\n    // *****************************************************************************\n    // Convert the plaintext into whatever format the encryption function expects\n    // *****************************************************************************\n\n    // Already done for this strategy: AES expects bytes.\n\n    // *****************************************************************************\n    // Encrypt the plaintext\n    // *****************************************************************************\n\n    let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n        ciphertext_shared_secret,\n    );\n\n    let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n    // |full_pt| = |pt_length| + |pt|\n    // |pt_aes_padding| = 16 - (|full_pt| % 16)\n    // or... since a % b is the same as a - b * (a // b) (integer division), so:\n    // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n    // |ct| = |full_pt| + |pt_aes_padding|\n    //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n    //      = 16 + 16 * (|full_pt| // 16)\n    //      = 16 * (1 + |full_pt| // 16)\n    assert(ciphertext_bytes.len() == 16 * (1 + (PT * 32) / 16));\n\n    // *****************************************************************************\n    // Compute the header ciphertext\n    // *****************************************************************************\n\n    let contract_address_bytes = contract_address.to_field().to_be_bytes::<32>();\n\n    let mut header_plaintext: [u8; 32 + 2] = [0; 32 + 2];\n    for i in 0..32 {\n        header_plaintext[i] = contract_address_bytes[i];\n    }\n    let offset = 32;\n    let ciphertext_bytes_length = ciphertext_bytes.len();\n    header_plaintext[offset] = (ciphertext_bytes_length >> 8) as u8;\n    header_plaintext[offset + 1] = ciphertext_bytes_length as u8;\n\n    // TODO: this is insecure and wasteful:\n    // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n    // and again for the proper ciphertext) (at least, I never got the\n    // \"go ahead\" that this would be safe, unfortunately).\n    // \"Wasteful\", because the exact same computation is happening further down.\n    // I'm leaving that 2nd computation where it is, because this 1st computation\n    // will be imminently deleted, when the header logic is deleted.\n    let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n        ciphertext_shared_secret,\n    );\n\n    // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n    // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n    // bytes larger than the input in this case.\n    let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n    // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n    assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n    // *****************************************************************************\n    // Prepend / append more bytes of data to the ciphertext, before converting back\n    // to fields.\n    // *****************************************************************************\n\n    let mut log_bytes_padding_to_mult_31 = get_arr_of_size__log_bytes_padding__from_PT::<PT * 32>();\n    // Safety: this randomness won't be constrained to be random. It's in the\n    // interest of the executor of this fn to encrypt with random bytes.\n    log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n    let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PT * 32>();\n\n    assert(\n        log_bytes.len() % 31 == 0,\n        \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n    );\n\n    log_bytes[0] = eph_pk_sign_byte;\n    let mut offset = 1;\n    for i in 0..header_ciphertext_bytes.len() {\n        log_bytes[offset + i] = header_ciphertext_bytes[i];\n    }\n    offset += header_ciphertext_bytes.len();\n\n    for i in 0..ciphertext_bytes.len() {\n        log_bytes[offset + i] = ciphertext_bytes[i];\n    }\n    offset += ciphertext_bytes.len();\n\n    for i in 0..log_bytes_padding_to_mult_31.len() {\n        log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n    }\n\n    assert(\n        offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n        \"Something has gone wrong\",\n    );\n\n    // *****************************************************************************\n    // Convert bytes back to fields\n    // *****************************************************************************\n\n    // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n    // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n    // should cover a full field.\n    let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n    // *****************************************************************************\n    // Prepend / append fields, to create the final log\n    // *****************************************************************************\n\n    // In this strategy, we prepend [tag, eph_pk.x]\n\n    // Safety: We assume that the sender wants for the recipient to find the tagged note,\n    // and therefore that they will cooperate and use the correct tag. Usage of a bad\n    // tag will result in the recipient not being able to find the note automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n\n    let mut final_log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS] = [0; PRIVATE_LOG_SIZE_IN_FIELDS];\n\n    final_log[0] = tag;\n    final_log[1] = eph_pk.x;\n\n    let mut offset = 2;\n    for i in 0..log_bytes_as_fields.len() {\n        final_log[offset + i] = log_bytes_as_fields[i];\n    }\n    offset += log_bytes_as_fields.len();\n\n    for i in offset..PRIVATE_LOG_SIZE_IN_FIELDS {\n        // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n        // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n        // TODO(#12749): Long term, this is not a good solution.\n\n        // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n        // contents publicly. It is therefore fine to trust the sender to provide random padding.\n        let field_bytes = unsafe { get_random_bytes::<31>() };\n        final_log[i] = Field::from_be_bytes::<31>(field_bytes);\n    }\n\n    final_log\n}\n\npub unconstrained fn decrypt_log(\n    log: BoundedVec<Field, PRIVATE_LOG_SIZE_IN_FIELDS>,\n    recipient: AztecAddress,\n) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n    // let tag = log.get(0);\n    let eph_pk_x = log.get(1);\n\n    let log_ciphertext_fields = array::subbvec::<Field, PRIVATE_LOG_SIZE_IN_FIELDS, PRIVATE_LOG_SIZE_IN_FIELDS - TAG_AND_EPH_PK_X_SIZE_IN_FIELDS>(\n        log,\n        TAG_AND_EPH_PK_X_SIZE_IN_FIELDS,\n    );\n\n    // Convert the ciphertext represented as fields to a byte representation (its original format)\n    let log_ciphertext = bytes_from_fields(log_ciphertext_fields);\n\n    // First byte of the ciphertext represents the ephemeral public key sign\n    let eph_pk_sign_bool = log_ciphertext.get(0) as bool;\n    // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n    let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n    // Derive shared secret and symmetric key\n    let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n    let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n        ciphertext_shared_secret,\n    );\n\n    // Extract the header ciphertext\n    let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n    let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n        array::subarray(log_ciphertext.storage(), header_start);\n    // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n    // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n    // is fixed. But we do it anyway to not have to have duplicate oracles.\n    let header_ciphertext_bvec =\n        BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n    // Decrypt header\n    let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n    // Extract ciphertext length from header (2 bytes, big-endian)\n    let ciphertext_length =\n        ((header_plaintext.get(32) as u32) << 8) | (header_plaintext.get(33) as u32);\n\n    // Extract and decrypt main ciphertext\n    let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n    let ciphertext_with_padding: [u8; (PRIVATE_LOG_SIZE_IN_FIELDS - TAG_AND_EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n        array::subarray(log_ciphertext.storage(), ciphertext_start);\n    let ciphertext: BoundedVec<u8, (PRIVATE_LOG_SIZE_IN_FIELDS - TAG_AND_EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n        BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n    // Decrypt main ciphertext and return it\n    let log_plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n    // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n    fields_from_bytes(log_plaintext_bytes)\n}\n\nmod test {\n    use crate::{\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::{decrypt_log, encrypt_log, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS};\n    use protocol_types::{address::AztecAddress, traits::{FromField, Serialize}};\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn test_encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let contract_address = AztecAddress::from_field(\n            0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04,\n        );\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        let sender = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns([69420, 1337]);\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log =\n            BoundedVec::from_array(encrypt_log(contract_address, plaintext, recipient, sender));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret.serialize());\n\n        // Decrypt the log\n        let decrypted = decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n    }\n}\n"
    },
    "92": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/hash.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"
    }
  }
}
