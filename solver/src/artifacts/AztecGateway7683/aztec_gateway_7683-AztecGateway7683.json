{
  "transpiled": true,
  "noir_version": "1.0.0-beta.3+0000000000000000000000000000000000000000",
  "name": "AztecGateway7683",
  "functions": [
    {
      "name": "process_log",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 75
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ],
            "length": 48
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ],
            "length": 98
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "field"
              }
            ],
            "length": 58
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ],
            "length": 61
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          }
        },
        "parameters": [
          {
            "name": "log_ciphertext",
            "type": {
              "fields": [
                {
                  "name": "storage",
                  "type": {
                    "kind": "array",
                    "length": 18,
                    "type": {
                      "kind": "field"
                    }
                  }
                },
                {
                  "name": "len",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "std::collections::bounded_vec::BoundedVec"
            },
            "visibility": "private"
          },
          {
            "name": "tx_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "unique_note_hashes_in_tx",
            "type": {
              "fields": [
                {
                  "name": "storage",
                  "type": {
                    "kind": "array",
                    "length": 64,
                    "type": {
                      "kind": "field"
                    }
                  }
                },
                {
                  "name": "len",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "std::collections::bounded_vec::BoundedVec"
            },
            "visibility": "private"
          },
          {
            "name": "first_nullifier_in_tx",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": ["process_log"]
    },
    {
      "name": "public_dispatch",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "error_types": {
          "10411837482733946431": {
            "error_kind": "string",
            "string": "Invalid order sender"
          },
          "10852400770788842366": {
            "error_kind": "string",
            "string": "Invalid order domain"
          },
          "10883657705690251125": {
            "error_kind": "string",
            "string": "Invalid order status"
          },
          "11094545764365153162": {
            "error_kind": "string",
            "string": "Function _assert_nonce_and_set_order_details can only be called internally"
          },
          "1149705418984161792": {
            "error_kind": "string",
            "string": "Invalid nonce"
          },
          "12018683598614887596": {
            "error_kind": "string",
            "string": "Function _check_order_status can only be called internally"
          },
          "13250867036985658079": {
            "error_kind": "string",
            "string": "Invalid order data type"
          },
          "13358931442698543651": {
            "error_kind": "string",
            "string": "Order fill expired"
          },
          "13459246948365409099": {
            "error_kind": "string",
            "string": "Function _emit_open can only be called internally"
          },
          "13594925270014003382": {
            "error_kind": "string",
            "string": "Function _trigger_settlement can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14563046062317426044": {
            "error_kind": "string",
            "string": "Function _check_order_commitment can only be called internally"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "255477095918156618": {
            "error_kind": "string",
            "string": "Invalid order"
          },
          "2830029349304997821": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "field"
              }
            ],
            "length": 27
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3089903740940599642": {
            "error_kind": "string",
            "string": "Invalid fill deadline"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5024954142921657308": {
            "error_kind": "string",
            "string": "Not a private order"
          },
          "5048864367174250545": {
            "error_kind": "string",
            "string": "Function get_filled_order_block_number can only be called statically"
          },
          "5775299686015755157": {
            "error_kind": "string",
            "string": "Not a public order"
          },
          "6017907102598075401": {
            "error_kind": "string",
            "string": "Function get_order_status can only be called statically"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6579113687620452371": {
            "error_kind": "string",
            "string": "Invalid order origin domain"
          },
          "692953268510459726": {
            "error_kind": "string",
            "string": "Invalid order id"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8412360910299423372": {
            "error_kind": "string",
            "string": "Invalid order destination domain"
          },
          "9169818942746597700": {
            "error_kind": "string",
            "string": "Function _update_order_status can only be called internally"
          }
        },
        "parameters": [
          {
            "name": "selector",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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GwEZAB0MARkBGgIoAgEbBACcATgAFAEbAR0uDQEdARwdDAEcAR0CHQwBHQEbAB0MARsBHAIoAgEdBACdATgAFAEdAR8uDQEfAR4dDAEeAR8CHQwBHwEdAB0MAR0BHgIoAgEfBACeATgAFAEfASEuDQEhASAdDAEgASECHQwBIQEfAB0MAR8BIAIoAgEhBACfATgAFAEhASMuDQEjASIdDAEiASMCHQwBIwEhAB0MASEBIgIBKAAUgLABJC4NASQBIx0MASMBJQIdDAElASQAHQwBJAEjAigCASUEAKEBOAAUASUBJy4NAScBJh0MASYBJwIdDAEnASUAHQwBJQEmAigCAScEAKIBOAAUAScBKS4NASkBKB0MASgBKQIdDAEpAScAHQwBJwEoAigCASkEAKMBOAAUASkBKy4NASsBKh0MASoBKwIdDAErASkAHQwBKQEqAigCASsEAKQBOAAUASsBLS4NAS0BLB0MASwBLQIdDAEtASsAHQwBKwEsAigCAS0EAKUBOAAUAS0BLy4NAS8BLh0MAS4BLwIdDAEvAS0AHQwBLQEuAigCAS8EAKYBOAAUAS8BMS4NATEBMB0MATABMQIdDAExAS8AHQwBLwEwAigCATEEAKcBOAAUATEBMy4NATMBMh0MATIBMwIdDAEzATEAHQwBMQEyAigCATMEAKgBOAAUATMBNS4NATUBNB0MATQBNQIdDAE1ATMAHQwBMwE0AigCATUEAKkBOAAUATUBNy4NATcBNh0MATYBNwIdDAE3ATUAHQwBNQE2AigCATcEAKoBOAAUATcBOS4NATkBOB0MATgBOQIdDAE5ATcAHQwBNwE4AigCATkEAKsBOAAUATkBOy4NATsBOh0MAToBOwIdDAE7ATkAHQwBOQE6AigCATsEAKwBOAAUATsBPS4NAT0BPB0MATwBPQIdDAE9ATsAHQwBOwE8AigCAT0EAK0BOAAUAT0BPy4NAT8BPh0MAT4BPwIdDAE/AT0AHQwBPQE+AigCAT8EAK4BOAAUAT8BQS4NAUEBQB0MAUABQQIdDAFBAT8AHQwBPwFAAigCAUEEAK8BOAAUAUEBQy4NAUMBQh0MAUIBQwIdDAFDAUEAHQwBQQFCAigCAUMEALABOAAUAUMBRS4NAUUBRB0MAUQBRQIdDAFFAUMAHQwBQwFEAigCAUUEALEBOAAUAUUBRy4NAUcBRh0MAUYBRwIdDAFHAUUAHQwBRQFGAigCAUcEALIBOAAUAUcBSS4NAUkBSB0MAUgBSQIdDAFJAUcAHQwBRwFIAigCAUkEALMBOAAUAUkBSy4NAUsBSh0MAUoBSwIdDAFLAUkAHQwBSQFKAigCAUsEALQBOAAUAUsBTS4NAU0BTB0MAUwBTQIdDAFNAUsAHQwBSwFMAigCAU0EALUBOAAUAU0BTy4NAU8BTh0MAU4BTwIdDAFPAU0AHQwBTQFOAigCAU8EALYBOAAUAU8BUS4NAVEBUB0MAVABUQIdDAFRAU8AHQwBTwFQAigCAVEEALcBOAAUAVEBUy4NAVMBUh0MAVIBUwIdDAFTAVEAHQwBUQFSAigCAVMEALgBOAAUAVMBVS4NAVUBVB0MAVQBVQIdDAFVAVMAHQwBUwFUAigCAVUEALkBOAAUAVUBVy4NAVcBVh0MAVYBVwIdDAFXAVUAHQwBVQFWAigCAVcEALoBOAAUAVcBWS4NAVkBWB0MAVgBWQIdDAFZAVcAHQwBVwFYAigCAVkEALsBOAAUAVkBWy4NAVsBWh0MAVoBWwIdDAFbAVkAHQwBWQFaAigCAVsEALwBOAAUAVsBXS4NAV0BXB0MAVwBXQIdDAFdAVsAHQwBWwFcAigCAV0EAL0BOAAUAV0BXy4NAV8BXh0MAV4BXwIdDAFfAV0AHQwBXQFeAigCAV8EAL4BOAAUAV8BYS4NAWEBYB0MAWABYQIdDAFhAV8AHQwBXwFgAigCAWEEAL8BOAAUAWEBYy4NAWMBYh0MAWIBYwIdDAFjAWEAHQwBYQFiAgEoABSAsQFkLg0BZAFjHQwBYwFlAh0MAWUBZAAdDAFkAWMCKAIBZQQAwQE4ABQBZQFnLg0BZwFmHQwBZgFnAh0MAWcBZQAdDAFlAWYCKAIBZwQAwgE4ABQBZwFpLg0BaQFoHQwBaAFpAh0MAWkBZwAdDAFnAWgCKAIBaQQAwwE4ABQBaQFrLg0BawFqHQwBagFrAh0MAWsBaQAdDAFpAWoCKAIBawQAxAE4ABQBawFtLg0BbQFsHQwBbAFtAh0MAW0BawAdDAFrAWwCKAIBbQQAxQE4ABQBbQFvLg0BbwFuHQwBbgFvAh0MAW8BbQAdDAFtAW4CKAIBbwQAxgE4ABQBbwFxLg0BcQFwHQwBcAFxAh0MAXEBbwAdDAFvAXACKAIBcQQAxwE4ABQBcQFzLg0BcwFyHQwBcgFzAh0MAXMBcQAdDAFxAXICKAIBcwQAyAE4ABQBcwF1Lg0BdQF0HQwBdAF1Ah0MAXUBcwAdDAFzAXQCKAIBdQQAyQE4ABQBdQF3Lg0BdwF2HQwBdgF3Ah0MAXcBdQAdDAF1AXYCKAIBdwQAygE4ABQBdwF5Lg0BeQF4HQwBeAF5Ah0MAXkBdwAdDAF3AXgCKAIBeQQAywE4ABQBeQF7Lg0BewF6HQwBegF7Ah0MAXsBeQAdDAF5AXoCKAIBewQAzAE4ABQBewF9Lg0BfQF8HQwBfAF9Ah0MAX0BewAdDAF7AXwCKAIBfQQAzQE4ABQBfQF/Lg0BfwF+HQwBfgF/Ah0MAX8BfQAdDAF9AX4CKAIBfwQAzgE4ABQBfwGBLg0BgQGAHQwBgAGBAh0MAYEBfwAdDAF/AYACKAIBgQQAzwE4ABQBgQGDLg0BgwGCHQwBggGDAh0MAYMBgQAdDAGBAYICKAIBgwQA0AE4ABQBgwGFLg0BhQGEHQwBhAGFAh0MAYUBgwAdDAGDAYQCKAIBhQQA0QE4ABQBhQGHLg0BhwGGHQwBhgGHAh0MAYcBhQAdDAGFAYYCKAIBhwQA0gE4ABQBhwGJLg0BiQGIHQwBiAGJAh0MAYkBhwAdDAGHAYgCKAIBiQQA0wE4ABQBiQGLLg0BiwGKHQwBigGLAh0MAYsBiQAdDAGJAYoCKAIBiwQA1AE4ABQBiwGNLg0BjQGMHQwBjAGNAh0MAY0BiwAdDAGLAYwCKAIBjQQA1QE4ABQBjQGPLg0BjwGOHQwBjgGPAh0MAY8BjQAdDAGNAY4CKAIBjwQA1gE4ABQBjwGRLg0BkQGQHQwBkAGRAh0MAZEBjwAdDAGPAZACKAIBkQQA1wE4ABQBkQGTLg0BkwGSHQwBkgGTAh0MAZMBkQAdDAGRAZICKAIBkwQA2AE4ABQBkwGVLg0BlQGUHQwBlAGVAh0MAZUBkwAdDAGTAZQCKAIBlQQA2QE4ABQBlQGXLg0BlwGWHQwBlgGXAh0MAZcBlQAdDAGVAZYCKAIBlwQA2gE4ABQBlwGZLg0BmQGYHQwBmAGZAh0MAZkBlwAdDAGXAZgCKAIBmQQA2wE4ABQBmQGbLg0BmwGaHQwBmgGbAh0MAZsBmQAdDAGZAZoCKAIBmwQA3AE4ABQBmwGd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AB0MAh0CHgIoAgIfBAEeATgAFAIfAiEuDQIhAiAdDAIgAiECHQwCIQIfAB0MAh8CIAIoAgIhBAEfATgAFAIhAiMuDQIjAiIdDAIiAiMCHQwCIwIhAB0MAiECIgIoAgIjBAEgATgAFAIjAiUuDQIlAiQdDAIkAiUCHQwCJQIjAB0MAiMCJAIoAgIlBAEhATgAFAIlAicuDQInAiYdDAImAicCHQwCJwIlAB0MAiUCJgIoAgInBAEiATgAFAInAikuDQIpAigdDAIoAikCHQwCKQInAB0MAicCKAIoAgIpBAEjATgAFAIpAisuDQIrAiodDAIqAisCHQwCKwIpAB0MAikCKgIoAgIrBAEkATgAFAIrAi0uDQItAiwdDAIsAi0CHQwCLQIrAB0MAisCLAIoAgItBAElATgAFAItAi8uDQIvAi4dDAIuAi8CHQwCLwItAB0MAi0CLgIoAgIvBAEmATgAFAIvAjEuDQIxAjAdDAIwAjECHQwCMQIvAB0MAi8CMAIoAgIxBAEnATgAFAIxAjMuDQIzAjIdDAIyAjMCHQwCMwIxAB0MAjECMgIoAgIzBAEoATgAFAIzAjUuDQI1AjQdDAI0AjUCHQwCNQIzAB0MAjMCNAIoAgI1BAEpATgAFAI1AjcuDQI3AjYdDAI2AjcCHQwCNwI1AB0MAjUCNgIoAgI3BAEqATgAFAI3AjkuDQI5AjgdDAI4AjkCHQwCOQI3AB0MAjcCOAIoAgI5BAErATgAFAI5AjsuDQI7AjodDAI6AjsCHQwCOwI5AB0MAjkCOgIoAgI7BAEsATgAFAI7Aj0uDQI9AjwdDAI8Aj0CHQwCPQI7AB0MAjsCPAIBKAAUgIMCPi4NAj4CPR0MAj0CPwIdDAI/Aj4AHQwCPgI9AigCAj8EAS4BOAAUAj8CQS4NAkECQB0MAkACQQIdDAJBAj8AHQwCPwJAAgE4ABQADQJCLg0CQgJBHQwCQQJDAh0MAkMCQgAdDAJCAkECKAICQwQBMAE4ABQCQwJFLg0CRQJEHQwCRAJFAh0MAkUCQwAdDAJDAkQCKAICRQQBMQE4ABQCRQJHLg0CRwJGHQwCRgJHAh0MAkcCRQAdDAJFAkYCKAICRwQBMgE4ABQCRwJJLg0CSQJIHQwCSAJJAh0MAkkCRwAdDAJHAkgCKAICSQQBMwE4ABQCSQJLLg0CSwJKHQwCSgJLAh0MAksCSQAdDAJJAkoCKAICSwQBNAE4ABQCSwJNLg0CTQJMHQwCTAJNAh0MAk0CSwAdDAJLAkwCKAICTQQBNQE4ABQCTQJPLg0CTwJOHQwCTgJPAh0MAk8CTQAdDAJNAk4CKAICTwQBNgE4ABQCTwJRLg0CUQJQHQwCUAJRAh0MAlECTwAdDAJPAlACKAICUQQBNwE4ABQCUQJTLg0CUwJSHQwCUgJTAh0MAlMCUQAdDAJRAlICKAICUwQBOAE4ABQCUwJVLg0CVQJUHQwCVAJVAh0MAlUCUwAdDAJTAlQCKAICVQQBOQE4ABQCVQJXLg0CVwJWHQwCVgJXAh0MAlcCVQAdDAJVAlYCKAICVwQBOgE4ABQCVwJZLg0CWQJYHQwCWAJZAh0MAlkCVwAdDAJXAlgCKAICWQQBOwE4ABQCWQJbLg0CWwJaHQwCWgJbAh0MAlsCWQAdDAJZAloCKAICWwQBPAE4ABQCWwJdLg0CXQJcHQwCXAJdAh0MAl0CWwAdDAJbAlwCKAICXQQBPQE4ABQCXQJfLg0CXwJeHQwCXgJfAh0MAl8CXQAdDAJdAl4CKAICXwQBPgE4ABQCXwJhLg0CYQJgHQwCYAJhAh0MAmECXwAdDAJfAmACKAICYQQBPwE4ABQCYQJjLg0CYwJiHQwCYgJjAh0MAmMCYQAdDAJhAmICKAICYwQBQAE4ABQCYwJlLg0CZQJkHQwCZAJlAh0MAmUCYwAdDAJjAmQCKAICZQQBQQE4ABQCZQJnLg0CZwJmHQwCZgJnAh0MAmcCZQAdDAJlAmYCKAICZwQBQgE4ABQCZwJpLg0CaQJoHQwCaAJpAh0MAmkCZwAdDAJnAmgCKAICaQQBQwE4ABQCaQJrLg0CawJqHQwCagJrAh0MAmsCaQAdDAJpAmoCKAICawQBRAE4ABQCawJtLg0CbQJsHQwCbAJtAh0MAm0CawAdDAJrAmwCKAICbQQBRQE4ABQCbQJvLg0CbwJuHQwCbgJvAh0MAm8CbQAdDAJtAm4CKAICbwQBRgE4ABQCbwJxLg0CcQJwHQwCcAJxAh0MAnECbwAdDAJvAnACKAICcQQBRwE4ABQCcQJzLg0CcwJyHQwCcgJzAh0MAnMCcQAdDAJxAnICKAICcwQBSAE4ABQCcwJ1Lg0CdQJ0HQwCdAJ1Ah0MAnUCcwAdDAJzAnQCKAICdQQBSQE4ABQCdQJ3Lg0CdwJ2HQwCdgJ3Ah0MAncCdQAdDAJ1AnYCKAICdwQBSgE4ABQCdwJ5Lg0CeQJ4HQwCeAJ5Ah0MAnkCdwAdDAJ3AngCKAICeQQBSwE4ABQCeQJ7Lg0CewJ6HQwCegJ7Ah0MAnsCeQAdDAJ5AnoCKAICewQBTAE4ABQCewJ9Lg0CfQJ8HQwCfAJ9Ah0MAn0CewAdDAJ7AnwCASgAFIC7An4uDQJ+An0dDAJ9An8CHQwCfwJ+AB0MAn4CfQIBOAAUABICgC4NAoACfx0MAn8CgAIdDAKAABQAHQwAFAJ/Ai4IAAECgCgCAoEEAS4BEAABAoEAASgDAoAEAAEBKAKAAAICgS4MAoECgi4OABcCggEoAoIAAgKCLg4AGgKCASgCggACAoIuDgAeAoIBKAKCAAICgi4OACACggEoAoIAAgKCLg4AIgKCASgCggACAoIuDgAkAoIBKAKCAAICgi4OACYCggEoAoIAAgKCLg4AKQKCASgCggACAoIuDgAtAoIBKAKCAAICgi4OADECggEoAoIAAgKCLg4AMwKCASgCggACAoIuDgA5AoIBKAKCAAICgi4OAD0CggEoAoIAAgKCLg4AQQKCASgCggACAoIuDgBDAoIBKAKCAAICgi4OAEYCggEoAoIAAgKCLg4ASAKCASgCggACAoIuDgBKAoIBKAKCAAICgi4OAEwCggEoAoIAAgKCLg4ATgKCASgCggACAoIuDgBQAoIBKAKCAAICgi4OAFICggEoAoIAAgKCLg4AUwKCASgCggACAoIuDgBWAoIBKAKCAAICgi4OAFgCggEoAoIAAgKCLg4AWgKCASgCggACAoIuDgBcAoIBKAKCAAICgi4OAF4CggEoAoIAAgKCLg4AYAKCASgCggACAoIuDgBiAoIBKAKCAAICgi4OAGMCggEoAoIAAgKCLg4AZQKCASgCggACAoIuDgBoAoIBKAKCAAICgi4OAGoCggEoAoIAAgKCLg4AbAKCASgCggACAoIuDgBuAoIBKAKCAAICgi4OAHACggEoAoIAAgKCLg4AcgKCASgCggACAoIuDgB0AoIBKAKCAAICgi4OAHYCggEoAoIAAgKCLg4AeAKCASgCggACAoIuDgB6AoIBKAKCAAICgi4OAHwCggEoAoIAAgKCLg4AfgKCASgCggACAoIuDgCAAoIBKAKCAAICgi4OAIICggEoAoIAAgKCLg4AhAKCASgCggACAoIuDgCGAoIBKAKCAAICgi4OAIgCggEoAoIAAgKCLg4AigKCASgCggACAoIuDgCMAoIBKAKCAAICgi4OAI4CggEoAoIAAgKCLg4AkAKCASgCggACAoIuDgCSAoIBKAKCAAICgi4OAJQCggEoAoIAAgKCLg4AlgKCASgCggACAoIuDgCYAoIBKAKCAAICgi4OAJoCggEoAoIAAgKCLg4AnAKCASgCggACAoIuDgCeAoIBKAKCAAICgi4OAKACggEoAoIAAgKCLg4AogKCASgCggACAoIuDgCjAoIBKAKCAAICgi4OAKYCggEoAoIAAgKCLg4AqAKCASgCggACAoIuDgCqAoIBKAKCAAICgi4OAKwCggEoAoIAAgKCLg4ArgKCASgCggACAoIuDgCwAoIBKAKCAAICgi4OALICggEoAoIAAgKCLg4AtAKCASgCggACAoIuDgC2AoIBKAKCAAICgi4OALgCggEoAoIAAgKCLg4AugKCASgCggACAoIuDgC8AoIBKAKCAAICgi4OAL4CggEoAoIAAgKCLg4AwAKCASgCggACAoIuDgDCAoIBKAKCAAICgi4OAMQCggEoAoIAAgKCLg4AxgKCASgCggACAoIuDgDIAoIBKAKCAAICgi4OAMoCggEoAoIAAgKCLg4AzAKCASgCggACAoIuDgDOAoIBKAKCAAICgi4OANACggEoAoIAAgKCLg4A0gKCASgCggACAoIuDgDUAoIBKAKCAAICgi4OANYCggEoAoIAAgKCLg4A2AKCASgCggACAoIuDgDaAoIBKAKCAAICgi4OANwCggEoAoIAAgKCLg4A3gKCASgCggACAoIuDgDgAoIBKAKCAAICgi4OAOICggEoAoIAAgKCLg4A4wKCASgCggACAoIuDgDmAoIBKAKCAAICgi4OAOgCggEoAoIAAgKCLg4A6gKCASgCggACAoIuDgDsAoIBKAKCAAICgi4OAO4CggEoAoIAAgKCLg4A8AKCASgCggACAoIuDgDyAoIBKAKCAAICgi4OAPQCggEoAoIAAgKCLg4A9gKCASgCggACAoIuDgD4AoIBKAKCAAICgi4OAPoCggEoAoIAAgKCLg4A/AKCASgCggACAoIuDgD+AoIBKAKCAAICgi4OAQACggEoAoIAAgKCLg4BAgKCASgCggACAoIuDgEEAoIBKAKCAAICgi4OAQYCggEoAoIAAgKCLg4BCAKCASgCggACAoIuDgEKAoIBKAKCAAICgi4OAQwCggEoAoIAAgKCLg4BDgKCASgCggACAoIuDgEQAoIBKAKCAAICgi4OARICggEoAoIAAgKCLg4BFAKCASgCggACAoIuDgEWAoIBKAKCAAICgi4OARgCggEoAoIAAgKCLg4BGgKCASgCggACAoIuDgEcAoIBKAKCAAICgi4OAR4CggEoAoIAAgKCLg4BIAKCASgCggACAoIuDgEiAoIBKAKCAAICgi4OASMCggEoAoIAAgKCLg4BJgKCASgCggACAoIuDgEoAoIBKAKCAAICgi4OASoCggEoAoIAAgKCLg4BLAKCASgCggACAoIuDgEuAoIBKAKCAAICgi4OATACggEoAoIAAgKCLg4BMgKCASgCggACAoIuDgE0AoIBKAKCAAICgi4OATYCggEoAoIAAgKCLg4BOAKCASgCggACAoIuDgE6AoIBKAKCAAICgi4OATwCggEoAoIAAgKCLg4BPgKCASgCggACAoIuDgFAAoIBKAKCAAICgi4OAUICggEoAoIAAgKCLg4BRAKCASgCggACAoIuDgFGAoIBKAKCAAICgi4OAUgCggEoAoIAAgKCLg4BSgKCASgCggACAoIuDgFMAoIBKAKCAAICgi4OAU4CggEoAoIAAgKCLg4BUAKCASgCggACAoIuDgFSAoIBKAKCAAICgi4OAVQCggEoAoIAAgKCLg4BVgKCASgCggACAoIuDgFYAoIBKAKCAAICgi4OAVoCggEoAoIAAgKCLg4BXAKCASgCggACAoIuDgFeAoIBKAKCAAICgi4OAWACggEoAoIAAgKCLg4BYgKCASgCggACAoIuDgFjAoIBKAKCAAICgi4OAWYCggEoAoIAAgKCLg4BaAKCASgCggACAoIuDgFqAoIBKAKCAAICgi4OAWwCggEoAoIAAgKCLg4BbgKCASgCggACAoIuDgFwAoIBKAKCAAICgi4OAXICggEoAoIAAgKCLg4BdAKCASgCggACAoIuDgF2AoIBKAKCAAICgi4OAXgCggEoAoIAAgKCLg4BegKCASgCggACAoIuDgF8AoIBKAKCAAICgi4OAX4CggEoAoIAAgKCLg4BgAKCASgCggACAoIuDgGCAoIBKAKCAAICgi4OAYQCggEoAoIAAgKCLg4BhgKCASgCggACAoIuDgGIAoIBKAKCAAICgi4OAYoCggEoAoIAAgKCLg4BjAKCASgCggACAoIuDgGOAoIBKAKCAAICgi4OAZACggEoAoIAAgKCLg4BkgKCASgCggACAoIuDgGUAoIBKAKCAAICgi4OAZYCggEoAoIAAgKCLg4BmAKCASgCggACAoIuDgGaAoIBKAKCAAICgi4OAZwCggEoAoIAAgKCLg4BngKCASgCggACAoIuDgGgAoIBKAKCAAICgi4OAaICggEoAoIAAgKCLg4BowKCASgCggACAoIuDgGmAoIBKAKCAAICgi4OAagCggEoAoIAAgKCLg4BqgKCASgCggACAoIuDgGrAoIBKAKCAAICgi4OAa4CggEoAoIAAgKCLg4BsAKCASgCggACAoIuDgGyAoIBKAKCAAICgi4OAbMCggEoAoIAAgKCLg4BtgKCASgCggACAoIuDgG4AoIBKAKCAAICgi4OAboCggEoAoIAAgKCLg4BvAKCASgCggACAoIuDgG+AoIBKAKCAAICgi4OAcACggEoAoIAAgKCLg4BwgKCASgCggACAoIuDgHEAoIBKAKCAAICgi4OAcYCggEoAoIAAgKCLg4ByAKCASgCggACAoIuDgHKAoIBKAKCAAICgi4OAcwCggEoAoIAAgKCLg4BzgKCASgCggACAoIuDgHQAoIBKAKCAAICgi4OAdICggEoAoIAAgKCLg4B1AKCASgCggACAoIuDgHWAoIBKAKCAAICgi4OAdgCggEoAoIAAgKCLg4B2gKCASgCggACAoIuDgHcAoIBKAKCAAICgi4OAd4CggEoAoIAAgKCLg4B4AKCASgCggACAoIuDgHiAoIBKAKCAAICgi4OAeMCggEoAoIAAgKCLg4B5gKCASgCggACAoIuDgHoAoIBKAKCAAICgi4OAeoCggEoAoIAAgKCLg4B7AKCASgCggACAoIuDgHuAoIBKAKCAAICgi4OAfACggEoAoIAAgKCLg4B8gKCASgCggACAoIuDgHzAoIBKAKCAAICgi4OAfYCggEoAoIAAgKCLg4B+AKCASgCggACAoIuDgH6AoIBKAKCAAICgi4OAfwCggEoAoIAAgKCLg4B/QKCASgCggACAoIuDgIAAoIBKAKCAAICgi4OAgICggEoAoIAAgKCLg4CBAKCASgCggACAoIuDgIFAoIBKAKCAAICgi4OAggCggEoAoIAAgKCLg4CCgKCASgCggACAoIuDgIMAoIBKAKCAAICgi4OAg4CggEoAoIAAgKCLg4CEAKCASgCggACAoIuDgISAoIBKAKCAAICgi4OAhQCggEoAoIAAgKCLg4CFgKCASgCggACAoIuDgIYAoIBKAKCAAICgi4OAhoCggEoAoIAAgKCLg4CHAKCASgCggACAoIuDgIeAoIBKAKCAAICgi4OAiACggEoAoIAAgKCLg4CIgKCASgCggACAoIuDgIkAoIBKAKCAAICgi4OAiYCggEoAoIAAgKCLg4CKAKCASgCggACAoIuDgIqAoIBKAKCAAICgi4OAiwCggEoAoIAAgKCLg4CLgKCASgCggACAoIuDgIwAoIBKAKCAAICgi4OAjICggEoAoIAAgKCLg4CNAKCASgCggACAoIuDgI2AoIBKAKCAAICgi4OAjgCggEoAoIAAgKCLg4COgKCASgCggACAoIuDgI8AoIBKAKCAAICgi4OAj0CggEoAoIAAgKCLg4CQAKCASgCggACAoIuDgJBAoIBKAKCAAICgi4OAkQCggEoAoIAAgKCLg4CRgKCASgCggACAoIuDgJIAoIBKAKCAAICgi4OAkoCggEoAoIAAgKCLg4CTAKCASgCggACAoIuDgJOAoIBKAKCAAICgi4OAlACggEoAoIAAgKCLg4CUgKCASgCggACAoIuDgJUAoIBKAKCAAICgi4OAlYCggEoAoIAAgKCLg4CWAKCASgCggACAoIuDgJaAoIBKAKCAAICgi4OAlwCggEoAoIAAgKCLg4CXgKCASgCggACAoIuDgJgAoIBKAKCAAICgi4OAmICggEoAoIAAgKCLg4CZAKCASgCggACAoIuDgJmAoIBKAKCAAICgi4OAmgCggEoAoIAAgKCLg4CagKCASgCggACAoIuDgJsAoIBKAKCAAICgi4OAm4CggEoAoIAAgKCLg4CcAKCASgCggACAoIuDgJyAoIBKAKCAAICgi4OAnQCggEoAoIAAgKCLg4CdgKCASgCggACAoIuDgJ4AoIBKAKCAAICgi4OAnoCggEoAoIAAgKCLg4CfAKCASgCggACAoIuDgJ9AoIBKAKCAAICgi4OAn8Cgi0NRRcAKBcCFy0OF0Uu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AUQALQ0pBAAoBAIELQ4EKS0NMQQAKAQCBC0OBDEBOAAxADQBRi4NAUYABB0MAAQBRgAtDSkEACgEAgQtDgQpLQ0xBAAoBAIELQ4EMQE4ADEANgFILg0BSAAEHQwABAFIAC0NKQQAKAQCBC0OBCktDTEEACgEAgQtDgQxATgAMQA4AUouDQFKAAQdDAAEAUoALQ0pBAAoBAIELQ4EKS0NMQQAKAQCBC0OBDEBOAAxADoBTC4NAUwABB0MAAQBTAAtDSkEACgEAgQtDgQpLQ0xBAAoBAIELQ4EMQE4ADEAPAFOLg0BTgAEHQwABAFOAC0NKQQAKAQCBC0OBCktDTEEACgEAgQtDgQxATgAMQA+AVAuDQFQAAQdDAAEAVAALQ0pBAAoBAIELQ4EKS0NMQQAKAQCBC0OBDEBOAAxAEABUi4NAVIABB0MAAQBUgAtDSkEACgEAgQtDgQpLQ0xBAAoBAIELQ4EMQEoADGAowFULg0BVAAEHQwABAFUAC0NKQQAKAQCBC0OBCktDTEEACgEAgQtDgQxASgAMYClAVYuDQFWAAQdDAAEAVYALQ0pBAAoBAIELQ4EKS0NMQQAKAQCBC0OBDEBKAAxgKcBWC4NAVgABB0MAAQBWAAtDSkEACgEAgQtDgQpLQ0xBAAoBAIELQ4EMS0NKQQAKAQCBC0OBCktDTEEACgEAgQtDgQxLQ0pBAAoBAIELQ4EKS0NMQQAKAQCBC0OBDEtDSkEACgEAgQtDgQpLQ0xBAAoBAIELQ4EMS0NKQQAKAQCBC0OBCktDTEEACgEAgQtDgQxLQ0pBAAoBAIELQ4EKS0NMQQAKAQCBC0OBDEtDSkEACgEAgQtDgQpLQ0xBAAoBAIELQ4EMS0NKQQAKAQCBC0OBCktDTEEACgEAgQtDgQxLQ0pBAAoBAIELQ4EKS0NMQQAKAQCBC0OBDEtDSkEACgEAgQtDgQpLQ0xBAAoBAIELQ4EMS0NKQQAKAQCBC0OBCktDTEEACgEAgQtDgQxLQ0pBAAoBAIELQ4EKS0NMQQAKAQCBC0OBDEtDSkEACgEAgQtDgQpLQ0xBAAoBAIELQ4EMS0NKQQAKAQCBC0OBCktDTEEACgEAgQtDgQxLQ0pBAAoBAIELQ4EKS0NMQQAKAQCBC0OBDEtDSkEACgEAgQtDgQpLQ0xBAAoBAIELQ4EMS0NKQQAKAQCBC0OBCktDTEEACgEAgQtDgQxLQ0pBAAoBAIELQ4EKS0NMQQAKAQCBC0OBDEtDSkEACgEAgQtDgQpLQ0xBAAoBAIELQ4EMS0NKQQAKAQCBC0OBCktDTEEACgEAgQtDgQxLQ0pBAAoBAIELQ4EKS0NMQQAKAQCBC0OBDEtDSkEACgEAgQtDgQpLQ0xBAAoBAIELQ4EMS0NKQQAKAQCBC0OBCktDTEEACgEAgQtDgQxLQ0pBAAoBAIELQ4EKS0NMQQAKAQCBC0OBDEtDSkEACgEAgQtDgQpLQ0xBAAoBAIELQ4EMS0NKQQAKAQCBC0OBCktDTEEACgEAgQtDgQxLQ0pBAAoBAIELQ4EKS0NMQQAKAQCBC0OBDEtDSkEACgEAgQtDgQpLQ0xBAAoBAIELQ4EMS0NKQQAKAQCBC0OBCktDTEEACgEAgQtDgQxLQ0pBAAoBAIELQ4EKS0NMQQAKAQCBC0OBDEtDSkEACgEAgQtDgQpLQ0xBAAoBAIELQ4EMS0NKQQAKAQCBC0OBCktDTEEACgEAgQtDgQxLQ0pBAAoBAIELQ4EKS0NMQQAKAQCBC0OBDEBKABBgGMBWi4NAVoABB0MAAQBWgAtDSkEACgEAgQtDgQpLQ0xBAAoBAIELQ4EMQEoAEGAZQFcLg0BXAAEHQwABAFcAC0NKQQAKAQCBC0OBCktDTEEACgEAgQtDgQxASgAQYBnAV4uDQFeAAQdDAAEAV4ALQ0pBAAoBAIELQ4EKS0NMQQAKAQCBC0OBDEBKABBgI8AKS0NKQQcDAQpAC0NLQQAKAQCBC0OBC0tDTMEACgEAgQtDgQzLQ0mBAAoBAIELQ4EJgEoAC2AYwAxLQ0xBBwMBDEALQ0tBAAoBAIELQ4ELS0NMwQAKAQCBC0OBDMtDSYEACgEAgQtDgQmASgALYBlAEEtDUEEHAwEQQAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAtgGcBYC4NAWAABB0MAAQBYAAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAtgI8BYi4NAWIABB0MAAQBYgAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAtABkBYy4NAWMABB0MAAQBYwAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAtABsBZi4NAWYABB0MAAQBZgAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAtAB0BaC4NAWgABB0MAAQBaAAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAtgJwBai4NAWoABB0MAAQBagAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAtgJ0BbC4NAWwABB0MAAQBbAAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAtgJ4Bbi4NAW4ABB0MAAQBbgAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAtgJ8BcC4NAXAABB0MAAQBcAAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAtgKABci4NAXIABB0MAAQBcgAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAtgIQBdC4NAXQABB0MAAQBdAAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAtgJMBdi4NAXYABB0MAAQBdgAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAtgKEBeC4NAXgABB0MAAQBeAAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAtgJIBei4NAXoABB0MAAQBegAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAtACgBfC4NAXwABB0MAAQBfAAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAtACoBfi4NAX4ABB0MAAQBfgAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAtACwBgC4NAYAABB0MAAQBgAAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAtAC4Bgi4NAYIABB0MAAQBggAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAtADABhC4NAYQABB0MAAQBhAAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAtADIBhi4NAYYABB0MAAQBhgAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAtADQBiC4NAYgABB0MAAQBiAAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAtADYBii4NAYoABB0MAAQBigAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAtADgBjC4NAYwABB0MAAQBjAAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAtADoBji4NAY4ABB0MAAQBjgAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAtADwBkC4NAZAABB0MAAQBkAAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAtAD4Bki4NAZIABB0MAAQBkgAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAtAEABlC4NAZQABB0MAAQBlAAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAtgKMBli4NAZYABB0MAAQBlgAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAtgKUBmC4NAZgABB0MAAQBmAAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAtgKcBmi4NAZoABB0MAAQBmgAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAzgGMBnC4NAZwABB0MAAQBnAAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAzgGUBni4NAZ4ABB0MAAQBngAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAzgGcBoC4NAaAABB0MAAQBoAAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAzgI8Boi4NAaIABB0MAAQBogAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAzABkBoy4NAaMABB0MAAQBowAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAzABsBpi4NAaYABB0MAAQBpgAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAzAB0BqC4NAagABB0MAAQBqAAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAzgJwBqi4NAaoABB0MAAQBqgAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAzgJ0Bqy4NAasABB0MAAQBqwAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAzgJ4Bri4NAa4ABB0MAAQBrgAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAzgJ8BsC4NAbAABB0MAAQBsAAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAzgKABsi4NAbIABB0MAAQBsgAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAzgIQBsy4NAbMABB0MAAQBswAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAzgJMBti4NAbYABB0MAAQBtgAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAzgKEBuC4NAbgABB0MAAQBuAAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAzgJIBui4NAboABB0MAAQBugAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAzACgBvC4NAbwABB0MAAQBvAAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAzACoBvi4NAb4ABB0MAAQBvgAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAzACwBwC4NAcAABB0MAAQBwAAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAzAC4Bwi4NAcIABB0MAAQBwgAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAzADABxC4NAcQABB0MAAQBxAAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAzADIBxi4NAcYABB0MAAQBxgAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAzADQByC4NAcgABB0MAAQByAAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAzADYByi4NAcoABB0MAAQBygAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAzADgBzC4NAcwABB0MAAQBzAAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAzADoBzi4NAc4ABB0MAAQBzgAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAzADwB0C4NAdAABB0MAAQB0AAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAzAD4B0i4NAdIABB0MAAQB0gAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAzAEAB1C4NAdQABB0MAAQB1AAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAzgKMB1i4NAdYABB0MAAQB1gAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAzgKUB2C4NAdgABB0MAAQB2AAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAzgKcB2i4NAdoABB0MAAQB2gAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAmgGMB3C4NAdwABB0MAAQB3AAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAmgGUB3i4NAd4ABB0MAAQB3gAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAmgGcB4C4NAeAABB0MAAQB4AAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAmgI8B4i4NAeIABB0MAAQB4gAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAmABkB4y4NAeMABB0MAAQB4wAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAmABsB5i4NAeYABB0MAAQB5gAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAmAB0B6C4NAegABB0MAAQB6AAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAmgJwB6i4NAeoABB0MAAQB6gAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAmgJ0B7C4NAewABB0MAAQB7AAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAmgJ4B7i4NAe4ABB0MAAQB7gAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAmgJ8B8C4NAfAABB0MAAQB8AAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAmgKAB8i4NAfIABB0MAAQB8gAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAmgIQB8y4NAfMABB0MAAQB8wAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAmgJMB9i4NAfYABB0MAAQB9gAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAmgKEB+C4NAfgABB0MAAQB+AAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAmgJIB+i4NAfoABB0MAAQB+gAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAmACgB/C4NAfwABB0MAAQB/AAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAmACoB/S4NAf0ABB0MAAQB/QAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAmACwCAC4NAgAABB0MAAQCAAAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAmAC4CAi4NAgIABB0MAAQCAgAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAmADACBC4NAgQABB0MAAQCBAAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAmADICBS4NAgUABB0MAAQCBQAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAmADQCCC4NAggABB0MAAQCCAAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAmADYCCi4NAgoABB0MAAQCCgAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAmADgCDC4NAgwABB0MAAQCDAAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAmADoCDi4NAg4ABB0MAAQCDgAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAmADwCEC4NAhAABB0MAAQCEAAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAmAD4CEi4NAhIABB0MAAQCEgAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBOAAmAEACFC4NAhQABB0MAAQCFAAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAmgKMCFi4NAhYABB0MAAQCFgAtDS0EACgEAgQtDgQtLQ0zBAAoBAIELQ4EMy0NJgQAKAQCBC0OBCYBKAAmgKUCGC4NAhgABB0MAAQCGAAtDS0EACgEAgQtDgQtLQ0zBAAo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Lg4AJAI8ASgCPAACAjwuDgCIAjwBKAI8AAICPC4OAIoCPAEoAjwAAgI8Lg4AjAI8ASgCPAACAjwuDgBMAjwBKAI8AAICPC4OAI4CPAEoAjwAAgI8Lg4AkAI8ASgCPAACAjwuDgCSAjwBKAI8AAICPC4OAE4CPAEoAjwAAgI8Lg4AlAI8ASgCPAACAjwuDgCWAjwBKAI8AAICPC4OAJgCPAEoAjwAAgI8Lg4AIgI8ASgCPAACAjwuDgCaAjwBKAI8AAICPC4OAJwCPAEoAjwAAgI8Lg4AngI8ASgCPAACAjwuDgCgAjwBKAI8AAICPC4OAKICPAEoAjwAAgI8Lg4AowI8ASgCPAACAjwuDgCmAjwBKAI8AAICPC4OAKgCPAEoAjwAAgI8Lg4AqgI8ASgCPAACAjwuDgCsAjwBKAI8AAICPC4OAK4CPAEoAjwAAgI8Lg4AsAI8ASgCPAACAjwuDgCyAjwBKAI8AAICPC4OALQCPAEoAjwAAgI8Lg4AtgI8ASgCPAACAjwuDgC4AjwBKAI8AAICPC4OALoCPAEoAjwAAgI8Lg4AvAI8ASgCPAACAjwuDgC+AjwBKAI8AAICPC4OAMACPAEoAjwAAgI8Lg4AwgI8ASgCPAACAjwuDgDEAjwBKAI8AAICPC4OAMYCPAEoAjwAAgI8Lg4AyAI8ASgCPAACAjwuDgDKAjwBKAI8AAICPC4OAMwCPAEoAjwAAgI8Lg4AzgI8ASgCPAACAjwuDgDQAjwBKAI8AAICPC4OANICPAEoAjwAAgI8Lg4A1AI8ASgCPAACAjwuDgDWAjwBKAI8AAICPC4OANgCPAEoAjwAAgI8Lg4A2gI8ASgCPAACAjwuDgDcAjwBKAI8AAICPC4OAN4CPAEoAjwAAgI8Lg4A4AI8ASgCPAACAjwuDgDiAjwBKAI8AAICPC4OAOMCPAEoAjwAAgI8Lg4A5gI8ASgCPAACAjwuDgDoAjwBKAI8AAICPC4OAOoCPAEoAjwAAgI8Lg4A7AI8ASgCPAACAjwuDgDuAjwBKAI8AAICPC4OAPACPAEoAjwAAgI8Lg4A8gI8ASgCPAACAjwuDgD0AjwBKAI8AAICPC4OAPYCPAEoAjwAAgI8Lg4A+AI8ASgCPAACAjwuDgD6AjwBKAI8AAICPC4OAPwCPAEoAjwAAgI8Lg4A/gI8ASgCPAACAjwuDgEAAjwBKAI8AAICPC4OAQICPAEoAjwAAgI8Lg4BBAI8ASgCPAACAjwuDgEGAjwBKAI8AAICPC4OAQgCPAEoAjwAAgI8Lg4BCgI8ASgCPAACAjwuDgEMAjwBKAI8AAICPC4OAQ4CPAEoAjwAAgI8Lg4BEAI8ASgCPAACAjwuDgESAjwBKAI8AAICPC4OARQCPAEoAjwAAgI8Lg4BFgI8ASgCPAACAjwuDgEYAjwBKAI8AAICPC4OARoCPAEoAjwAAgI8Lg4BHAI8ASgCPAACAjwuDgEeAjwBKAI8AAICPC4OASACPAEoAjwAAgI8Lg4BIgI8ASgCPAACAjwuDgEjAjwBKAI8AAICPC4OASYCPAEoAjwAAgI8Lg4BKAI8ASgCPAACAjwuDgEqAjwBKAI8AAICPC4OASwCPAEoAjwAAgI8Lg4BLgI8ASgCPAACAjwuDgEwAjwBKAI8AAICPC4OATICPAEoAjwAAgI8Lg4BNAI8ASgCPAACAjwuDgE2AjwBKAI8AAICPC4OATgCPAEoAjwAAgI8Lg4BOgI8ASgCPAACAjwuDgE8AjwBKAI8AAICPC4OAT4CPAEoAjwAAgI8Lg4BQAI8ASgCPAACAjwuDgFCAjwBKAI8AAICPC4OAUQCPAEoAjwAAgI8Lg4BRgI8ASgCPAACAjwuDgFIAjwBKAI8AAICPC4OAUoCPAEoAjwAAgI8Lg4BTAI8ASgCPAACAjwuDgFOAjwBKAI8AAICPC4OAVACPAEoAjwAAgI8Lg4BUgI8ASgCPAACAjwuDgFUAjwBKAI8AAICPC4OAVYCPAEoAjwAAgI8Lg4BWAI8ASgCPAACAjwuCoCWAjwBKAI8AAICPC4KgJYCPAEoAjwAAgI8LgqAlgI8ASgCPAACAjwuCoCWAjwBKAI8AAICPC4KgJYCPAEoAjwAAgI8LgqAlgI8ASgCPAACAjwuCoCWAjwBKAI8AAICPC4KgJYCPAEoAjwAAgI8LgqAlgI8ASgCPAACAjwuCoCWAjwBKAI8AAICPC4KgJYCPAEoAjwAAgI8LgqAlgI8ASgCPAACAjwuCoCWAjwBKAI8AAICPC4KgJYCPAEoAjwAAgI8LgqAlgI8ASgCPAACAjwuCoCWAjwBKAI8AAICPC4KgJYCPAEoAjwAAgI8LgqAlgI8ASgCPAACAjwuCoCWAjwBKAI8AAICPC4KgJYCPAEoAjwAAgI8LgqAlgI8ASgCPAACAjwuCoCWAjwBKAI8AAICPC4KgJYCPAEoAjwAAgI8LgqAlgI8ASgCPAACAjwuCoCWAjwBKAI8AAICPC4KgJYCPAEoAjwAAgI8LgqAlgI8ASgCPAACAjwuCoCWAjwBKAI8AAICPC4KgJYCPAEoAjwAAgI8LgqAlgI8ASgCPAACAjwuCoCWAjwBKAI8AAICPC4KgJYCPAEoAjwAAgI8Lg4BWgI8ASgCPAACAjwuDgFcAjwBKAI8AAICPC4OAV4CPAEoAjwAAgI8Lg4AKQI8ASgCPAACAjwuDgAxAjwBKAI8AAICPC4OAEECPAEoAjwAAgI8Lg4BYAI8ASgCPAACAjwuDgFiAjwBKAI8AAICPC4OAWMCPAEoAjwAAgI8Lg4BZgI8ASgCPAACAjwuDgFoAjwBKAI8AAICPC4OAWoCPAEoAjwAAgI8Lg4BbAI8ASgCPAACAjwuDgFuAjwBKAI8AAICPC4OAXACPAEoAjwAAgI8Lg4BcgI8ASgCPAACAjwuDgF0AjwBKAI8AAICPC4OAXYCPAEoAjwAAgI8Lg4BeAI8ASgCPAACAjwuDgF6AjwBKAI8AAICPC4OAXwCPAEoAjwAAgI8Lg4BfgI8ASgCPAACAjwuDgGAAjwBKAI8AAICPC4OAYICPAEoAjwAAgI8Lg4BhAI8ASgCPAACAjwuDgGGAjwBKAI8AAICPC4OAYgCPAEoAjwAAgI8Lg4BigI8ASgCPAACAjwuDgGMAjwBKAI8AAICPC4OAY4CPAEoAjwAAgI8Lg4BkAI8ASgCPAACAjwuDgGSAjwBKAI8AAICPC4OAZQCPAEoAjwAAgI8Lg4BlgI8ASgCPAACAjwuDgGYAjwBKAI8AAICPC4OAZoCPAEoAjwAAgI8Lg4BnAI8ASgCPAACAjwuDgGeAjwBKAI8AAICPC4OAaACPAEoAjwAAgI8Lg4BogI8ASgCPAACAjwuDgGjAjwBKAI8AAICPC4OAaYCPAEoAjwAAgI8Lg4BqAI8ASgCPAACAjwuDgGqAjwBKAI8AAICPC4OAasCPAEoAjwAAgI8Lg4BrgI8ASgCPAACAjwuDgGwAjwBKAI8AAICPC4OAbICPAEoAjwAAgI8Lg4BswI8ASgCPAACAjwuDgG2AjwBKAI8AAICPC4OAbgCPAEoAjwAAgI8Lg4BugI8ASgCPAACAjwuDgG8AjwBKAI8AAICPC4OAb4CPAEoAjwAAgI8Lg4BwAI8ASgCPAACAjwuDgHCAjwBKAI8AAICPC4OAcQCPAEoAjwAAgI8Lg4BxgI8ASgCPAACAjwuDgHIAjwBKAI8AAICPC4OAcoCPAEoAjwAAgI8Lg4BzAI8ASgCPAACAjwuDgHOAjwBKAI8AAICPC4OAdACPAEoAjwAAgI8Lg4B0gI8ASgCPAACAjwuDgHUAjwBKAI8AAICPC4OAdYCPAEoAjwAAgI8Lg4B2AI8ASgCPAACAjwuDgHaAjwBKAI8AAICPC4OAdwCPAEoAjwAAgI8Lg4B3gI8ASgCPAACAjwuDgHgAjwBKAI8AAICPC4OAeICPAEoAjwAAgI8Lg4B4wI8ASgCPAACAjwuDgHmAjwBKAI8AAICPC4OAegCPAEoAjwAAgI8Lg4B6gI8ASgCPAACAjwuDgHsAjwBKAI8AAICPC4OAe4CPAEoAjwAAgI8Lg4B8AI8ASgCPAACAjwuDgHyAjwBKAI8AAICPC4OAfMCPAEoAjwAAgI8Lg4B9gI8ASgCPAACAjwuDgH4AjwBKAI8AAICPC4OAfoCPAEoAjwAAgI8Lg4B/AI8ASgCPAACAjwuDgH9AjwBKAI8AAICPC4OAgACPAEoAjwAAgI8Lg4CAgI8ASgCPAACAjwuDgIEAjwBKAI8AAICPC4OAgUCPAEoAjwAAgI8Lg4CCAI8ASgCPAACAjwuDgIKAjwBKAI8AAICPC4OAgwCPAEoAjwAAgI8Lg4CDgI8ASgCPAACAjwuDgIQAjwBKAI8AAICPC4OAhICPAEoAjwAAgI8Lg4CFAI8ASgCPAACAjwuDgIWAjwBKAI8AAICPC4OAhgCPAEoAjwAAgI8Lg4CGgI8ASgCPAACAjwuDgIcAjwBKAI8AAICPC4OAh4CPAEoAjwAAgI8Lg4CIAI8ASgCPAACAjwuDgAmAjwBKAI8AAICPC4OAhwCPAEoAjwAAgI8Lg4CHgI8ASgCPAACAjwuDgIgAjwBKAI8AAICPC4OACYCPAEoAjwAAgI8Lg4ALQI8ASgCPAACAjwuDgAzAjwBKAI8AAICPC4OAEoCPAEoAjwAAgI8Lg4CIgI8ASgCPAACAjwuDgAZAjwBKAI8AAICPC4OABsCPAEoAjwAAgI8Lg4AHQI8ASgCPAACAjwuDgIkAjwBKAI8AAICPC4OAiYCPAEoAjwAAgI8Lg4CKAI8ASgCPAACAjwuDgIqAjwBKAI8AAICPC4OAiwCPAEoAjwAAgI8Lg4CLgI8ASgCPAACAjwuDgIwAjwBKAI8AAICPC4OAjICPAEoAjwAAgI8Lg4CNAI8ASgCPAACAjwuDgAoAjwBKAI8AAICPC4OACoCPAEoAjwAAgI8Lg4ALAI8ASgCPAACAjwuDgAuAjwBKAI8AAICPC4OADACPAEoAjwAAgI8Lg4AMgI8ASgCPAACAjwuDgA0AjwBKAI8AAICPC4OADYCPAEoAjwAAgI8Lg4AOAI8ASgCPAACAjwuDgA6AjwBKAI8AAICPC4OADwCPAEoAjwAAgI8Lg4APgI8ASgCPAACAjwuDgBAAjwBKAI8AAICPC4OAjYCPAEoAjwAAgI8Lg4COAI8ASgCPAACAjwuDgI6AjwBKAI8AAICPC4OABYCPAEoAjwAAgI8Lg4AGAI8ASgCPAACAjwuDgAcAjwBKAI8AAICPC4OAB8CPAEoAjwAAgI8Lg4AIQI8ASgCPAACAjwuDgAjAjwBKAI8AAICPC4OACUCPAEoAjwAAgI8Lg4AJwI8ASgCPAACAjwuDgArAjwBKAI8AAICPC4OAC8CPAEoAjwAAgI8Lg4ANQI8ASgCPAACAjwuDgA3AjwBKAI8AAICPC4OADsCPAEoAjwAAgI8Lg4APwI8ASgCPAACAjwuDgBCAjwBKAI8AAICPC4OAEQCPAEoAjwAAgI8Lg4ARwI8ASgCPAACAjwuDgBJAjwBKAI8AAICPC4OAEsCPAEoAjwAAgI8Lg4ATQI8ASgCPAACAjwuDgBPAjwBKAI8AAICPC4OAFECPAEoAjwAAgI8Lg4AVAI8ASgCPAACAjwuDgBVAjwBKAI8AAICPC4OAFcCPAEoAjwAAgI8Lg4AWQI8ASgCPAACAjwuDgBbAjwBKAI8AAICPC4OAF0CPAEoAjwAAgI8Lg4AXwI8ASgCPAACAjwuDgBhAjwBKAI8AAICPC4OAGQCPAEoAjwAAgI8Lg4AZgI8ASgCPAACAjwuDgBnAjwBKAI8AAICPC4OAGkCPAEoAjwAAgI8Lg4AawI8ASgCPAACAjwuDgBtAjwBKAI8AAICPC4OAG8CPAEoAjwAAgI8Lg4AcQI8ASgCPAACAjwuDgBzAjwBKAI8AAICPC4OAHUCPAEoAjwAAgI8Lg4AdwI8ASgCPAACAjwuDgB5AjwBKAI8AAICPC4OAHsCPAEoAjwAAgI8Lg4AfQI8ASgCPAACAjwuDgB/AjwBKAI8AAICPC4OAIECPAEoAjwAAgI8Lg4AgwI8ASgCPAACAjwuDgCFAjwBKAI8AAICPC4OAIcCPAEoAjwAAgI8Lg4AiQI8ASgCPAACAjwuDgCLAjwBKAI8AAICPC4OAI0CPAEoAjwAAgI8Lg4AjwI8ASgCPAACAjwuDgCRAjwBKAI8AAICPC4OAJMCPAEoAjwAAgI8Lg4AlQI8ASgCPAACAjwuDgCXAjwBKAI8AAICPC4OAJkCPAEoAjwAAgI8Lg4AmwI8ASgCPAACAjwuDgCdAjwBKAI8AAICPC4OAJ8CPAEoAjwAAgI8Lg4AoQI8ASgCPAACAjwuDgCkAjwBKAI8AAICPC4OAKUCPAEoAjwAAgI8Lg4ApwI8ASgCPAACAjwuDgCpAjwBKAI8AAICPC4OAKsCPAEoAjwAAgI8Lg4ArQI8ASgCPAACAjwuDgCvAjwBKAI8AAICPC4OALECPAEoAjwAAgI8Lg4AswI8ASgCPAACAjwuDgC1AjwBKAI8AAICPC4OALcCPAEoAjwAAgI8Lg4AuQI8ASgCPAACAjwuDgC7AjwBKAI8AAICPC4OAL0CPAEoAjwAAgI8Lg4AvwI8ASgCPAACAjwuDgDBAjwBKAI8AAICPC4OAMMCPAEoAjwAAgI8Lg4AxQI8ASgCPAACAjwuDgDHAjwBKAI8AAICPC4OAMkCPAEoAjwAAgI8Lg4AywI8ASgCPAACAjwuDgDNAjwBKAI8AAICPC4OAM8CPAEoAjwAAgI8Lg4A0QI8ASgCPAACAjwuDgDTAjwBKAI8AAICPC4OANUCPAEoAjwAAgI8Lg4A1wI8ASgCPAACAjwuDgDZAjwBKAI8AAICPC4OANsCPAEoAjwAAgI8Lg4A3QI8ASgCPAACAjwuDgDfAjwBKAI8AAICPC4OAOECPAEoAjwAAgI8Lg4A5AI8ASgCPAACAjwuDgDlAjwBKAI8AAICPC4OAOcCPAEoAjwAAgI8Lg4A6QI8ASgCPAACAjwuDgDrAjwBKAI8AAICPC4OAO0CPAEoAjwAAgI8Lg4A7wI8ASgCPAACAjwuDgDxAjwBKAI8AAICPC4OAPMCPAEoAjwAAgI8Lg4A9QI8ASgCPAACAjwuDgD3AjwBKAI8AAICPC4OAPkCPAEoAjwAAgI8Lg4A+wI8ASgCPAACAjwuDgD9AjwBKAI8AAICPC4OAP8CPAEoAjwAAgI8Lg4BAQI8ASgCPAACAjwuDgEDAjwBKAI8AAICPC4OAQUCPAEoAjwAAgI8Lg4BBwI8ASgCPAACAjwuDgEJAjwBKAI8AAICPC4OAQsCPAEoAjwAAgI8Lg4BDQI8ASgCPAACAjwuDgEPAjwBKAI8AAICPC4OARECPAEoAjwAAgI8Lg4BEwI8ASgCPAACAjwuDgEVAjwBKAI8AAICPC4OARcCPAEoAjwAAgI8Lg4BGQI8ASgCPAACAjwuDgEbAjwBKAI8AAICPC4OAR0CPAEoAjwAAgI8Lg4BHwI8ASgCPAACAjwuDgEhAjwBKAI8AAICPC4OASQCPAEoAjwAAgI8Lg4BJQI8ASgCPAACAjwuDgEnAjwBKAI8AAICPC4OASkCPAEoAjwAAgI8Lg4BKwI8ASgCPAACAjwuDgEtAjwBKAI8AAICPC4OAS8CPAEoAjwAAgI8Lg4BMQI8ASgCPAACAjwuDgEzAjwBKAI8AAICPC4OATUCPAEoAjwAAgI8Lg4BNwI8ASgCPAACAjwuDgE5AjwBKAI8AAICPC4OATsCPAEoAjwAAgI8Lg4BPQI8ASgCPAACAjwuDgE/AjwBKAI8AAICPC4OAUECPAEoAjwAAgI8Lg4BQwI8ASgCPAACAjwuDgFFAjwBKAI8AAICPC4OAUcCPAEoAjwAAgI8Lg4BSQI8ASgCPAACAjwuDgFLAjwBKAI8AAICPC4OAU0CPAEoAjwAAgI8Lg4BTwI8ASgCPAACAjwuDgFRAjwBKAI8AAICPC4OAVMCPAEoAjwAAgI8Lg4BVQI8ASgCPAACAjwuDgFXAjwBKAI8AAICPC4OAVkCPAEoAjwAAgI8Lg4BWwI8ASgCPAACAjwuDgFdAjwBKAI8AAICPC4OAV8CPAEoAjwAAgI8Lg4BYQI8ASgCPAACAjwuDgFkAjwBKAI8AAICPC4OAWUCPAEoAjwAAgI8Lg4BZwI8ASgCPAACAjwuDgFpAjwBKAI8AAICPC4OAWsCPAEoAjwAAgI8Lg4BbQI8ASgCPAACAjwuDgFvAjwBKAI8AAICPC4OAXECPAEoAjwAAgI8Lg4BcwI8ASgCPAACAjwuDgF1AjwBKAI8AAICPC4OAXcCPAEoAjwAAgI8Lg4BeQI8ASgCPAACAjwuDgF7AjwBKAI8AAICPC4OAX0CPAEoAjwAAgI8Lg4BfwI8ASgCPAACAjwuDgGBAjwBKAI8AAICPC4OAYMCPAEoAjwAAgI8Lg4BhQI8ASgCPAACAjwuDgGHAjwBKAI8AAICPC4OAYkCPAEoAjwAAgI8Lg4BiwI8ASgCPAACAjwuDgGNAjwBKAI8AAICPC4OAY8CPAEoAjwAAgI8Lg4BkQI8ASgCPAACAjwuDgGTAjwBKAI8AAICPC4OAZUCPAEoAjwAAgI8Lg4BlwI8ASgCPAACAjwuDgGZAjwBKAI8AAICPC4OAZsCPAEoAjwAAgI8Lg4BnQI8ASgCPAACAjwuDgGfAjwBKAI8AAICPC4OAaECPAEoAjwAAgI8Lg4BpAI8ASgCPAACAjwuDgGlAjwBKAI8AAICPC4OAacCPAEoAjwAAgI8Lg4BqQI8ASgCPAACAjwuDgGsAjwBKAI8AAICPC4OAa0CPAEoAjwAAgI8Lg4BrwI8ASgCPAACAjwuDgGxAjwBKAI8AAICPC4OAbQCPAEoAjwAAgI8Lg4BtQI8ASgCPAACAjwuDgG3AjwBKAI8AAICPC4OAbkCPAEoAjwAAgI8Lg4BuwI8ASgCPAACAjwuDgG9AjwBKAI8AAICPC4OAb8CPAEoAjwAAgI8Lg4BwQI8ASgCPAACAjwuDgHDAjwBKAI8AAICPC4OAcUCPAEoAjwAAgI8Lg4BxwI8ASgCPAACAjwuDgHJAjwBKAI8AAICPC4OAcsCPAEoAjwAAgI8Lg4BzQI8ASgCPAACAjwuDgHPAjwBKAI8AAICPC4OAdECPAEoAjwAAgI8Lg4B0wI8ASgCPAACAjwuDgHVAjwBKAI8AAICPC4OAdcCPAEoAjwAAgI8Lg4B2QI8ASgCPAACAjwuDgHbAjwBKAI8AAICPC4OAd0CPAEoAjwAAgI8Lg4B3wI8ASgCPAACAjwuDgHhAjwBKAI8AAICPC4OAeQCPAEoAjwAAgI8Lg4B5QI8ASgCPAACAjwuDgHnAjwBKAI8AAICPC4OAekCPAEoAjwAAgI8Lg4B6wI8ASgCPAACAjwuDgHtAjwBKAI8AAICPC4OAe8CPAEoAjwAAgI8Lg4B8QI8ASgCPAACAjwuDgH0AjwBKAI8AAICPC4OAfUCPAEoAjwAAgI8Lg4B9wI8ASgCPAACAjwuDgH5AjwBKAI8AAICPC4OAfsCPAEoAjwAAgI8Lg4B/gI8ASgCPAACAjwuDgH/AjwBKAI8AAICPC4OAgECPAEoAjwAAgI8Lg4CAwI8ASgCPAACAjwuDgIGAjwBKAI8AAICPC4OAgcCPAEoAjwAAgI8Lg4CCQI8ASgCPAACAjwuDgILAjwBKAI8AAICPC4OAg0CPAEoAjwAAgI8Lg4CDwI8ASgCPAACAjwuDgIRAjwBKAI8AAICPC4OAhMCPAEoAjwAAgI8Lg4CFQI8ASgCPAACAjwuDgIXAjwBKAI8AAICPC4OAhkCPAEoAjwAAgI8Lg4CGwI8ASgCPAACAjwuDgIdAjwBKAI8AAICPC4OAh8CPAEoAjwAAgI8Lg4CIQI8ASgCPAACAjwuDgIjAjwBKAI8AAICPC4OAiUCPAEoAjwAAgI8Lg4CJwI8ASgCPAACAjwuDgIpAjwBKAI8AAICPC4OAisCPAEoAjwAAgI8Lg4CLQI8ASgCPAACAjwuDgIvAjwBKAI8AAICPC4OAjECPAEoAjwAAgI8Lg4CMwI8ASgCPAACAjwuDgI1AjwBKAI8AAICPC4OAjcCPAEoAjwAAgI8Lg4COQI8ASgCPAACAjwuDgI7AjwBKAI8AAICPC4OAj4CPAEoAjwAAgI8Lg4CPwI8ASgCPAACAjwuDgJCAjwBKAI8AAICPC4OAkMCPAEoAjwAAgI8Lg4CRQI8ASgCPAACAjwuDgJHAjwBKAI8AAICPC4OAkkCPAEoAjwAAgI8Lg4CSwI8ASgCPAACAjwuDgJNAjwBKAI8AAICPC4OAk8CPAEoAjwAAgI8Lg4CUQI8ASgCPAACAjwuDgJTAjwBKAI8AAICPC4OAlUCPAEoAjwAAgI8Lg4CVwI8ASgCPAACAjwuDgJZAjwBKAI8AAICPC4OAlsCPAEoAjwAAgI8Lg4CXQI8ASgCPAACAjwuDgJfAjwBKAI8AAICPC4OAmECPAEoAjwAAgI8Lg4CYwI8ASgCPAACAjwuDgJlAjwBKAI8AAICPC4OAmcCPAEoAjwAAgI8Lg4CaQI8ASgCPAACAjwuDgJrAjwBKAI8AAICPC4OAm0CPAEoAjwAAgI8Lg4CbwI8ASgCPAACAjwuDgJxAjwBKAI8AAICPC4OAnMCPAEoAjwAAgI8Lg4CdQI8ASgCPAACAjwuDgJ3AjwBKAI8AAICPC4OAnkCPAEoAjwAAgI8Lg4CewI8ASgCPAACAjwuDgJ+AjwBKAI8AAICPC4OABQCPCcCGQRGLQgARi0MIEctDARIABAAGQAlAAEGXi0EAAAtDEcULQxIFS0MSRYtDEoYLQ0UBAAoBAIELQ4EFC0NFQQAKAQCBC0OBBUtDRYEACgEAgQtDgQWLQ0YBAAoBAIELQ4EGCcCGQRGLQgARi0MFEctDBVIABAAGQAlAAEI8C0EAAAtDEcEJwIUBEYtCABGLQwXRy0MGkgtDB5JLQwESgAQABQAJQABDdotBAAAJwIUBEYtCABGLQwWRy0MGEgAEAAUACUAAQ9GLQQAAC0MRwQnAhQERi0IAEYtDBdHLQwaSC0MHkktDARKABAAFAAlAAEUMC0EAAAAKAICFS0NFRQnAhYEAgA4FRYEOw0ABAAUIwAAsQUpAgAEAE7w9pwKOAEEFC0NAgQAKAQCBC0OBAInAgQCaycCFQJvJwIWAmgnAhcCZC0IARgnAhkEFAAQARkBJwMYBAEAKBgCGS0MGRotDg4aACgaAhotDgUaACgaAhotDhYaACgaAhotDgwaACgaAhotDgUaACgaAhotDgQaACgaAhotDg4aACgaAhotDhUaACgaAhotDgsaACgaAhotDhcaACgaAhotDgwaACgaAhotDgsaACgaAhotDg4aACgaAhouCoBHABoAKBoCGi0OBhoAKBoCGi4KgIAAGgAoGgIaLQ4GGgAoGgIaLQ4JGgAoGgIaLgqARwAaLQ0CCQAoCQIJLQ4JAi0NDwkAKAkCCS0OCQ8tDQIJACgJAgktDgkCJwIJABEnAhYADykCABcAcD6GRikCABkAvsW7BCgCABoEAW0kAgAUAACyUyMAALwXLQgBGygCABwEAW4AEAEcAScDGwQBACgbAhwfNIBjABoAHC0NGxwAKBwCHC0OHBstCAEcAAABAgEtDhscLQgBGwAAAQIBLgqAZAAbJwIeBB8tCAAfLQwcIC0MGyEtDBYiABAAHgAlAAEVnC0EAAAtDCAdLQ0dHgAoHgIeLQ4eHScCHwQgLQgAIC0MHCEtDBsiLQwJIwAQAB8AJQABFxAtBAAALQwhHi0NHh8AKB8CHy0OHx4nAiAEIS0IACEtDBwiLQwbIy0MFiQAEAAgACUAARWcLQQAAC0MIh8tDR8bACgbAhstDhsfLQgBGwAAAQIBLgqAlQAbLQgBHAAAAQIBLgqAlgAcLQgBIAAAAQIBKAIAIQABGS0OISAnAiEEIi0IACItDBsjLQwcJC0MICUAEAAhACUAAOxGLQQAACcCIgQjLQgAIy0MHSQAEAAiACUAAPB6LQQAAC0MJCEeAgAiAC0NAiMAKCMCIy0OIwInAiQEAScCJgQDADgkJiUtCAEjABABJQEnAyMEAQAoIwIlLQ4kJQAoJQIlLQ4kJScCJQQDADgjJSQtDCQlLQ4hJS0NIyQAKCQCJC0OJCMnAiUEAicCJwQDADglJyYtCAEkABABJgEnAyQEAQAoJAImLQ4lJgAoJgImLQ4lJicCJgQDADgkJiUtDCUmLQ4hJgAoJgImLgqAlgAmLQ0kJQAoJQIlLQ4lJCcCJgQnLQgAJy0MFygAEAAmACUAAOmqLQQAAC0MKCUtDRgmACgmAiYtDiYYLQ0kJgAoJgImLQ4mJCcCJgQnLQgAJy0MIigtDCUpLQwYKi4IgGUAKy0MJCwuCICVAC0uCICVAC4uCICWAC8uCICVADAuCICWADEtDBsyLQwcMy0MIDQAEAAmACUAARiKLQQAACcCMAQxLQgAMS0MHjIAEAAwACUAAO0jLQQAAC0MMiItDDMkLQw0JS0MNSYtDDYnLQw3KC0MOCktDDkqLQw6Ky0MOywtDDwtLQw9Li0MPi8tDSIwACgwAjAtDjAiLQ0kIgAoIgIiLQ4iJC0NJSIAKCICIi0OIiUtDSYiACgiAiItDiImLQ0nIgAoIgIiLQ4iJy0NKCIAKCICIi0OIigtDSkiACgiAiItDiIpLQ0sIgAoIgIiLQ4iLC0NLyIAKCICIi0OIi8LKAAugGEAIiQCACIAALXQJQAA9Z0nAiUELi0IAC4tDB4vLQwHMAAQACUAJQAA8U4tBAAALQwvIicCJwQuLQgALi0MHS8tDCIwABAAJwAlAADsay0EAAAtDC8lJAIAJQAAtiMlAAEaCh4CACIGHAwiJwQcDCclBRwMJSIEDDgtIiULKAAlgJUAIiQCACIAALZRJQABGhwLKAArgGIAIiQCACIAALZmJQABGi4nAiUEKy0IACstDCYsABAAJQAlAADwei0EAAAtDCwiHgIAJQEnAicEKy0IACstDCQsABAAJwAlAADwei0EAAAtDCwmJwInBCstCAArLQwoLAAQACcAJQABAYgtBAAALQwsJCcCKAQrLQgAKy0MKSwAEAAoACUAAPB6LQQAAC0MLCctDQIoACgoAigtDigCJwIpBAEnAiwEAwA4KSwrLQgBKAAQASsBJwMoBAEAKCgCKy0OKSsAKCsCKy0OKSsnAisEAwA4KCspLQwpKy0OJSsnAisELC0IACwuCIBkAC0tDAIuLgiAYwAvLQwoMAAQACsAJQABAoItBAAALQwtJS0MLiktDSkoACgoAigtDigpJwIrBAEnAi0EAwA4Ky0sLQgBKAAQASwBJwMoBAEAKCgCLC0OKywAKCwCLC0OKywnAiwEAwA4KCwrLQwrLC0OJiwnAiwELS0IAC0tDCUuLQwpLy4IgGMAMC0MKDEAEAAsACUAAQKCLQQAAC0MLiYtDC8rLQ0rJQAoJQIlLQ4lKxwMJCUAACgmAiQuBAArgAMoAIAEBAABJQABA14uCIAFACguCIAGACktDiUpLQ0oJQAoJQIlLQ4lKAAoJAIlLgQAKIADKACABAQAASUAAQNeLgiABQAmLgiABgApLQ4nKS0NJiQAKCQCJC0OJCYnAicEKy0IACstDBEsABAAJwAlAADpqi0EAAAtDCwkLQ0PJwAoJwInLQ4nDy0NJicAKCcCJy0OJyYnAicEKy0IACstDCIsLQwkLS0MDy4tDCUvLQwmMC4IgJUAMS4IgJUAMi4IgJYAMy4IgJUANC4IgJYANS0MGzYtDBw3LQwgOAAQACcAJQABBN4tBAAAJwInBCstCAArLQwbLC0MHC0tDCAuLQwQLy4IgKoAMC0MITEAEAAnACUAAP64LQQAAC0MLCItDC0kLQwuJS0MLyYnAiEEKy0IACstDCIsLQwkLS0MJS4tDCYvLgiAZQAwABAAIQAlAAEBdy0EAAAeAgAhAC0IASIAAAECAS0IASQAAAECAS0NIyUAKCUCJS0OJSMuCoBjACItDiMkJwIlBCstCAArLQwdLC4IgLkALQAQACUAJQABGkAtBAAALQwsIy4IgGQAFCMAALm7DSgAFICnACUkAgAlAADlviMAALnQJwIlBCYtCAAmLQwfJy4IgLoAKAAQACUAJQABGkAtBAAALQwnIy4IgGQAFCMAALoADSgAFICnACUkAgAlAADk0yMAALoVJwIjBCUtCAAlLQwZJgAQACMAJQAA6aotBAAALQwmFC0IASMnAiUEFAAQASUBJwMjBAEAKCMCJS0MJSYtDg4mACgmAiYtDgYmACgmAiYtDgsmACgmAiYtDgomACgmAiYuCoBeACYAKCYCJi4KgF4AJgAoJgImLQ4MJgAoJgImLQ4LJgAoJgImLQ4OJgAoJgImLgqARwAmACgmAiYtDgwmACgmAiYtDgYmACgmAiYtDgYmACgmAiYtDggmACgmAiYtDgwmACgmAiYuCoBwACYAKCYCJi0ODCYAKCYCJi4KgG0AJgAoJgImLQ4GJi0NIgotDSQOLQ0jIgAoIgIiLQ4iIy0NDiIAKCICIi0OIg4nAiIEJC0IACQtDCElLQwUJi0MIyctDAooLQwOKS4IgJUAKi4IgJUAKy4IgJYALC4IgJUALS4IgJYALi0MGy8tDBwwLQwgMQAQACIAJQABGIotBAAALQ0dCgAoCgIKLQ4KHS0NHgoAKAoCCi0OCh4tDR8KACgKAgotDgofJwIOBCEtCAAhLQwdIi0MHiMtDB8kABAADgAlAAEc3S0EAAAtDCIKJwIOBCEtCAAhLQwbIi0MHCMtDCAkLQwKJQAQAA4AJQABDdotBAAALQ0CCgAoCgIKLQ4KAgAoAgIULQ0UDicCGwQCADgUGwo7DQAKAA4jAAC8FykCAAoAeocY2Ao4AQoOJwIKAAMkAgAOAAC8NyMAAMO8LQgBDigCABQEAW4AEAEUAScDDgQBACgOAhQfNIBjABoAFC0NDhQAKBQCFC0OFA4tCAEUAAABAgEtDg4ULQgBDgAAAQIBLgqAZAAOJwIbBBwtCAAcLQwUHS0MDh4tDBYfABAAGwAlAAEVnC0EAAAtDB0aLQ0aGwAoGwIbLQ4bGicCHAQdLQgAHS0MFB4tDA4fLQwJIAAQABwAJQABFxAtBAAALQweGy0NGwkAKAkCCS0OCRsnAhwEHS0IAB0tDBQeLQwOHy0MFiAAEAAcACUAARWcLQQAAC0MHgktDQkOACgOAg4tDg4JLQgBDgAAAQIBLgqAlQAOLQgBFAAAAQIBLgqAlgAULQgBHAAAAQIBJwIdAOotDh0cJwIdBB4tCAAeLQwOHy0MFCAtDBwhABAAHQAlAADsRi0EAAAnAh4EHy0IAB8tDBogABAAHgAlAADwei0EAAAtDCAdHgIAHgAnAiAEAicCIgQDADggIiEtCAEfABABIQEnAx8EAQAoHwIhLQ4gIQAoIQIhLQ4gIScCIQQDADgfISAtDCAhLQ4dIQAoIQIhLgqAlgAhLQ0fIAAoIAIgLQ4gHycCIQQiLQgAIi0MFyMAEAAhACUAAOmqLQQAAC0MIyAtDRghACghAiEtDiEYLQ0fIQAoIQIhLQ4hHycCIQQiLQgAIi0MHiMtDCAkLQwYJS4IgGUAJi0MHycuCICVACguCICVACkuCICWACouCICVACsuCICWACwtDA4tLQwULi0MHC8AEAAhACUAARiKLQQAACcCKgQrLQgAKy0MGywAEAAqACUAAO0jLQQAAC0MLBgtDC0eLQwuHy0MLyAtDDAhLQwxIi0MMiMtDDMkLQw0JS0MNSYtDDYnLQw3KC0MOCktDRgqACgqAiotDioYLQ0eGAAoGAIYLQ4YHi0NHxgAKBgCGC0OGB8tDSAYACgYAhgtDhggLQ0hGAAoGAIYLQ4YIS0NIhgAKBgCGC0OGCItDSMYACgYAhgtDhgjLQ0mGAAoGAIYLQ4YJi0NKRgAKBgCGC0OGCkLKAAogGYAGCQCABgAAL9XJQABIwonAh4EKC0IACgtDBspLQwHKgAQAB4AJQAA8U4tBAAALQwpGCcCHgQoLQgAKC0MGiktDBgqABAAHgAlAADsay0EAAAtDCkHJAIABwAAv6olAAEaCh4CAAcGHAwHHgQcDB4YBRwMGAcEDDgnBxgLKAAYgJUAByQCAAcAAL/YJQABGhwLKAAlgGIAByQCAAcAAL/tJQABIxwnAhgEJS0IACUtDCAmABAAGAAlAADwei0EAAAtDCYHHgIAGAEeAgAeACcCIAQlLQgAJS0MIiYAEAAgACUAAQGILQQAAC0MJh8nAiEEAScCIwQDADghIyItCAEgABABIgEnAyAEAQAoIAIiLQ4hIgAoIgIiLQ4hIicCIgQDADggIiEtDCEiLQ4YIicCIgQlLQgAJS4IgGQAJi0MAicuCIBjACgtDCApABAAIgAlAAECgi0EAAAtDCYYLQwnIS0NISAAKCACIC0OICEnAiIEAScCJQQDADgiJSMtCAEgABABIwEnAyAEAQAoIAIjLQ4iIwAoIwIjLQ4iIycCIwQDADggIyItDCIjLQ4eIycCIwQlLQgAJS0MGCYtDCEnLgiAYwAoLQwgKQAQACMAJQABAoItBAAALQwmHi0MJyItDSIYACgYAhgtDhgiHAwfGAAAKB4CHy4EACKAAygAgAQEAAElAAEDXi4IgAUAIC4IgAYAIS0OGCEtDSAYACgYAhgtDhggACgfAhguBAAggAMoAIAEBAABJQABA14uCIAFAB4uCIAGACEuCoCWACEtDR4fACgfAh8tDh8eJwIgBCUtCAAlLQwRJgAQACAAJQAA6aotBAAALQwmHy0NDxEAKBECES0OEQ8tDR4RACgRAhEtDhEeJwIRBCUtCAAlLQwHJi0MHyctDA8oLQwYKS0MHiouCICVACsuCICVACwuCICWAC0uCICVAC4uCICWAC8tDA4wLQwUMS0MHDIAEAARACUAAQTeLQQAACcCHgQlLQgAJS0MDiYtDBQnLQwcKC0MCikuCICoACotDB0rABAAHgAlAAEjLi0EAAAtDCYHLQwnDy0MKBEtDCkYJwIfBCUtCAAlLQwbJi0MCScAEAAfACUAASXtLQQAAC0MJh4nAiAEJS0IACUtDB4mABAAIAAlAAEnky0EAAAtDCYfMAwAHwAYJwIhBCUtCAAlLQwOJi0MFCctDBwoLQwQKS4IgKoAKi0MHSsAEAAhACUAAP64LQQAAC0MJhgtDCceLQwoHy0MKSAnAh0EJS0IACUtDBgmLQweJy0MHygtDCApLgiAZwAqABAAHQAlAAEBdy0EAAAtDRoYACgYAhgtDhgaLQ0bGAAoGAIYLQ4YGy0NCRgAKBgCGC0OGAknAh0EJS0IACUtDBomLQwbJy0MCSgAEAAdACUAARzdLQQAAC0MJhgnAgkEJS0IACUtDA4mLQwUJy0MHCgtDBgpABAACQAlAAEN2i0EAAAAKAICFC0NFA4nAhgEAgA4FBgJOw0ACQAOIwAAw7wpAgAHALaPNzgKOAEHCSQCAAkAAMPXIwAAxbAtCAEHJwIJBCEAEAEJAScDBwQBACgHAgkfJIBjgKcACS0NBwkAKAkCCS0OCQctCAEJAAABAgEtDgcJLQgBBwAAAQIBLgqAZAAHJwIPBBotCAAaLQwJGy0MBxwtDBYdABAADwAlAAEn6i0EAAAtDBsOLQ0OBwAoBwIHLQ4HDi0IAQcAAAECAS4KgJUABy0IAQkAAAECAS4KgJYACS0IAQ8AAAECAScCEQDoLQ4RDycCEQQaLQgAGi0MBxstDAkcLQwPHQAQABEAJQAA7EYtBAAAHgIAEQkLKAARgJgAFCQCABQAAMTBJQABKVwnAhQEGi0IABotDA4bABAAFAAlAADwei0EAAAtDBsRJwIbBBwtCAAcLQwHHS0MCR4tDA8fLQwQIC4IgKoAIS0MESIAEAAbACUAAP64LQQAAC0MHQ4tDB4ULQwfGC0MIBonAgkEGy0IABstDA4cLQwUHS0MGB4tDBofABAACQAlAAEpbi0EAAAtDBwHHAwHCQAnAg4EAScCEQQDADgOEQ8tCAEHABABDwEnAwcEAQAoBwIPLQ4ODwAoDwIPLQ4ODycCDwQDADgHDw4tDA4PLQ4JDwAoBwIPLQ0PDicCEQQCADgPEQk7DQAJAA4jAADFsCkCAAcAY/Gj6wo4AQcJJwIHAAckAgAJAADF0CMAAMd/LQgBCScCDgQhABABDgEnAwkEAQAoCQIOHySAY4CnAA4tDQkOACgOAg4tDg4JLQgBDgAAAQIBLQ4JDi0IAQkAAAECAS4KgGQACScCEQQaLQgAGi0MDhstDAkcLQwWHQAQABEAJQABJ+otBAAALQwbDy0NDwkAKAkCCS0OCQ8tCAEJAAABAgEuCoCVAAktCAEOAAABAgEuCoCWAA4tCAERAAABAgEnAhQA3i0OFBEnAhQEGi0IABotDAkbLQwOHC0MER0AEAAUACUAAOxGLQQAAB4CABQJCygAFICYABgkAgAYAADGuiUAASmNJwIYBBotCAAaLQwPGwAQABgAJQAA8HotBAAALQwbFCcCHAQdLQgAHS0MCR4tDA4fLQwRIC0MByEuCICrACItDBQjABAAHAAlAAEjLi0EAAAtDB4PLQwfGC0MIBotDCEbLwwAGwAJJwIRBAEnAhsEAwA4ERsULQgBDgAQARQBJwMOBAEAKA4CFC0OERQAKBQCFC0OERQnAhQEAwA4DhQRLQwRFC0OCRQAKA4CFC0NFBEnAhsEAgA4FBsJOw0ACQARIwAAx38pAgAJAPWl6HkKOAEJDiQCAA4AAMeaIwAAzXstCAEOKAIADwQBMAAQAQ8BJwMOBAEAKA4CDx80gGMADQAPLQ0ODQAoDQINLQ4NDi0IAQ0AAAECAS0ODg0tCAEOAAABAgEuCoBkAA4nAhEEGi0IABotDA0bLQwOHC4IgKQAHQAQABEAJQABKZ8tBAAALQwbDy0IAREoAgAUBAEuABABFAEnAxEEAQAoEQIUKAIAGAQBLQA4GBQYLQwUGgw4GhgbFgwbGyQCABsAAMhZLgqAlgAaACgaAhojAADIOC0IARQAAAECAS0OERQuCIBkAAkjAADIcQ0oAAmAgwARJAIAEQAA5DUjAADIhi0NDREtDQ4YASgAGICDABoOOBgaGyQCABsAAMioJQAA7DQtDhENLQ4aDi0NFBEnAhgEGi0IABotDBEbABAAGAAlAAEqeS0EAAAtDBsULQ0UEQAoEQIRLQ4RFCcCGAQaLQgAGi0MDRstDA4cLgiApAAdABAAGAAlAAEpny0EAAAtDBsRLQgBDQAAAQIBLgqAlQANLQgBDgAAAQIBLgqAlgAOLQgBGAAAAQIBJwIaAMUtDhoYJwIaBBstCAAbLQwNHC0MDh0tDBgeABAAGgAlAADsRi0EAAAeAgAaAR4CABsACjgaGxwkAgAcAADJeCUAASwZHgIAGgEtCAEbJwIcBAMAEAEcAScDGwQBACgbAhwtDBwdLQ4DHQAoHQIdLQ4aHScCHwQgLQgAIC4IgL4AIQAQAB8AJQAA6b8tBAAALQwhGi0MIhwtDCMdLQwkHi0NGh8AKB8CHy0OHxotCAEfAAABAgEtDhofLQ0cGgAoGgIaLQ4aHC0IARoAAAECAS0OHBotCAEcAAABAgEtDh0cLQgBHQAAAQIBLQ4eHS4IgGQACSMAAMosDSgACYBlAB4kAgAeAADjwiMAAMpBJwIeBCAtCAAgLQwfIS0MGiItDBwjLQwdJAAQAB4AJQAA6l8tBAAALQwhGwsoABuAlgAaCygAGoCVABwkAgAcAADKiSUAAPXBJwIfBCAtCAAgLQwNIS0MDiItDBgjLQwbJC4IgKwAJS0MESYAEAAfACUAAPXTLQQAAC0MIRotDCIcLQwjHS0MJB4nAh8EIC0IACAtDBohLQwcIi0MHSMtDB4kABAAHwAlAAD4ki0EAAAtDCEbCygAG4CVABokAgAaAADLCiUAAPixJwIeBB8tCAAfLQwNIC0MDiEtDBgiLgiAmgAjLgiAqQAkLQwPJQAQAB4AJQAA+MMtBAAALQwgGi0MIRstDCIcLQwjHScCHwQgLQgAIC0MFCEAEAAfACUAAPuCLQQAAC0MIR4nAhQEHy0IAB8tDBogLQwbIS0MHCItDB0jLQweJAAQABQAJQAA/VQtBAAAJwIdBB4tCAAeLQwNHy0MDiAtDBghLQwQIi4IgKoAIy0MDyQAEAAdACUAAP64LQQAAC0MHxQtDCAaLQwhGy0MIhwnAg8EHS0IAB0tDBQeLQwaHy0MGyAtDBwhLgiAYwAiABAADwAlAAEBdy0EAAAeAgAPAS0IARQnAhoEAwAQARoBJwMUBAEAKBQCGi0MGhstDgMbACgbAhstDg8bJwIcBB0tCAAdLgiAvgAeABAAHAAlAADpvy0EAAAtDB4DLQwfDy0MIBotDCEbLQ0DHAAoHAIcLQ4cAy0IARwAAAECAS0OAxwtDQ8DACgDAgMtDgMPLQgBAwAAAQIBLQ4PAy0IAQ8AAAECAS0OGg8tCAEaAAABAgEtDhsaLgiAZAAJIwAAzLkNKAAJgGUAGyQCABsAAONPIwAAzM4nAhQEHS0IAB0tDBweLQwDHy0MDyAtDBohABAAFAAlAADqXy0EAAAtDB4JCygACYCWAAMLKAADgJUADyQCAA8AAM0WJQAA9cEnAhsEHC0IABwtDA0dLQwOHi0MGB8tDAkgLgiArAAhLQwRIgAQABsAJQAA9dMtBAAALQwdAy0MHg8tDB8ULQwgGjAIgJgAGgAoAgIOLQ0ODScCEQQCADgOEQk7DQAJAA0jAADNewo4ARcDJAIAAwAAzY0jAADPSC0IAQMnAgkEAwAQAQkBJwMDBAEAKAMCCR8kgGOAZQAJLQ0DCQAoCQIJLQ4JAy0IAQkAAAECAS0OAwktCAEDAAABAgEuCoBkAAMnAg4EGi0IABotDAkbLQwDHC4IgKQAHQAQAA4AJQABLCstBAAALQwbDScCDwQaLQgAGi0MCRstDAMcABAADwAlAAEswy0EAAAtDBsOASgADoBjAAktDQkDHAwDDgQcDA4JABwMCQMELQgBCQAAAQIBLgqAlQAJLQgBDgAAAQIBLgqAlgAOLQgBDwAAAQIBJwIRAMAtDhEPJwIRBBotCAAaLQwJGy0MDhwtDA8dABAAEQAlAADsRi0EAAAeAgARAR4CABQACjgRFBckAgAXAADOrCUAAS08JwIaBBstCAAbLQwJHC0MDh0tDA8eLQwQHy4IgKoAIC0MDSEAEAAaACUAAP64LQQAAC0MHBEtDB0ULQweFy0MHxgnAg0EGi0IABotDBEbLQwUHC0MFx0tDBgeABAADQAlAAEpbi0EAAAtDBsJCjgJAw0kAgANAADPKiUAAS1OACgCAg0tDQ0JJwIOBAIAOA0OAzsNAAMACSMAAM9IKQIAAwCdOh6lCjgBAwkkAgAJAADPYyMAANKCLQgBCSgCAA0EAU8AEAENAScDCQQBACgJAg0fNIBjABIADS0NCQ0AKA0CDS0ODQktCAENAAABAgEtCAEOAAABAgEBKAAJgGMAES0NEQ8tDgkNLgqAYwAOLQgBCSgCABEEAS4AEAERAScDCQQBACgJAhEoAgASBAEtADgSERItDBEUDDgUEhcWDBcXJAIAFwAA0AUuCoCWABQAKBQCFCMAAM/kLQgBEQAAAQIBLQ4JES4IgGQAAyMAANAdDSgAA4CDAAkkAgAJAADisSMAANAyLQ0NCS0NDhIBKAASgIMAFA44EhQXJAIAFwAA0FQlAADsNC0OCQ0tDhQOLQ0RCScCEgQaLQgAGi0MCRsAEAASACUAASp5LQQAAC0MGxEtDREJACgJAgktDgkRLQgBCScCEgQhABABEgEnAwkEAQAoCQISJwIUBCAAOBQSFC0MEhcMOBcUGBYMGBgkAgAYAADQ0y4KgJYAFwAoFwIXIwAA0LItCAESAAABAgEtDgkSLgiAZAADIwAA0OsNKAADgKcACSQCAAkAAOIVIwAA0QAtDQ0DLQ0OCQEoAAmApwAUDjgJFBckAgAXAADRIiUAAOw0LQ4DDS0OFA4tDRIDJwINBBotCAAaLQwDGwAQAA0AJQABLWAtBAAALQwbCS0NCQMAKAMCAy0OAwktCAEDAAABAgEuCoCVAAMtCAENAAABAgEuCoCWAA0tCAEOAAABAgEnAhIArS0OEg4nAhIEGi0IABotDAMbLQwNHC0MDh0AEAASACUAAOxGLQQAAB4CABIBHgIAFAAKOBIUFyQCABcAANHJJQABLvgnAhoEGy0IABstDAMcLQwNHS0MDh4tDAofLgiAqAAgLQwPIQAQABoAJQABIy4tBAAALQwcEi0MHRQtDB4XLQwfGC8MABgAAycCDQQaLQgAGi0MERstDAkcABAADQAlAAEl7S0EAAAtDBsKJwINBBotCAAaLQwKGwAQAA0AJQABJ5MtBAAALQwbCQo4AwkKJAIACgAA0mQlAAEvCgAoAgIKLQ0KCScCDQQCADgKDQM7DQADAAkjAADSgikCAAMAmNVtKAo4AQMJJAIACQAA0p0jAADWpCgCAAkEAoUtCAEKKAIADQQChgAQAQ0BJwMKBAEAKAoCDR80gGMACQANLQ0KCQAoCQIJLQ4JCi0IAQkAAAECAS0OCgktCAEKAAABAgEuCoBkAAotCAENJwIOBCEAEAEOAScDDQQBACgNAg4nAg8EIAA4Dw4PLQwOEQw4EQ8SFgwSEiQCABIAANM2LgqAlgARACgRAhEjAADTFS0IAQ4AAAECAS0ODQ4uCIBkAAMjAADTTg0oAAOApwANJAIADQAA4XkjAADTYy0NCQ0tDQoPASgAD4CnABEOOA8REiQCABIAANOFJQAA7DQtDg0JLQ4RCi0NDg0nAg8EGi0IABotDA0bABAADwAlAAEtYC0EAAAtDBsOLQ0ODQAoDQINLQ4NDi0IAQ0oAgAPBAJmABABDwEnAw0EAQAoDQIPKAIAEQQCZQA4EQ8RLQwPEgw4EhEUFgwUFCQCABQAANQILgqAlgASACgSAhIjAADT5y0IAQ8AAAECAS0ODQ8oAgANBAJlLgiAZAADIwAA1CcMOAMNESQCABEAAODbIwAA1DktDQkRLQ0KEgA4Eg0UDjgSFBckAgAXAADUWCUAAOw0LQ4RCS0OFAotDQ8JLQ0JCgAoCgIKLQ4KCS0IAQoAAAECAS0OCQotCAEJAAABAgEuCoBkAAktCAEPKAIAEQQCZgAQAREBJwMPBAEAKA8CESgCABIEAmUAOBIREi0MERQMOBQSFxYMFxckAgAXAADU2C4KgJYAFAAoFAIUIwAA1LctDQ8RACgRAhEtDhEPLQgBEQAAAQIBLQ4PES4IgGQAAyMAANT9DDgDDQ8kAgAPAADgMiMAANUPLQ0RAy0NAwkAKAkCCS0OCQMtCAEJAAABAgEuCoCVAAktCAEKAAABAgEuCoCWAAotCAENAAABAgEnAg8Ali0ODw0nAg8EGi0IABotDAkbLQwKHC0MDR0AEAAPACUAAOxGLQQAAB4CAA8BHgIAEQAKOA8REiQCABIAANWPJQABLxwnAhcEGi0IABotDA4bLQwDHAAQABcAJQABBl4tBAAALQwbDy0MHBEtDB0SLQweFC0NDwMAKAMCAy0OAw8tDREDACgDAgMtDgMRLQ0SAwAoAwIDLQ4DEi0NFAMAKAMCAy0OAxQnAg4EGi0IABotDA8bLQwRHAAQAA4AJQABCPAtBAAALQwbAycCDgQaLQgAGi0MCRstDAocLQwNHS0MAx4AEAAOACUAAQ3aLQQAACcCDgQaLQgAGi0MEhstDBQcABAADgAlAAEPRi0EAAAtDBsDJwIOBBotCAAaLQwJGy0MChwtDA0dLQwDHgAQAA4AJQABFDAtBAAAACgCAgotDQoJJwINBAIAOAoNAzsNAAMACSMAANakCjgBGQMkAgADAADWtiMAANt5LQgBCScCCgRCABABCgEnAwkEAQAoCQIKHzSAYwATAAotDQkKACgKAgotDgoJLQgBCgAAAQIBLQgBDQAAAQIBASgACYBjAA8tDQ8OLQ4JCi4KgGMADScCDwQXLQgAFy0MChgtDA0ZLQwWGgAQAA8AJQABLy4tBAAALQwYCS0NCQ8AKA8CDy0ODwknAhEEFy0IABctDAoYLQwNGS0MFhoAEAARACUAAS8uLQQAAC0MGA8tDQ8KACgKAgotDgoPLQgBCgAAAQIBLgqAlQAKLQgBDQAAAQIBLgqAlgANLQgBEQAAAQIBJwISAGwtDhIRJwISBBYtCAAWLQwKFy0MDRgtDBEZABAAEgAlAADsRi0EAAAeAgASAR4CABMACjgSExQkAgAUAADX4iUAATCgJwIXBBgtCAAYLQwKGS0MDRotDBEbLQwHHC4IgKsAHS0MDh4AEAAXACUAASMuLQQAAC0MGRItDBoTLQwbFC0MHBYeAgAHBTAMAAcAFi0IAQcnAgoEYQAQAQoBJwMHBAEAKAcCCicCDQRgADgNCg0tDAoODDgODREWDBERJAIAEQAA2HUuCoBhAA4AKA4CDiMAANhULQgBCgAAAQIBLQ4HCi4IgGQAAyMAANiNDSgAA4CnAAckAgAHAADe4CMAANiiLwiAmAAJLQgBDScCDgQCABABDgEnAw0EAQAoDQIOLQwODy0OCQ8tDQ0JACgJAgktDgkNJwIOBBYtCAAWLQwNFwAQAA4AJQAA6VgtBAAALQwXCS0NCg0uCYCNAAoAKAoCCi4GAAqAjScCDwQWLQgAFi0MDRcuCICtABguCIBkABkAEAAPACUAATCyLQQAAC0MFwotDBgOLQ0KDwAoDwIPLQ4PCi0IAQ8nAhEECQAQAREBJwMPBAEAKAoCEQEggI0AAgASACgPAhNAPwATABIAES0NDwoAKAoCCi0OCg8nAhIEFi0IABYtDA0XLgiArQAYLgiAjgAZABAAEgAlAAEwsi0EAAAtDBcKLQwYES0NCg0AKA0CDS0ODQoHKAARgI8ADScCEwQQDDgNExQkAgAUAADZ2iUAATOJACgKAhMAOBMNFC0NFBInAhQEFi0IABYtDBIXLQwRGC4IgK4AGQAQABQAJQABM5stBAAALQwXEycCFAQQDDgNFBYkAgAWAADaKCUAATOJLgQACoADKACABAQAESUAATUgLgiABQASACgSAhQAOBQNFi0OExYNKAARgJAACiQCAAoAANqcIwAA2mMtCAEKJwINBAkAEAENAScDCgQBACgSAg0AKA8CDgAoCgIRQD8AEQAOAA0tDAoDLgiAZAAHIwAA2sMBKAARgGMACg44EQoNJAIADQAA2rYlAADsNC0MDwMtDAoHIwAA2sMtDQMKACgKAgotDgoDJwINBBYtCAAWLQwSFy0MBxguCICtABkAEAANACUAATWuLQQAAC0MFwotDQoHACgHAgctDgcKJwINBBYtCAAWLQwKFy0MAxgAEAANACUAAToBLQQAAC0MFwctDQcDACgDAgMtDgMHJwIKBBYtCAAWLQwHFwAQAAoAJQABO/gtBAAALQwXAzgMAAkAAwAoAgIJLQ0JBycCCgQCADgJCgM7DQADAAcjAADbeSkCAAMAkRtG5wo4AQMHJAIABwAA25QjAADdPS0IAQMnAgcEAwAQAQcBJwMDBAEAKAMCBx8kgGOAZQAHLQ0DBwAoBwIHLQ4HAy0IAQcAAAECAS0OAwctCAEDAAABAgEuCoBkAAMnAgoEFi0IABYtDAcXLQwDGC4IgKQAGQAQAAoAJQABLCstBAAALQwXCScCDQQWLQgAFi0MBxctDAMYABAADQAlAAEswy0EAAAtDBcKASgACoBjAActDQcDHAwDCgQcDAoHABwMBwMELQgBBwAAAQIBLgqAlQAHLQgBCgAAAQIBLgqAlgAKLQgBDQAAAQIBJwIOADktDg4NJwIOBBYtCAAWLQwHFy0MChgtDA0ZABAADgAlAADsRi0EAAAeAgAOAR4CAA8ACjgODxEkAgARAADcsyUAAT1CJwITBBYtCAAWLQwHFy0MChgtDA0ZLQwQGi4IgKoAGy0MCRwAEAATACUAAP64LQQAAC0MFw4tDBgPLQwZES0MGhInAgcEFi0IABYtDA4XLQwPGC0MERktDBIaLQwDGwAQAAcAJQABAXctBAAAACgCAgktDQkHJwIKBAIAOAkKAzsNAAMAByMAAN09JwICAncnAgMCey0IAQcnAgkEHAAQAQkBJwMHBAEAKAcCCS0MCQouCoBVAAoAKAoCCi4KgG0ACgAoCgIKLQ4ECgAoCgIKLgqAbQAKACgKAgotDhUKACgKAgotDgIKACgKAgouCoBtAAoAKAoCCi4KgKYACgAoCgIKLgqARwAKACgKAgotDgwKACgKAgotDggKACgKAgotDgwKACgKAgotDgUKACgKAgotDgYKACgKAgotDhUKACgKAgotDgsKACgKAgouCoCmAAoAKAoCCi0OAwoAKAoCCi4KgEcACgAoCgIKLQ4MCgAoCgIKLQ4ICgAoCgIKLQ4MCgAoCgIKLQ4FCgAoCgIKLQ4GCgAoCgIKLQ4VCgAoCgIKLQ4LCgAoCgIKLgqAUAAKCyCAlYCXAAIkAgACAADe3ycCAwQeLQgBBCcCBQQeABABBQEtDAQFKgMABQUnRkiy9UEXvQAoBQIFACgHAgYnAggEGy4EAAaAAy4EAAWABC4EAAiABSUAAT1UJwIGBBsAOAUGBS4KgGMABQAoBQIFLQ4BBQAoBQIFPA0EAyYtDQoHJwIOBCAMOAMOESQCABEAAN77JQABM4kBIICBAAIADgA4DgMRLQ0RDScCEQRgDDgDERIkAgASAADfIyUAATOJLgQAB4ADKACABAQAYSUAATUgLgiABQAOACgOAhEAOBEDEi0ODRIBKAADgGMABwEoAAOApwANJwISBCAMOAMSEyQCABMAAN9wJQABM4kAKAkCEgA4EgMTLQ0TEScCEwRgDDgNExQkAgAUAADflSUAATOJLgQADoADKACABAQAYSUAATUgLgiABQASACgSAhMAOBMNFC0OERQBKAADgI4ADScCEQQgDDgDERMkAgATAADf2iUAATOJACgPAhEAOBEDEy0NEw4nAhMEYAw4DRMUJAIAFAAA3/8lAAEziS4EABKAAygAgAQEAGElAAE1IC4IgAUAEQAoEQITADgTDRQtDg4ULQ4RCi0MBwMjAADYjS0NEQ8tDQoSLQ0JFCgCABgEAmUMOBQYGiQCABoAAOBXJQABM4kAKBICGAA4GBQaLQ0aFwEoABSAYwAYDjgUGBokAgAaAADgfyUAAOw0LQ4SCi0OGAkoAgAUBAJlDDgDFBgkAgAYAADgoCUAATOJLgQAD4ADKACABAQCZiUAATUgLgiABQASACgSAhQAOBQDGC0OFxgtDhIRASgAA4BjAA8tDA8DIwAA1P0tDQ8RLQ0JEi0NChQAOBQDFw44FBcYJAIAGAAA4P4lAADsNCgCABgEAoUMOBcYGiQCABoAAOEXJQABM4kAKBICGAA4GBcaLQ0aFCgCABcEAmUMOAMXGCQCABgAAOE+JQABM4kuBAARgAMoAIAEBAJmJQABNSAuCIAFABIAKBICFwA4FwMYLQ4UGC0OEg8BKAADgGMAES0MEQMjAADUJy0NDg0tDQkPLQ0KEQA4EQMSDjgREhQkAgAUAADhnCUAAOw0KAIAFAQChQw4EhQXJAIAFwAA4bUlAAEziQAoDwIUADgUEhctDRcRJwISBCAMOAMSFCQCABQAAOHaJQABM4kuBAANgAMoAIAEBAAhJQABNSAuCIAFAA8AKA8CEgA4EgMULQ4RFC0ODw4BKAADgGMADS0MDQMjAADTTi0NEgktDQ0ULQ0OFwA4FwMYDjgXGBokAgAaAADiOCUAAOw0KAIAGgQBTgw4GBobJAIAGwAA4lElAAEziQAoFAIaADgaGBstDRsXJwIYBCAMOAMYGiQCABoAAOJ2JQABM4kuBAAJgAMoAIAEBAAhJQABNSAuCIAFABQAKBQCGAA4GAMaLQ4XGi0OFBIBKAADgGMACS0MCQMjAADQ6y0NEQktDQ0SLQ0OFAA4FAMXDjgUFxgkAgAYAADi1CUAAOw0KAIAGAQBTgw4FxgaJAIAGgAA4u0lAAEziQAoEgIYADgYFxotDRoUKAIAFwQBLQw4AxcYJAIAGAAA4xQlAAEziS4EAAmAAygAgAQEAS4lAAE1IC4IgAUAEgAoEgIXADgXAxgtDhQYLQ4SEQEoAAOAYwAJLQwJAyMAANAdJAIAGwAA41wjAADjsScCHQQCDDgJHR4kAgAeAADjcyUAATOJACgUAh0AOB0JHi0NHhsnAh0EHi0IAB4tDBwfLQwDIC0MDyEtDBoiLQwbIwAQAB0AJQAA6wktBAAAIwAA47EBKAAJgGMAGy0MGwkjAADMuSQCAB4AAOPPIwAA5CQnAiAEAgw4CSAhJAIAIQAA4+YlAAEziQAoGwIgADggCSEtDSEeJwIgBCEtCAAhLQwfIi0MGiMtDBwkLQwdJS0MHiYAEAAgACUAAOsJLQQAACMAAOQkASgACYBjAB4tDB4JIwAAyiwtDRQRLQ0NGC0NDhoAOBoJGw44GhscJAIAHAAA5FglAADsNCgCABwEAS8MOBscHSQCAB0AAORxJQABM4kAKBgCHAA4HBsdLQ0dGigCABsEAS0MOAkbHCQCABwAAOSYJQABM4kuBAARgAMoAIAEBAEuJQABNSAuCIAFABgAKBgCGwA4GwkcLQ4aHC0OGBQBKAAJgGMAES0MEQkjAADIcS0NIiUtDSQmJwIoBCAMOBQoKSQCACkAAOTyJQABM4kAKCMCKAA4KBQpLQ0pJy0NJygAKCgCKC0OKCcnAioEAQYoKgIoJwIsBAMAOCosKy0IASkAEAErAScDKQQBACgpAistDiorACgrAistDiorJwIsBAMAOCksKwAoJwIsLgQALIADLgQAK4AELgQAKoAFJQABPVQnAisELC0IACwtDCUtLQwmLi4IgGMALy0MKTAAEAArACUAAQKCLQQAAC0MLSctDC4qLQ0qJQAoJQIlLQ4lKi0OJyItDiokASgAFIBjACUtDCUUIwAAugAtDSIlLQ0kJicCKAQgDDgUKCkkAgApAADl3SUAATOJACgjAigAOCgUKS0NKSctDScoACgoAigtDignJwIqBAEGKCoCKCcCLAQDADgqLCstCAEpABABKwEnAykEAQAoKQIrLQ4qKwAoKwIrLQ4qKycCLAQDADgpLCsAKCcCLC4EACyAAy4EACuABC4EACqABSUAAT1UJwIrBCwtCAAsLQwlLS0MJi4uCIBjAC8tDCkwABAAKwAlAAECgi0EAAAtDC0nLQwuKi0NKiUAKCUCJS0OJSotDiciLQ4qJAEoABSAYwAlLQwlFCMAALm7JAIASAAA5rYjAADnGScCUgQCDDgEUlMkAgBTAADmzSUAATOJACg9AlIAOFIEUy0NU0goAgBSBAJ/LggAAAJ/LgwAUAKALgwAOQKBLgwARQKCLgwARgKDLgwASAKEABAAUgAlAADrCS0EAAAjAADnGQEoAASAYwBILQxIBCMAAFtCJAIAUAAA5zcjAADnmicCUwQCDDgEU1YkAgBWAADnTiUAATOJACg9AlMAOFMEVi0NVlAoAgBTBAKBLggAAAKBLgwAUgKCLgwAOQKDLgwARgKELgwASAKFLgwAUAKGABAAUwAlAADrCS0EAAAjAADnmgEoAASAYwBQLQxQBCMAAFgrLQ0XFi0NFRgtDRQZADgZBBoOOBkaGyQCABsAAOfOJQAA7DQoAgAbBAFODDgaGxwkAgAcAADn5yUAATOJACgYAhsAOBsaHC0NHBkoAgAaBAFODDgEGhskAgAbAADoDiUAATOJLgQAFoADKACABAQBTyUAATUgLgiABQAYACgYAhoAOBoEGy0OGRstDhgXASgABIBjABYtDBYEIwAAD6skAgAMAADoViMAAOirJwINBAMMOAMNDiQCAA4AAOhtJQABM4kAKAcCDQA4DQMOLQ0ODCcCDQQOLQgADi0MBA8tDAYQLQwKES0MCxItDAwTABAADQAlAADrCS0EAAAjAADoqwEoAAOAYwAMLQwMAyMAAAvgJAIADAAA6MkjAADpHicCDgQCDDgDDg8kAgAPAADo4CUAATOJACgKAg4AOA4DDy0NDwwnAg4EDy0IAA8tDA0QLQwGES0MBxItDAsTLQwMFAAQAA4AJQAA6wktBAAAIwAA6R4BKAADgGMADC0MDAMjAAAKvigAgAQEeAANAAAAgASAAyQAgAMAAOlXKgEAAQX3ofOvpa3UyjwBAQImJQAA6S8BKAABgGMAAy0NAwIcDAIBACwCAAMAAAAAAAAAAAAAAAAA//////////////////////////8OOAEDBCQCAAQAAOmlJQABPZotDAIBJiUAAOkvHAwBAwQcDAMCABwMAgEEJiUAAOkvLQgBAicCAwQEABABAwEnAwIEAQAoAgIDLQwDBC4KgJYABAAoBAIELgqAlgAEACgEAgQuCoCWAAQtDQIDACgDAgMtDgMCLQgBAycCBAQFABABBAEnAwMEAQAoAwIELQwEBS4KgJYABQAoBQIFLgqAlgAFACgFAgUuCoCWAAUAKAUCBS0OAQUuCICVAAQtDAIBLQwDAi4IgGQAAyYlAADpLy0NBAULKAAFgJUABiQCAAYAAOqBJwIHBAA8CQEHJwIFBAYtCAAGLQwBBy0MAggtDAMJLQwECgAQAAUAJQABPawtBAAALQ0BBS0NAgYtDQMHLQ4FAS0OBgItDgcDLgqAlwAEASgABoBjAAItDQIBJioBAAEF9IABplnTJ0I8AQECJioBAAEFHwBQEkAkIu48AQECJioBAAEFHwotJ9yCh6I8AQECJiUAAOkvLQ0DBi0NBAcLKAAHgJUACCQCAAgAAOsvJwIJBAA8CQEJCygABoBnAAckAgAHAADrwCMAAOtELQ0BBi0NAgctDQMILQ0ECScCCwQDDDgICwwkAgAMAADrayUAATOJLgQABoADKACABAQABCUAATUgLgiABQAKACgKAgsAOAsI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gAouAIAFgAsLAIAKgAmADCQAgAwAATWZLgGACoAILgKACIALAQCACgACgAoBAIALAAKACyMAATVoKAGABQQAAQMAgAYAAoAGIwABNa0mJQAA6S8tDQEEACgEAgQtDgQBLQgBBAAAAQIBLQ4BBC0IAQUAAAECAS0OAgUnAgcEBAY4AgcIBDgIBwkCOAIJBgsoAAaAZAAHJAIABwABNzkjAAE2AwcoAAKAjwAIAzCAjwAGAAkPKAAGgI8ACiQCAAoAATYoJQABQiInAgoEEAw4CAoLJAIACwABNj8lAAEziQAoAQIKADgKCAstDQsGHAwJCwIcDAsKBBwMCgsCBTCAmwALAAonAg0CAAo4DQsMJAIADAABNpAGOAoLDwsoAA+AmwAOJAIADgABNpAlAAFCNBo4BgoMDSgAC4CZAAYkAgAGAAE2tSMAATaqLgiAZAAHIwABNtgYOAwKBg0oAAqApgALJAIACwABNs8lAAFI0y0MBgcjAAE22CcCCgQQDDgICgskAgALAAE27yUAATOJLgQAAYADKACABAQAESUAATUgLgiABQAGACgGAgoAOAoICy0OBwstDgYEADgCCQEOOAIBBiQCAAYAATcwJQAA7DQtDgEFIwABNzktDQUCBygAAoCPAAUtDAUBIwABN04NKAABgJMAAiQCAAIAATmpIwABN2MFMICcAAMAAicCBgQACjgGAwUkAgAFAAE3lwY4AgMICygACICcAAckAgAHAAE3lyUAAUI0HAwCAwAnAgUBAC0IAQInAgYECQAQAQYBJwMCBAEAKAICBicCBwQIQwOwAAOAlAAHAAUABi4IgGQAASMAATfWDSgAAYBlAAMkAgADAAE38CMAATfrLQ0EASYFKAABgI8AAy0NBAUBMICTAAEABicCCAQIDDgDCAkkAgAJAAE4GyUAATOJACgCAggAOAgDCS0NCQcBKAADgGMACA44AwgJJAIACQABOEMlAADsNCcCCgQIDDgICgskAgALAAE4WiUAATOJACgCAgoAOAoICy0NCwkBKAADgGUACA44AwgKJAIACgABOIIlAADsNCcCCwQIDDgICwwkAgAMAAE4mSUAATOJACgCAgsAOAsIDC0NDAoBKAADgGcACA44AwgLJAIACwABOMElAADsNCcCCwQIDDgICwwkAgAMAAE42CUAATOJACgCAgsAOAsIDC0N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",
      "debug_symbols": "",
      "brillig_names": ["public_dispatch"]
    },
    {
      "name": "claim_private",
      "is_unconstrained": false,
      "custom_attributes": ["private"],
      "abi": {
        "error_types": {
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 75
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15663063161611103517": {
            "error_kind": "string",
            "string": "Invalid secret"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ],
            "length": 98
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "field"
              }
            ],
            "length": 58
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "secret",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "order_id_bytes",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "origin_data_bytes",
            "type": {
              "kind": "array",
              "length": 301,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "filler_data_bytes",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_notes",
        "store_in_execution_cache_oracle_wrapper",
        "enqueue_public_function_call_internal",
        "store_in_execution_cache_oracle_wrapper",
        "build_msg_block",
        "attach_len_to_msg_block",
        "call_private_function_internal",
        "store_in_execution_cache_oracle_wrapper",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "open",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "error_types": {
          "10411837482733946431": {
            "error_kind": "string",
            "string": "Invalid order sender"
          },
          "1149705418984161792": {
            "error_kind": "string",
            "string": "Invalid nonce"
          },
          "13250867036985658079": {
            "error_kind": "string",
            "string": "Invalid order data type"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3089903740940599642": {
            "error_kind": "string",
            "string": "Invalid fill deadline"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5775299686015755157": {
            "error_kind": "string",
            "string": "Not a public order"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6579113687620452371": {
            "error_kind": "string",
            "string": "Invalid order origin domain"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          }
        },
        "parameters": [
          {
            "name": "order",
            "type": {
              "fields": [
                {
                  "name": "fill_deadline",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                },
                {
                  "name": "order_data_type",
                  "type": {
                    "kind": "array",
                    "length": 32,
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  }
                },
                {
                  "name": "order_data",
                  "type": {
                    "kind": "array",
                    "length": 301,
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  }
                }
              ],
              "kind": "struct",
              "path": "types::onchain_cross_chain_order::OnchainCrossChainOrder"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": ["open"]
    },
    {
      "name": "_check_order_status",
      "is_unconstrained": true,
      "custom_attributes": ["public", "internal"],
      "abi": {
        "error_types": {
          "10883657705690251125": {
            "error_kind": "string",
            "string": "Invalid order status"
          },
          "12018683598614887596": {
            "error_kind": "string",
            "string": "Function _check_order_status can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [
          {
            "name": "order_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "status",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "7Z3dTuNKDMffpde9mC/Px77K6ggB20WVqhYVONIR4t1PwpKkbUzTjEds0fxvUEPt2PnViT0fmXld/FrdvTzcrLe/d0+LHz9fF5vd/e3zerdtjl7flou7/XqzWT/cHP57odo/WqV3hafH2217/PR8u39e/NAuKrVcrLa/2s/JUnOS3+vNqjky+m05llfGdOLKmUFaR0baeUcf0s6T66WDYYSji+lDOJKiQ+F/lgutXRn/U2dEa52+0v9C/Cn2/OMUf00hdNLe2vP+JwrdxSbfnu7YfxNK+6/Nsf+tFWu+wopTX2KFWCuWXK9myfsJKy7qTtxF4ydikMj3MRj06W9I6hOPghk8SmbKo4J3BV3CKLkjj1o9rzL1Yp5esKyeca7j3Xz2w/OEiA0Yb4eHz3A7as+R07E/dRruRqvpj0PxyhyK5tocClfmULo2QunKCBl1ZYSM8lfmkFbX5hBdm0Pp6x3qk24TwUcOjWVD6pNnSGk4swlcAWf7MzujBlnHiDYX7jovjDbnhcl05yUTDkVbgsaBoJBgBEEZQWtBUEgQMSgk6BCDUoKIQSFBMiAoJOhBUEbQaxAUEiQQlBEMCgSFBB0IThP03QAAeT0iiGpGSDCiopYSDCA4TbCX9ceiDUGrcBcLCWq0SaQEcRcLCRrEoJQgYlBI0CIGpQTRNyMk6NAulhJE34yUIEbchQTJgaCQIFp1QoIefTNSgqioTwm2WAKGj1gsqH05LBEFLYvFAQuHBaUnhyUhl7NYkKAZLE6hH4vFggTNYdFI0CwWdCOxWJCgOSwGCZrFgl4cDot1wMJhQbRwWPDaAo8F0cJh8bViMXbA4ugUS6y1+A+6W67BhIMVQ+YKtwxTrS2FOQy1H67PRz1iWGuzohxDUrUmxJIMa00TBRlWO292FsMQehoh0YhhrV24BRmaWgdkSzJEXpYzrLVvsCDDatfJKMkQOUXM0KG2kTNEHIoZEmobOUPUNnKGqG3EDKudkVySIXKKmGG1E5hLMkROkTNETrmAYdL9WubJjBhWu35GQYapyPNQxzhI0wRDotBJNx3rA0XN+h98t+tBiAdLuQf1x33/nd336lvT9yp9a/c/2YXk2P0DvU/ct8MmJP7YCOMQ+c79QHEgw263EOzgvlMTu0U0fvRrDbU+2UPx9mqN+gtX22+qEbxyUxeQqHdEDwNutnnCvftP39t/+83520v4J3/of6t20aIGjFrMUqu2iWRV74XV7iTL+1Brj+4EFkQLhyXW2r47j6XaKXATWBAtDJagEC0sFlfrFOVkeiyKJtrsqm/gN5caRwyrneZdjmG18/dmMdR2uD7SI4a1lk8FGVY796wgQ1trqi3JEHn5Eoa+7yJpei1PGVY712IWQ3ewL68axWG1cy0KMqx2rkVJhqhtxAyrnWsxiyGZ/vqI1Ihhre+uFmQYEYdyhsjLYobJgaGQYay2W7UkQ9Q2YoboPyzAEP3YYobVLj5WkiHiUMyw2v1z5jEM/VxcSqfLN8Vq938pyRB9sGKGhJwiZ4icImbokVPkDNF/KGZY7X7lJRmi//AChnZ4V8va0/GUWO2+ISUZIi+LGSbkZTlD5GUpw4SxgAIMkVPkDFHbiBlqxKGcIWobMUOD2kbOELWNmCHmtF/E0IWeoVcjhohDMcNqN6ApyRB5WcyQHBiKGaKdImaI9wLkDPFegPjdilTtGowlGeJ5KGZY7VoxBRnivYARwwaL1nzfdOhXQAvOjnT49+mT6wwlGtvh9y45r8Pv1TGhE+brOD5Xnl3cotHyOVqksrQoR8tn2fJZtkKWrZBlK2bZilm/V8qylbKuK6UMLfPJbn1TWiFHS+ssLT/7GWP4lTSbobTuPjaMzvznkuHv4vN2KMM3vm09oRPn6/Dz+c4z8POfmSZk2OHv2wmdjN80ZdhJOXb4nEZdXKdwOkVLWz7fTuhk2OHXDTqvw4/LTOhk2LEZdvh+5oPfh9Hh8/rZ39Q6P1+HMuzQ/HrIejdfJ6gMnfnPAxtNhk6cr5Nshs58O06ZDJ35seO0ytCZGQdvzdG/t/v17d1m9dRotF++bO+f17vtx+Hzf4/dN3f79Wazfrh53O/uV79e9qubze6+/W6hPv78NDEum4dS60t7qFNcNlXIewnTHFqtls24W2O1sfw/",
      "brillig_names": ["_check_order_status"]
    },
    {
      "name": "_assert_nonce_and_set_order_details",
      "is_unconstrained": true,
      "custom_attributes": ["internal", "public"],
      "abi": {
        "error_types": {
          "11094545764365153162": {
            "error_kind": "string",
            "string": "Function _assert_nonce_and_set_order_details can only be called internally"
          },
          "1149705418984161792": {
            "error_kind": "string",
            "string": "Invalid nonce"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          }
        },
        "parameters": [
          {
            "name": "order_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "order_data",
            "type": {
              "kind": "array",
              "length": 301,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": ["_assert_nonce_and_set_order_details"]
    },
    {
      "name": "constructor",
      "is_unconstrained": true,
      "custom_attributes": ["public", "initializer"],
      "abi": {
        "error_types": {
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [
          {
            "name": "portal",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::protocol_types::address::eth_address::EthAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": ["constructor"]
    },
    {
      "name": "sync_notes",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 75
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ],
            "length": 98
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "field"
              }
            ],
            "length": 58
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          }
        },
        "parameters": [],
        "return_type": null
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": ["sync_notes"]
    },
    {
      "name": "_check_order_commitment",
      "is_unconstrained": true,
      "custom_attributes": ["public", "internal"],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14563046062317426044": {
            "error_kind": "string",
            "string": "Function _check_order_commitment can only be called internally"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "255477095918156618": {
            "error_kind": "string",
            "string": "Invalid order"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          }
        },
        "parameters": [
          {
            "name": "order_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "origin_data_bytes",
            "type": {
              "kind": "array",
              "length": 301,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "filler_data_bytes",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": ["_check_order_commitment"]
    },
    {
      "name": "fill_private",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "error_types": {
          "10852400770788842366": {
            "error_kind": "string",
            "string": "Invalid order domain"
          },
          "13358931442698543651": {
            "error_kind": "string",
            "string": "Order fill expired"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5024954142921657308": {
            "error_kind": "string",
            "string": "Not a private order"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "692953268510459726": {
            "error_kind": "string",
            "string": "Invalid order id"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          }
        },
        "parameters": [
          {
            "name": "order_id_bytes",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "origin_data_bytes",
            "type": {
              "kind": "array",
              "length": 301,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "filler_data_bytes",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": ["fill_private"]
    },
    {
      "name": "_update_order_status",
      "is_unconstrained": true,
      "custom_attributes": ["public", "internal"],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "9169818942746597700": {
            "error_kind": "string",
            "string": "Function _update_order_status can only be called internally"
          }
        },
        "parameters": [
          {
            "name": "order_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "status",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": ["_update_order_status"]
    },
    {
      "name": "_emit_open",
      "is_unconstrained": true,
      "custom_attributes": ["public", "internal"],
      "abi": {
        "error_types": {
          "13459246948365409099": {
            "error_kind": "string",
            "string": "Function _emit_open can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [
          {
            "name": "order_id_bytes",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "resolved_order_bytes",
            "type": {
              "kind": "array",
              "length": 613,
              "type": {
                "kind": "field"
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": ["_emit_open"]
    },
    {
      "name": "fill",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "error_types": {
          "13358931442698543651": {
            "error_kind": "string",
            "string": "Order fill expired"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5775299686015755157": {
            "error_kind": "string",
            "string": "Not a public order"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "692953268510459726": {
            "error_kind": "string",
            "string": "Invalid order id"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8412360910299423372": {
            "error_kind": "string",
            "string": "Invalid order destination domain"
          }
        },
        "parameters": [
          {
            "name": "order_id_bytes",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "origin_data_bytes",
            "type": {
              "kind": "array",
              "length": 301,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "filler_data_bytes",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": ["fill"]
    },
    {
      "name": "open_private",
      "is_unconstrained": false,
      "custom_attributes": ["private"],
      "abi": {
        "error_types": {
          "10411837482733946431": {
            "error_kind": "string",
            "string": "Invalid order sender"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 75
          },
          "13250867036985658079": {
            "error_kind": "string",
            "string": "Invalid order data type"
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ],
            "length": 98
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3089903740940599642": {
            "error_kind": "string",
            "string": "Invalid fill deadline"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "field"
              }
            ],
            "length": 58
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5024954142921657308": {
            "error_kind": "string",
            "string": "Not a private order"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6579113687620452371": {
            "error_kind": "string",
            "string": "Invalid order origin domain"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "order",
            "type": {
              "fields": [
                {
                  "name": "fill_deadline",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                },
                {
                  "name": "order_data_type",
                  "type": {
                    "kind": "array",
                    "length": 32,
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  }
                },
                {
                  "name": "order_data",
                  "type": {
                    "kind": "array",
                    "length": 301,
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  }
                }
              ],
              "kind": "struct",
              "path": "types::onchain_cross_chain_order::OnchainCrossChainOrder"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_notes",
        "build_msg_block",
        "attach_len_to_msg_block",
        "store_in_execution_cache_oracle_wrapper",
        "enqueue_public_function_call_internal",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "store_in_execution_cache_oracle_wrapper",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "_trigger_settlement",
      "is_unconstrained": true,
      "custom_attributes": ["public", "internal"],
      "abi": {
        "error_types": {
          "13594925270014003382": {
            "error_kind": "string",
            "string": "Function _trigger_settlement can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          }
        },
        "parameters": [
          {
            "name": "order_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "order_id_bytes",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "filler_data",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": ["_trigger_settlement"]
    },
    {
      "name": "get_order_status",
      "is_unconstrained": true,
      "custom_attributes": ["public", "view"],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6017907102598075401": {
            "error_kind": "string",
            "string": "Function get_order_status can only be called statically"
          }
        },
        "parameters": [
          {
            "name": "order_id_bytes",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          "visibility": "public"
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": ["get_order_status"]
    },
    {
      "name": "get_filled_order_block_number",
      "is_unconstrained": true,
      "custom_attributes": ["public", "view"],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5048864367174250545": {
            "error_kind": "string",
            "string": "Function get_filled_order_block_number can only be called statically"
          }
        },
        "parameters": [
          {
            "name": "order_id_bytes",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "field"
          },
          "visibility": "public"
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": ["get_filled_order_block_number"]
    }
  ],
  "outputs": {
    "globals": {
      "notes": [
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        },
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        }
      ],
      "storage": [
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "Token"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "admin",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "minters",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000002"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "total_supply",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000004"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "public_balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "symbol",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000006"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "name",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000008"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "decimals",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000a"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        },
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "AztecGateway7683"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "config",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "claimable_orders",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "open_orders",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000004"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "order_status",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "used_nonces",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000006"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "filled_orders_block_numbers",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000007"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        }
      ]
    },
    "structs": {
      "functions": [
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "order_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "order_data",
                    "type": {
                      "kind": "array",
                      "length": 301,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::_assert_nonce_and_set_order_details_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::_assert_nonce_and_set_order_details_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "order_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "status",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::_check_order_status_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::_check_order_status_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "order_id_bytes",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::get_filled_order_block_number_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::get_filled_order_block_number_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "order_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "origin_data_bytes",
                    "type": {
                      "kind": "array",
                      "length": 301,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "filler_data_bytes",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::_check_order_commitment_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::_check_order_commitment_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "order_id_bytes",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "origin_data_bytes",
                    "type": {
                      "kind": "array",
                      "length": 301,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "filler_data_bytes",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::fill_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::fill_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "secret",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "order_id_bytes",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "origin_data_bytes",
                    "type": {
                      "kind": "array",
                      "length": 301,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "filler_data_bytes",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::claim_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::claim_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "order_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "order_id_bytes",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "filler_data",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::_trigger_settlement_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::_trigger_settlement_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "order_id_bytes",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "origin_data_bytes",
                    "type": {
                      "kind": "array",
                      "length": 301,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "filler_data_bytes",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::fill_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::fill_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "portal",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::constructor_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::constructor_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "order",
                    "type": {
                      "fields": [
                        {
                          "name": "fill_deadline",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 32
                          }
                        },
                        {
                          "name": "order_data_type",
                          "type": {
                            "kind": "array",
                            "length": 32,
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          }
                        },
                        {
                          "name": "order_data",
                          "type": {
                            "kind": "array",
                            "length": 301,
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "types::onchain_cross_chain_order::OnchainCrossChainOrder"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::open_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::open_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "order",
                    "type": {
                      "fields": [
                        {
                          "name": "fill_deadline",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 32
                          }
                        },
                        {
                          "name": "order_data_type",
                          "type": {
                            "kind": "array",
                            "length": 32,
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          }
                        },
                        {
                          "name": "order_data",
                          "type": {
                            "kind": "array",
                            "length": 301,
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "types::onchain_cross_chain_order::OnchainCrossChainOrder"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::open_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::open_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "order_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "status",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::_update_order_status_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::_update_order_status_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "order_id_bytes",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "resolved_order_bytes",
                    "type": {
                      "kind": "array",
                      "length": 613,
                      "type": {
                        "kind": "field"
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::_emit_open_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::_emit_open_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "order_id_bytes",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::get_order_status_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::get_order_status_abi"
        }
      ]
    }
  },
  "file_map": {
    "110": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr",
      "source": "use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n"
    },
    "114": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/macros/dispatch/mod.nr",
      "source": "use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let name = function.name();\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n"
    },
    "117": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/macros/functions/call_interface_stubs.nr",
      "source": "use crate::macros::utils::{\n    add_to_field_slice, AsStrQuote, compute_fn_selector, is_fn_private, is_fn_view,\n};\nuse std::meta::{type_of, unquote};\n\ncomptime global FROM_FIELD: TypedExpr = {\n    let from_field_trait = quote { protocol_types::traits::FromField }.as_trait_constraint();\n    let function_selector_typ =\n        quote { protocol_types::abis::function_selector::FunctionSelector }.as_type();\n    function_selector_typ.get_trait_impl(from_field_trait).unwrap().methods().filter(|m| {\n        m.name() == quote { from_field }\n    })[0]\n        .as_typed_expr()\n};\n\ncomptime global SERIALIZED_ARGS_SLICE_NAME: Quoted = quote { serialized_args };\n\npub comptime fn stub_fn(f: FunctionDefinition) -> Quoted {\n    let is_static_call = is_fn_view(f);\n    let is_void = f.return_type() == type_of(());\n\n    if is_fn_private(f) {\n        if is_static_call {\n            if is_void {\n                create_private_static_void_stub(f)\n            } else {\n                create_private_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_private_void_stub(f)\n            } else {\n                create_private_stub(f)\n            }\n        }\n    } else {\n        if is_static_call {\n            if is_void {\n                create_public_static_void_stub(f)\n            } else {\n                create_public_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_public_void_stub(f)\n            } else {\n                create_public_stub(f)\n            }\n        }\n    }\n}\n\n/// Utility function creating stubs used by all the stub functions in this file.\ncomptime fn create_stub_base(\n    f: FunctionDefinition,\n) -> (Quoted, Quoted, Quoted, Quoted, u32, Field) {\n    let fn_name = f.name();\n    let fn_parameters = f.parameters();\n    let fn_parameters_list =\n        fn_parameters.map(|(name, typ): (Quoted, Type)| quote { $name: $typ }).join(quote {,});\n\n    // Example of what the fold(...) below will generate for `target_address` and `fee_juice_limit_per_tx` function\n    // parameters:\n    // ```\n    // let mut serialized_args =  &[];\n    // serialized_args = serialized_args.append(aztec::protocol_types::traits::Serialize::serialize(target_address));\n    // serialized_args = serialized_args.push_back(fee_juice_limit_per_tx as Field);\n    // ```\n    let serialized_args_slice_construction = fn_parameters.fold(\n        quote {\n            let mut $SERIALIZED_ARGS_SLICE_NAME = &[];\n        },\n        |args, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let arg_to_append = add_to_field_slice(SERIALIZED_ARGS_SLICE_NAME, name, typ);\n            quote {\n                $args\n                $arg_to_append\n            }\n        },\n    );\n\n    let (fn_name_str, _) = fn_name.as_str_quote();\n    let fn_name_len: u32 = unquote!(quote { $fn_name_str.as_bytes().len()});\n    let fn_selector: Field = compute_fn_selector(f);\n\n    (\n        fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len,\n        fn_selector,\n    )\n}\n\ncomptime fn create_private_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_private_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n\ncomptime fn create_public_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_public_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n"
    },
    "118": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"
    },
    "12": {
      "path": "std/convert.nr",
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n"
    },
    "121": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr",
      "source": "use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_initializer, is_fn_internal,\n        is_fn_private, is_fn_public, is_fn_view, modify_fn_body, module_has_initializer,\n        module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform note discovery, since they may need to access notes. This is slightly inefficient\n    // and could be improved by only doing it once we actually attempt to read any.\n    let note_discovery_call = if NOTES.len() > 0 {\n        create_note_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $note_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, &[], false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn find_and_transform_top_level_unconstrained_fns(m: Module) {\n    // Top-level unconstrained fns are contract entrypoints, but they're not explicitly designated in any way. They're\n    // the fallback case for a function that matches no other rules.\n    // TODO(#12743): improve this\n\n    // We first find non-standard contract entrypoints, i.e. functions in the `contract` mod that are not private or\n    // public, but which *are* contract entrypoints (i.e. they're not opting out via the #[test] or\n    // #[contract_library_method] attributes). Ideally entrypoints would be explicitly designated instead.\n    let non_private_public_entrypoint_functions = m.functions().filter(|f: FunctionDefinition| {\n        !is_fn_private(f)\n            & !is_fn_public(f)\n            & !f.has_named_attribute(\"contract_library_method\")\n            & !f.has_named_attribute(\"test\")\n    });\n\n    // TODO: uncomment the code below and emit a warning once support for them is added to Noir (tracked in\n    // https://github.com/noir-lang/noir/issues/7714). We can't simply print a message since that'd otherwise break the\n    // output of utils such as `nargo test --list-tests`.\n    // // We don't expect to see any custom constrained entrypoints (i.e. private functions created outside of aztec-nr's\n    // // #[private] macro, possibly resulting in a non-standard interface).\n    // for f in non_private_public_entrypoint_functions.filter(|f: FunctionDefinition| {\n    //     !f.is_unconstrained()\n    // }) {\n    //     let name = f.name();\n    //     warn(\n    //         f\"found private contract function '{name}' which does not have the #[private] attribute - make sure you know what you're doing!\",\n    //     );\n    // }\n\n    // An unconstrained contract entrypoints is what we call a top-level unconstrained function, to which we apply the\n    // appropriate transformation. Ideally these would be explicitly designated as such instead.\n    for f in non_private_public_entrypoint_functions.filter(|f: FunctionDefinition| {\n        f.is_unconstrained()\n    }) {\n        transform_top_level_unconstrained(f);\n    }\n}\n\npub(crate) comptime fn transform_top_level_unconstrained(f: FunctionDefinition) {\n    let context_creation = quote { let mut context = dep::aztec::context::unconstrained_context::UnconstrainedContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All unconstrained functions perform note discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let note_discovery_call = if NOTES.len() > 0 {\n        create_note_discovery_call()\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $note_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_return_public(true);\n    f.set_body(modified_body);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::discovery::discover_new_notes`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_note_discovery_call() -> Quoted {\n    quote {\n        /// Safety: note discovery returns nothing and is performed solely for its side-effects. It is therefore always\n        /// safe to call.\n        unsafe {\n            dep::aztec::discovery::discover_new_notes(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n"
    },
    "122": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/macros/mod.nr",
      "source": "pub mod dispatch;\npub mod functions;\npub mod utils;\npub mod notes;\npub mod storage;\npub mod events;\n\nuse functions::{\n    stub_registry,\n    utils::{create_note_discovery_call, find_and_transform_top_level_unconstrained_fns},\n};\nuse notes::{generate_note_export, NOTES};\nuse storage::STORAGE_LAYOUT_NAME;\n\nuse dispatch::generate_public_dispatch;\nuse utils::{get_trait_impl_method, module_has_storage};\n\nuse crate::discovery::MAX_NOTE_PACKED_LEN;\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `process_log` and `sync_notes` functions PXE requires in order to discover notes.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    find_and_transform_top_level_unconstrained_fns(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let process_log = generate_process_log();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_notes = generate_sync_notes();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $process_log\n        $public_dispatch\n        $sync_notes\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The note discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(nonce).into() \n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_notes`, `do_process_log`\n            /// and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::discovery::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                nonce: Field,\n            ) -> Option<aztec::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::discovery::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_process_log() -> Quoted {\n    // This mandatory function processes a log emitted by the contract. This is currently used to process private logs\n    // and perform note discovery of either private notes or partial notes.\n    // The bulk of the work of this function is done by aztec::discovery::do_process_log, so all we need to do is call\n    // that function.\n\n    // We'll produce the entire body of the function in one go and then insert it into the function.\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        quote {\n            unconstrained fn process_log(\n                log_ciphertext: BoundedVec<Field, dep::aztec::protocol_types::constants::PRIVATE_LOG_SIZE_IN_FIELDS>,\n                tx_hash: Field,\n                unique_note_hashes_in_tx: BoundedVec<Field, dep::aztec::protocol_types::constants::MAX_NOTE_HASHES_PER_TX>,\n                first_nullifier_in_tx: Field,\n                recipient: aztec::protocol_types::address::AztecAddress,\n            ) {\n                // Because this unconstrained function is injected after the contract is processed by the macros, it'll not\n                // be modified by the macros that alter unconstrained functions. As such, we need to manually inject the\n                // unconstrained execution context since it will not be available otherwise.\n                let context = dep::aztec::context::unconstrained_context::UnconstrainedContext::new();\n\n                // TODO(#10727): allow other contracts to process logs and deliver notes\n                let contract_address = context.this_address();\n\n                aztec::discovery::private_logs::do_process_log(\n                    contract_address,\n                    log_ciphertext,\n                    tx_hash,\n                    unique_note_hashes_in_tx,\n                    first_nullifier_in_tx,\n                    recipient,\n                    _compute_note_hash_and_nullifier,\n                );\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            unconstrained fn process_log(\n                _log_ciphertext: BoundedVec<Field, dep::aztec::protocol_types::constants::PRIVATE_LOG_SIZE_IN_FIELDS>,\n                _tx_hash: Field,\n                _unique_note_hashes_in_tx: BoundedVec<Field, dep::aztec::protocol_types::constants::MAX_NOTE_HASHES_PER_TX>,\n                _first_nullifier_in_tx: Field,\n                _recipient: aztec::protocol_types::address::AztecAddress,\n            ) {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_notes() -> Quoted {\n    let note_discovery_call = create_note_discovery_call();\n    quote {\n        unconstrained fn sync_notes() {\n            // Because this unconstrained function is injected after the contract is processed by the macros, it'll not\n            // be modified by the macros that alter unconstrained functions. As such, we need to manually inject the\n            // unconstrained execution context since it will not be available otherwise.\n            let context = dep::aztec::context::unconstrained_context::UnconstrainedContext::new();\n\n            $note_discovery_call\n        }\n    }\n}\n"
    },
    "123": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/macros/notes/mod.nr",
      "source": "use crate::{macros::utils::AsStrQuote, note::note_getter_options::PropertySelector};\nuse protocol_types::meta::{derive_packable_and_get_packed_len, generate_serialize_to_fields};\nuse std::{\n    collections::umap::UHashMap,\n    hash::{BuildHasherDefault, Hash, Hasher, poseidon2::Poseidon2Hasher},\n    meta::{type_of, unquote},\n};\n\n/// A map from note type to (note_struct_definition, note_packed_len, note_type_id, fields).\n/// `fields` is an array of tuples where each tuple contains the name of the field/struct member (e.g. `amount`\n/// in `TokenNote`), the index of where the packed member starts in the packed note and a flag indicating\n/// whether the field is nullable or not.\npub comptime mut global NOTES: UHashMap<Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]), BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\npub comptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < 128 as u32,\n        \"A contract can contain at most 128 different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates a quote that implements `Packable` for a given struct `s`.\n/// If the note struct already implements `Packable`, we return an empty quote.\ncomptime fn derive_packable_if_not_implemented_and_get_len(s: TypeDefinition) -> (Quoted, u32) {\n    // We try to get the packed length of the note struct. If it does not implement `Packable`, we get Option::none()\n    let packed_len_typ = std::meta::typ::fresh_type_variable();\n    // We don't care about the result of the implements check. We just want the get the packed length.\n    let _ = s.as_type().implements(\n        quote { crate::protocol_types::traits::Packable<$packed_len_typ> }.as_trait_constraint(),\n    );\n    let maybe_packed_length = packed_len_typ.as_constant();\n\n    if maybe_packed_length.is_some() {\n        // We got some packed length meaning that the note struct implements `Packable`. For this reason we return\n        // an empty quote for the implementation and the packed length.\n        (quote {}, maybe_packed_length.unwrap())\n    } else {\n        // We didn't manage to get the packed length which means the note struct doesn't implement `Packable`\n        // so we derive it and return it along with the packed length.\n        derive_packable_and_get_packed_len(s)\n    }\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_interface(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::utils::arrays::array_concat(aztec::protocol_types::traits::Packable::pack(self), [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::prelude::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _): (Quoted, Type)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates note export for a given note struct `s`. The export is a global variable that contains note type id,\n/// note name and information about note fields (field name, index and whether the field is nullable or not).\n///\n/// Example:\n/// ```\n/// struct TokenNoteFields_5695262104 {\n///     amount: aztec::note::note_field::NoteField,\n///     owner: aztec::note::note_field::NoteField\n/// }\n///\n/// #[abi(notes)]\n/// global TokenNote_EXPORTS_5695262104: (Field, str<8>, TokenNoteFields_5695262104) = (\n///     0,\n///     \"TokenNote\",\n///     TokenNoteFields_5695262104 {\n///         amount: aztec::note::note_field::NoteField { index: 0, nullable: false },\n///         owner: aztec::note::note_field::NoteField { index: 1, nullable: false }\n///     }\n/// );\n///\n/// Randomly looking value at the end of the export name is generated by hashing the note struct type and is included\n/// to prevent naming collisions in case there are multiple notes with the same name imported in a contract.\npub(crate) comptime fn generate_note_export(\n    s: TypeDefinition,\n    note_type_id: Field,\n    fields: [(Quoted, u32, bool)],\n) -> Quoted {\n    let name = s.name();\n    let mut hasher = Poseidon2Hasher::default();\n    s.as_type().hash(&mut hasher);\n    let hash = hasher.finish() as u32;\n    let global_export_name = f\"{name}_EXPORTS_{hash}\".quoted_contents();\n    let note_fields_name = f\"{name}Fields_{hash}\".quoted_contents();\n    let (note_name_as_str, _) = name.as_str_quote();\n    let note_name_str_len = unquote!(quote { $note_name_as_str.as_bytes().len() });\n\n    let mut note_fields = &[];\n    let mut note_field_constructors = &[];\n    for field in fields {\n        let (name, index, nullable) = field;\n        note_fields = note_fields.push_back(quote { $name: aztec::note::note_field::NoteField });\n        note_field_constructors = note_field_constructors.push_back(\n            quote { $name: aztec::note::note_field::NoteField { index: $index, nullable: $nullable }},\n        );\n    }\n\n    let note_fields = note_fields.join(quote {,});\n    let note_field_constructors = note_field_constructors.join(quote {,});\n\n    quote {\n        pub struct $note_fields_name {\n            pub $note_fields\n        }\n\n        #[abi(notes)]\n        global $global_export_name: (Field, str<$note_name_str_len>, $note_fields_name) = ($note_type_id, $note_name_as_str, $note_fields_name { $note_field_constructors });\n    }\n}\n\n/// Registers a note struct `note` with the given `note_packed_len`, `note_type_id`, `fixed_fields` and\n/// `nullable_fields` in the global `NOTES` map.\ncomptime fn register_note(\n    note: TypeDefinition,\n    note_packed_len: u32,\n    note_type_id: Field,\n    fixed_fields: [(Quoted, Type, u32)],\n    nullable_fields: [(Quoted, Type, u32)],\n) {\n    let mut fields = &[];\n    for field in fixed_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, false));\n    }\n    for field in nullable_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, true));\n    }\n\n    NOTES.insert(note.as_type(), (note, note_packed_len, note_type_id, fields));\n}\n\n/// Separates note struct members into fixed and nullable ones. It also stores the index of where each struct member\n/// starts in the serialized note. Note that each struct member can occupy multiple fields (as in Field type).\ncomptime fn index_note_fields(\n    s: TypeDefinition,\n    nullable_fields: [Quoted],\n) -> ([(Quoted, Type, u32)], [(Quoted, Type, u32)]) {\n    let mut indexed_fixed_fields: [(Quoted, Type, u32)] = &[];\n    let mut indexed_nullable_fields = &[];\n    let mut counter: u32 = 0;\n    for field in s.fields_as_written() {\n        let (name, typ) = field;\n        if nullable_fields.all(|field| field != name) {\n            indexed_fixed_fields = indexed_fixed_fields.push_back((name, typ, counter));\n        } else {\n            indexed_nullable_fields = indexed_nullable_fields.push_back((name, typ, counter));\n        }\n        let (serialization_fields, _) = generate_serialize_to_fields(name, typ, &[], true);\n        // Each struct member can occupy multiple fields so we need to increment the counter accordingly\n        counter += serialization_fields.len();\n    }\n    (indexed_fixed_fields, indexed_nullable_fields)\n}\n\n/// Generates the following:\n/// - NoteTypeProperties\n/// - NoteType trait implementation\n/// - NoteHash trait implementation\n/// - Packable implementation\n///\n/// Registers the note in the global `NOTES` map.\n///\n/// For more details on the generated code, see the individual functions.\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $note_hash_impl\n        $packable_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - Packable implementation: Enables serialization/deserialization of the note\n///\n/// # Registration\n/// Registers the note in the global `NOTES` map with:\n/// - Note type ID\n/// - Packed length\n/// - Field indices and nullability\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n    let note_type_id = get_next_note_type_id();\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    let note_properties = generate_note_properties(s);\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $packable_impl\n    }\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    assert(\n        has_owner,\n        \"Note must have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n"
    },
    "124": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/macros/storage/mod.nr",
      "source": "use std::{collections::umap::UHashMap, hash::{BuildHasherDefault, poseidon2::Poseidon2Hasher}};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\nuse super::utils::is_note;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract. Only a single struct in the entire contract\n/// should have this macro (or `storage_no_init`) applied to it.\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot }, false);\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n/// Only a single struct in the entire contract should have this macro (or `storage`) applied to it.\npub comptime fn storage_no_init(_s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(\n    typ: Type,\n    slot: Quoted,\n    parent_is_map: bool,\n) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot }, true);\n        (quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }, 1)\n    } else {\n        let storage_size = if parent_is_map {\n            // Variables inside a map do not require contiguous slots since the map slot derivation is assumed to result\n            // in slots very far away from one another.\n            1\n        } else {\n            let (_, container_struct_generics) = typ.as_data_type().unwrap();\n            let stored_struct = container_struct_generics[0];\n\n            if is_note(stored_struct) {\n                // Private notes always occupy a single slot, since the slot is only used as a state variable\n                // identifier.\n                1\n            } else {\n                get_storage_size(typ)\n            }\n        };\n\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        (quote { $struct_name::new(context, $slot)}, storage_size)\n    }\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n"
    },
    "125": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/macros/utils.nr",
      "source": "use std::meta::unquote;\n\npub(crate) comptime fn get_fn_visibility(f: FunctionDefinition) -> Quoted {\n    if f.has_named_attribute(\"private\") {\n        quote { private }\n    } else if f.has_named_attribute(\"public\") {\n        quote { public }\n    } else {\n        panic(f\"Function is neither private nor public\")\n    }\n}\n\npub(crate) comptime fn is_fn_private(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"private\")\n}\n\npub(crate) comptime fn is_fn_public(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"public\")\n}\n\npub(crate) comptime fn is_fn_view(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"view\")\n}\n\npub(crate) comptime fn is_fn_internal(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"internal\")\n}\n\npub(crate) comptime fn is_fn_initializer(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"initializer\")\n}\n\npub(crate) comptime fn fn_has_noinitcheck(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"noinitcheck\")\n}\n\n/// Takes a function body as a collection of expressions, and alters it by prepending and appending quoted values.\npub(crate) comptime fn modify_fn_body(body: [Expr], prepend: Quoted, append: Quoted) -> Expr {\n    // We need to quote the body before we can alter its contents, so we fold it by quoting each expression.\n    let mut body_quote = body.fold(quote {}, |full_quote: Quoted, expr: Expr| {\n        let expr_quote = expr.quoted();\n        quote {\n                $full_quote\n                $expr_quote\n            }\n    });\n    body_quote = quote {\n        {\n            $prepend\n            $body_quote\n            $append\n        }\n    };\n    let body_expr = body_quote.as_expr();\n    body_expr.expect(f\"Body is not an expression: {body_quote}\")\n}\n\npub(crate) comptime fn add_to_field_slice(slice_name: Quoted, name: Quoted, typ: Type) -> Quoted {\n    if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        quote { $slice_name = $slice_name.push_back($name as Field); }\n    } else if typ.as_data_type().is_some() {\n        // We invoke serialize as a static trait function rather than calling $name.serialize() directly in the quote\n        // to avoid \"trait not in scope\" compiler warnings.\n        quote { $slice_name = $slice_name.append(aztec::protocol_types::traits::Serialize::serialize($name)); }\n    } else if typ.as_array().is_some() {\n        let (element_type, _) = typ.as_array().unwrap();\n        let serialized_name = f\"{name}_serialized\".quoted_contents();\n        // We invoke serialize as a static trait function rather than calling x.serialize() directly in the quote\n        // to avoid \"trait not in scope\" compiler warnings.\n        quote {\n            let $serialized_name = $name.map(|x: $element_type | aztec::protocol_types::traits::Serialize::serialize(x));\n            for i in 0..$name.len() {\n                $slice_name = $slice_name.append($serialized_name[i].as_slice());\n            }\n        }\n    } else if typ.as_str().is_some() {\n        quote {\n            $slice_name = $slice_name.append($name.as_bytes().map(| byte: u8 | byte as Field).as_slice());\n        }\n    } else {\n        panic(\n            f\"Cannot add to slice: unsupported type {typ} variable {name}\",\n        )\n    }\n}\n\n/// Adds a value to a hash::ArgsHasher. Structs and values inside arrays are required to implement the Serialize trait.\npub(crate) comptime fn add_to_hasher(hasher_name: Quoted, name: Quoted, typ: Type) -> Quoted {\n    if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        quote { $hasher_name.add($name as Field); }\n    } else if typ.as_data_type().is_some() {\n        quote { $hasher_name.add_multiple(dep::aztec::protocol_types::traits::Serialize::serialize($name)); }\n    } else if typ.as_array().is_some() {\n        let (element_type, _) = typ.as_array().unwrap();\n        let serialized_name = f\"{name}_serialized\".quoted_contents();\n        quote {\n           let $serialized_name = $name.map(|x: $element_type | dep::aztec::protocol_types::traits::Serialize::serialize(x));\n            for i in 0..$name.len() {\n                $hasher_name.add_multiple($serialized_name[i]);\n            }\n        }\n    } else if typ.as_str().is_some() {\n        quote {\n            $hasher_name.add_multiple($name.as_bytes().map(| byte: u8 | byte as Field));\n        }\n    } else {\n        panic(\n            f\"Cannot add to hasher: unsupported type {typ} of variable {name}\",\n        )\n    }\n}\n\ncomptime fn signature_of_type(typ: Type) -> Quoted {\n    if typ.is_field() {\n        quote {Field}\n    } else if typ.as_integer().is_some() {\n        let (is_signed, bit_size) = typ.as_integer().unwrap();\n        if is_signed {\n            f\"i{bit_size}\".quoted_contents()\n        } else {\n            f\"u{bit_size}\".quoted_contents()\n        }\n    } else if typ.is_bool() {\n        quote {bool}\n    } else if typ.as_str().is_some() {\n        let str_len_typ = typ.as_str().unwrap();\n        let str_len = str_len_typ.as_constant().unwrap();\n        f\"str<{str_len}>\".quoted_contents()\n    } else if typ.as_array().is_some() {\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let element_typ_quote = signature_of_type(element_type);\n        f\"[{element_typ_quote};{array_len}]\".quoted_contents()\n    } else if typ.as_data_type().is_some() {\n        let (s, generics) = typ.as_data_type().unwrap();\n        let field_signatures = s\n            .fields(generics)\n            .map(|(_, typ): (Quoted, Type)| signature_of_type(typ))\n            .join(quote {,});\n        f\"({field_signatures})\".quoted_contents()\n    } else if typ.as_tuple().is_some() {\n        // Note that tuples are handled the same way as structs\n        let types = typ.as_tuple().unwrap();\n        let field_signatures = types.map(|typ: Type| signature_of_type(typ)).join(quote {,});\n        f\"({field_signatures})\".quoted_contents()\n    } else {\n        panic(f\"Unsupported type {typ}\")\n    }\n}\n\npub(crate) trait AsStrQuote {\n    fn as_str_quote(self) -> (Self, u32);\n}\n\nimpl<let N: u32, Env> AsStrQuote for Quoted {\n    // Used to convert an arbitrary quoted type into a quoted string, removing whitespace between tokens\n    comptime fn as_str_quote(self) -> (Quoted, u32) {\n        let tokens = self.tokens();\n        let mut acc: [u8] = &[];\n        let mut total_len: u32 = 0;\n        for token in tokens {\n            let token_as_fmt_str = f\"{token}\";\n            let token_as_str = unquote!(quote {$token_as_fmt_str});\n            let token_len = unquote!(quote { $token_as_str.as_bytes().len() });\n            let token_as_bytes = unquote!(quote { $token_as_str.as_bytes().as_slice() });\n            total_len += token_len;\n            acc = acc.append(token_as_bytes);\n        }\n        let result = unquote!(\n            quote {\n                let signature_as_array: [u8; $total_len] = $acc.as_array();\n                signature_as_array.as_str_unchecked()\n            },\n        );\n        (quote { $result }, total_len)\n    }\n}\n\npub(crate) comptime fn compute_fn_selector(f: FunctionDefinition) -> Field {\n    // The function selector is computed from the function signature, which is made up of the function name and types of\n    // parameters, but not including the return type. For example, given:\n    //\n    // fn foo(a: Field, b: AztecAddress) -> Field\n    //\n    // The signature will be \"foo(Field,AztecAddress)\".\n    let fn_name = f.name();\n    let args_signatures =\n        f.parameters().map(|(_, typ): (Quoted, Type)| signature_of_type(typ)).join(quote {,});\n    let signature_quote = quote { $fn_name($args_signatures) };\n    let (signature_str_quote, _) = signature_quote.as_str_quote();\n\n    let computation_quote = quote {\n        protocol_types::traits::ToField::to_field(protocol_types::abis::function_selector::FunctionSelector::from_signature($signature_str_quote))\n    };\n    unquote!(computation_quote)\n}\n\npub(crate) comptime fn compute_event_selector(s: TypeDefinition) -> Field {\n    // The event selector is computed from the type signature of the struct in the event, similar to how one might type\n    // the constructor function. For example, given:\n    //\n    // struct Foo {\n    //   a: Field,\n    //   b: AztecAddress,\n    // }\n    //\n    // The signature will be \"Foo(Field,AztecAddress)\".\n    let event_name = s.name();\n    let args_signatures = s\n        .fields_as_written()\n        .map(|(_, typ): (Quoted, Type)| {\n            // signature_of_type can handle structs, so this supports nested structs\n            // FIXME: Field generics are not handled here!\n            signature_of_type(typ)\n        })\n        .join(quote {,});\n    let signature_quote = quote { $event_name($args_signatures) };\n    let (signature_str_quote, _) = signature_quote.as_str_quote();\n\n    let computation_quote = quote {\n        protocol_types::traits::ToField::to_field(protocol_types::abis::event_selector::EventSelector::from_signature($signature_str_quote))\n    };\n    unquote!(computation_quote)\n}\n\n/// Returns how many storage slots a type needs to reserve for itself. State variables must implement the Storage trait\n/// for slots to be allocated for them.\npub(crate) comptime fn get_storage_size(typ: Type) -> u32 {\n    // We create a type variable for the storage size. We can't simply read the value used in the implementation because\n    // it may not be a constant (e.g. N + 1). We then bind it to the implementation of the Storage trait.\n    let storage_size = std::meta::typ::fresh_type_variable();\n    assert(\n        typ.implements(quote { crate::state_vars::Storage<$storage_size> }.as_trait_constraint()),\n        f\"Attempted to fetch storage size, but {typ} does not implement the Storage trait\",\n    );\n\n    storage_size.as_constant().unwrap()\n}\n\npub(crate) comptime fn module_has_storage(m: Module) -> bool {\n    m.structs().any(|s: TypeDefinition| {\n        s.has_named_attribute(\"storage\") | s.has_named_attribute(\"storage_no_init\")\n    })\n}\n\npub(crate) comptime fn module_has_initializer(m: Module) -> bool {\n    m.functions().any(|f: FunctionDefinition| is_fn_initializer(f))\n}\n\npub(crate) comptime fn is_note(typ: Type) -> bool {\n    typ.as_data_type().map_or(false, |struc: (TypeDefinition, [Type])| {\n        let (def, _) = struc;\n        def.has_named_attribute(\"note\")\n            | def.has_named_attribute(\"partial_note\")\n            | def.has_named_attribute(\"custom_note\")\n    })\n}\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `noir-protocol-circuits/crates/types/src/meta/mod.nr`. We maintain separate\n/// copies because importing it here from there would cause the `target_trait` to be interpreted in the context\n/// of the protocol circuits types crate, making it impossible to compile code for traits from this crate\n/// (e.g. NoteType).\npub(crate) comptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ.get_trait_impl(trait_constraint).expect(f\"Type does not implement trait\").methods().filter(\n        |m| m.name() == target_method,\n    )[0]\n        .as_typed_expr()\n}\n"
    },
    "136": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr",
      "source": "use protocol_types::traits::Serialize;\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, nonce: Field },\n//   Settled{ nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_nonce }\n            }\n        } else if maybe_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n"
    },
    "139": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/note/utils.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let nonce = retrieved_note.metadata.to_pending_previous_phase().nonce();\n\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n"
    },
    "142": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"
    },
    "143": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr",
      "source": "use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n"
    },
    "144": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr",
      "source": "use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) -> Field {}\n\npub unconstrained fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) -> Field {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) -> Field {}\n\npub unconstrained fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) -> Field {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"
    },
    "145": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
    },
    "146": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr",
      "source": "/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values) };\n}\n\npub unconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field]) {\n    let _ = store_in_execution_cache_oracle(values);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field]) -> Field {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n"
    },
    "147": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress,\n    constants::CONTRACT_INSTANCE_LENGTH,\n    contract_class_id::ContractClassId,\n    contract_instance::ContractInstance,\n    traits::{Deserialize, FromField},\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(\n    _address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(\n    address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance =\n        unsafe { ContractInstance::deserialize(get_contract_instance_internal(address)) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"
    },
    "152": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr",
      "source": "use dep::protocol_types::{\n    abis::validation_requests::{\n        key_validation_request::KEY_VALIDATION_REQUEST_LENGTH, KeyValidationRequest,\n    },\n    traits::Deserialize,\n};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"
    },
    "153": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"
    },
    "156": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/oracle/note_discovery.nr",
      "source": "use crate::discovery::MAX_NOTE_PACKED_LEN;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PUBLIC_LOG_DATA_SIZE_IN_FIELDS},\n};\n\n/// Finds new notes that may have been sent to all registered accounts in PXE in the current contract and makes them\n/// available for later querying via the `get_notes` oracle.\npub unconstrained fn sync_notes() {\n    sync_notes_oracle();\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle() {}\n\n/// Informs PXE of a note's existence so that it can later be retrieved by the `getNotes` oracle. The note will be\n/// scoped to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The packed note is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was successfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        packed_note,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n/// The contents of a public log, plus contextual information about the transaction in which the log was emitted. This\n/// is the data required in order to discover notes that are being delivered in a log.\n// TODO(#11639): this could also be used to fetch private logs, but the `BoundedVec` maximum length is that of a public\n// log.\npub struct LogWithTxData {\n    pub log_content: BoundedVec<Field, PUBLIC_LOG_DATA_SIZE_IN_FIELDS>,\n    pub tx_hash: Field,\n    /// The array of new note hashes created by `tx_hash`\n    pub unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    /// The first nullifier created by `tx_hash`\n    pub first_nullifier_in_tx: Field,\n}\n\n/// Fetches a log from the node that has the corresponding `tag`. The log can be either a public or a private log, and\n/// the tag is the first field in the log's content. Returns `Option::none` if no such log exists. Throws if more than\n/// one log with that tag exists.\n/// Public logs have an extra field included at the beginning with the address of the contract that emitted them.\n// TODO(#11627): handle multiple logs with the same tag.\n// TODO(#10273): improve contract siloing of logs, don't introduce an extra field.\npub unconstrained fn get_log_by_tag(tag: Field) -> Option<LogWithTxData> {\n    get_log_by_tag_oracle(tag)\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n\n#[oracle(getLogByTag)]\nunconstrained fn get_log_by_tag_oracle(tag: Field) -> Option<LogWithTxData> {}\n"
    },
    "159": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr",
      "source": "use dep::protocol_types::{\n    address::aztec_address::AztecAddress,\n    point::{Point, POINT_LENGTH},\n    traits::Deserialize,\n};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(\n    address: AztecAddress,\n    ephPk: Point,\n) -> [Field; POINT_LENGTH] {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    let fields = get_shared_secret_oracle(address, ephPk);\n    Point::deserialize(fields)\n}\n"
    },
    "16": {
      "path": "std/embedded_curve_ops.nr",
      "source": "use crate::cmp::Eq;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint {\n        x: 1,\n        y: 17631683881184975370165255887551781615748388533673675138860,\n        is_infinite: false,\n    };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint {\n        x: point1.x + (x_coordinates_match as Field),\n        y: point1.y,\n        is_infinite: x_coordinates_match,\n    };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result = point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"
    },
    "162": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr",
      "source": "use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"
    },
    "169": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr",
      "source": "use crate::{\n    context::{PrivateContext, PublicContext, UnconstrainedContext},\n    state_vars::storage::Storage,\n    utils::with_hash::WithHash,\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::Packable};\n\n/// Stores an immutable value in public state which can be read from public, private and unconstrained execution\n/// contexts.\n///\n/// Leverages `WithHash<T>` to enable efficient private reads of public storage. `WithHash` wrapper allows for\n/// efficient reads by verifying large values through a single hash check and then proving inclusion only of the hash\n/// in the public storage. This reduces the number of required tree inclusion proofs from O(M) to O(1).\n///\n/// This is valuable when T packs to multiple fields, as it maintains \"almost constant\" verification overhead\n/// regardless of the original data size.\n///\n/// # Optimizing private reads in your contract\n/// Given that reading T from public immutable in private has \"almost constant\" constraints cost for different sizes\n/// of T it is recommended to group multiple values into a single struct when they are being read together. This can\n/// typically be some kind of configuration set up during contract initialization. E.g.:\n///\n/// ```noir\n/// use dep::aztec::protocol_types::{address::AztecAddress, traits::Packable};\n/// use std::meta::derive;\n///\n/// #[derive(Eq, Packable)]\n/// pub struct Config \\{\n///     pub address_1: AztecAddress,\n///     pub value_1: u128,\n///     pub value_2: u64,\n///     ...\n/// }\n/// ```\n///\n// docs:start:public_immutable_struct\npub struct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\n/// `WithHash<T>` stores both the packed value (using N fields) and its hash (1 field), requiring N = M + 1 total\n/// fields.\nimpl<T, Context, let M: u32, let N: u32> Storage<N> for PublicImmutable<T, Context>\nwhere\n    WithHash<T, M>: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, &mut PublicContext>\nwhere\n    T: Packable<T_PACKED_LEN> + Eq,\n{\n    // docs:start:public_immutable_struct_write\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, WithHash::new(value));\n    }\n    // docs:end:public_immutable_struct_write\n\n    // Note that we don't access the context, but we do call oracles that are only available in public\n    // docs:start:public_immutable_struct_read\n    pub fn read(self) -> T {\n        WithHash::public_storage_read(*self.context, self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, UnconstrainedContext>\nwhere\n    T: Packable<T_PACKED_LEN> + Eq,\n{\n    pub unconstrained fn read(self) -> T {\n        WithHash::unconstrained_public_storage_read(self.context, self.storage_slot)\n    }\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, &mut PrivateContext>\nwhere\n    T: Packable<T_PACKED_LEN> + Eq,\n{\n    pub fn read(self) -> T {\n        WithHash::historical_public_storage_read(\n            self.context.get_block_header(),\n            self.context.this_address(),\n            self.storage_slot,\n        )\n    }\n}\n"
    },
    "17": {
      "path": "std/field/bn254.nr",
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"
    },
    "170": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr",
      "source": "use crate::context::{PublicContext, UnconstrainedContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicMutable<T, &mut PublicContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicMutable<T, UnconstrainedContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    pub unconstrained fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"
    },
    "18": {
      "path": "std/field/mod.nr",
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"
    },
    "184": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/utils/array/append.nr",
      "source": "/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n"
    },
    "186": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/utils/array/mod.nr",
      "source": "pub mod append;\npub mod collapse;\npub mod subarray;\npub mod subbvec;\n\npub use append::append;\npub use collapse::collapse;\npub use subarray::subarray;\npub use subbvec::subbvec;\n\n// This will eventually be replaced by `BoundedVec::for_each`, once that's implemented.\npub unconstrained fn for_each_in_bounded_vec<T, let MaxLen: u32, Env>(\n    vec: BoundedVec<T, MaxLen>,\n    f: fn[Env](T, u32) -> (),\n) {\n    for i in 0..vec.len() {\n        f(vec.get_unchecked(i), i);\n    }\n}\n"
    },
    "187": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr",
      "source": "/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n"
    },
    "188": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr",
      "source": "use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n"
    },
    "190": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr",
      "source": "use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n"
    },
    "191": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr",
      "source": "// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n"
    },
    "193": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/utils/field.nr",
      "source": "use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n"
    },
    "195": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/utils/point.nr",
      "source": "use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n"
    },
    "199": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/utils/with_hash.nr",
      "source": "use crate::{\n    context::{PublicContext, UnconstrainedContext},\n    history::public_storage::PublicStorageHistoricalRead,\n    oracle,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, hash::poseidon2_hash, traits::Packable,\n};\n\n/// A struct that allows for efficient reading of value `T` from public storage in private.\n///\n/// The efficient reads are achieved by verifying large values through a single hash check\n/// and then proving inclusion only of the hash in public storage. This reduces the number\n/// of required tree inclusion proofs from `N` to 1.\n///\n/// # Type Parameters\n/// - `T`: The underlying type being wrapped, must implement `Packable<N>`\n/// - `N`: The number of field elements required to pack values of type `T`\npub struct WithHash<T, let N: u32> {\n    value: T,\n    packed: [Field; N],\n    hash: Field,\n}\n\nimpl<T, let N: u32> WithHash<T, N>\nwhere\n    T: Packable<N> + Eq,\n{\n    pub fn new(value: T) -> Self {\n        let packed = value.pack();\n        Self { value, packed, hash: poseidon2_hash(packed) }\n    }\n\n    pub fn get_value(self) -> T {\n        self.value\n    }\n\n    pub fn get_hash(self) -> Field {\n        self.hash\n    }\n\n    pub fn public_storage_read(context: PublicContext, storage_slot: Field) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub unconstrained fn unconstrained_public_storage_read(\n        context: UnconstrainedContext,\n        storage_slot: Field,\n    ) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub fn historical_public_storage_read(\n        header: BlockHeader,\n        address: AztecAddress,\n        storage_slot: Field,\n    ) -> T {\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for each field in `packed`, but that would require one\n        // full sibling path per storage slot (since due to kernel siloing the storage is not contiguous). Instead, we\n        // get an oracle to provide us the values, and instead we prove inclusion of their hash, which is both a much\n        // smaller proof (a single slot), and also independent of the size of T (except in that we need to pack and hash T).\n        let hint = WithHash::new(\n            // Safety: We verify that a hash of the hint/packed data matches the stored hash.\n            unsafe {\n                oracle::storage::storage_read(address, storage_slot, historical_block_number)\n            },\n        );\n\n        let hash = header.public_storage_historical_read(storage_slot + N as Field, address);\n\n        if hash != 0 {\n            assert_eq(hash, hint.get_hash(), \"Hint values do not match hash\");\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized. Therefore, the hints must then be zero\n            // (i.e. the default value for public storage) as well.\n            assert_eq(\n                hint.get_value(),\n                T::unpack(std::mem::zeroed()),\n                \"Non-zero hint for zero hash\",\n            );\n        };\n\n        hint.get_value()\n    }\n}\n\nimpl<T, let N: u32> Packable<N + 1> for WithHash<T, N>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n        for i in 0..N {\n            result[i] = self.packed[i];\n        }\n        result[N] = self.hash;\n\n        result\n    }\n\n    fn unpack(packed: [Field; N + 1]) -> Self {\n        let mut value_packed: [Field; N] = std::mem::zeroed();\n        for i in 0..N {\n            value_packed[i] = packed[i];\n        }\n        let hash = packed[N];\n\n        Self { value: T::unpack(value_packed), packed: value_packed, hash }\n    }\n}\n\nmod test {\n    use crate::{\n        oracle::random::random,\n        test::{\n            helpers::{cheatcodes, test_environment::TestEnvironment},\n            mocks::mock_struct::MockStruct,\n        },\n        utils::with_hash::WithHash,\n    };\n    use dep::protocol_types::hash::poseidon2_hash;\n    use dep::protocol_types::traits::{Packable, ToField};\n    use dep::std::{mem, test::OracleMock};\n\n    global storage_slot: Field = 47;\n\n    #[test]\n    unconstrained fn create_and_recover() {\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n        let recovered = WithHash::unpack(value_with_hash.pack());\n\n        assert_eq(recovered.value, value);\n        assert_eq(recovered.packed, value.pack());\n        assert_eq(recovered.hash, poseidon2_hash(value.pack()));\n    }\n\n    #[test]\n    unconstrained fn read_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n\n        // We should get zeroed value\n        let expected: MockStruct = mem::zeroed();\n        assert_eq(result, expected);\n    }\n\n    #[test]\n    unconstrained fn read_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n\n        // We write the value with hash to storage\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            storage_slot,\n            value_with_hash.pack(),\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n\n        assert_eq(result, value);\n    }\n\n    #[test(should_fail_with = \"Non-zero hint for zero hash\")]\n    unconstrained fn test_bad_hint_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        env.advance_block_to(6);\n\n        let value_packed = MockStruct { a: 1, b: 1 }.pack();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        // Mock the oracle to return a non-zero hint/packed value\n        let _ = OracleMock::mock(\"storageRead\")\n            .with_params((\n                address.to_field(), storage_slot, block_header.global_variables.block_number as u32,\n                value_packed.len(),\n            ))\n            .returns(value_packed)\n            .times(1);\n\n        // This should revert because the hint value is non-zero and the hash is zero (default value of storage)\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n    }\n\n    #[test(should_fail_with = \"Hint values do not match hash\")]\n    unconstrained fn test_bad_hint_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value_packed = MockStruct { a: 5, b: 3 }.pack();\n\n        // We write the value to storage\n        cheatcodes::direct_storage_write(env.contract_address(), storage_slot, value_packed);\n\n        // Now we write incorrect hash to the hash storage slot\n        let incorrect_hash = random();\n        let hash_storage_slot = storage_slot + (value_packed.len() as Field);\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            hash_storage_slot,\n            [incorrect_hash],\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n    }\n}\n"
    },
    "217": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"
    },
    "24": {
      "path": "std/hash/poseidon2.nr",
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
    },
    "253": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr",
      "source": "use crate::{point::Point, traits::{Deserialize, Empty, Serialize}};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pub pk_m: Point,\n    pub sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [self.pk_m.x, self.pk_m.y, self.pk_m.is_infinite as Field, self.sk_app]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool },\n            sk_app: fields[3],\n        }\n    }\n}\n"
    },
    "260": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr",
      "source": "use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse ec::{pow, sqrt};\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"
    },
    "261": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr",
      "source": "use crate::{\n    constants::ETH_ADDRESS_LENGTH,\n    traits::{Deserialize, Empty, Packable, Serialize, ToField},\n};\n\npub struct EthAddress {\n    inner: Field,\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl Packable<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn pack(self) -> [Field; ETH_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size::<160>();\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"
    },
    "277": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr",
      "source": "/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"
    },
    "278": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
      "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"
    },
    "292": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr",
      "source": "use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `omit`: A list of field names (as `Quoted`) to be excluded from the serialized output.\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, &[], false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, &[], false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], &[], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, &[], false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with Omitted Field and packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// Serializing while omitting `value2`:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, MyStruct, &[quote { self.value2 }], true)\n/// // Returns:\n/// // ([`value_packed[0]`], [`let value_packed = self.value.pack()`])\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    omit: [Quoted],\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // Proceed if none of the omit rules omits this name\n    if !omit.any(|to_omit| to_omit == name) {\n        // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n        let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n        let packable_constraint =\n            quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n        if (should_pack & typ.implements(packable_constraint)) {\n            // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n            // method, add the resulting field array to `aux_vars` and each field to `fields`.\n            let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n            // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n            let name_at_one_token = collapse_to_one_token(name);\n            let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n            // We add the individual fields to the fields array\n            let pack_method = get_trait_impl_method(\n                typ,\n                quote { crate::traits::Packable<$packed_len> },\n                quote { pack },\n            );\n            let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n            for i in 0..packed_len {\n                fields = fields.push_back(quote { $packed_struct_name[$i] });\n            }\n\n            // We add the new auxiliary variable to the aux_vars array\n            aux_vars = aux_vars.push_back(packed_struct);\n        } else if typ.is_field() {\n            // For field we just add the value to fields\n            fields = fields.push_back(name);\n        } else if typ.as_integer().is_some() | typ.is_bool() {\n            // For integer and bool we just cast to Field and add the value to fields\n            fields = fields.push_back(quote { $name as Field });\n        } else if typ.as_data_type().is_some() {\n            // For struct we pref\n            let nested_struct = typ.as_data_type().unwrap();\n            let params = nested_struct.0.fields(nested_struct.1);\n            let struct_flattened = params.map(|(param_name, param_type): (Quoted, Type)| {\n                let maybe_prefixed_name = if name == quote {} {\n                    // Triggered when the param name is of a value available in the current scope (e.g. a function\n                    // argument) --> then we don't prefix the name with anything.\n                    param_name\n                } else {\n                    // Triggered when we want to prefix the param name with the `name` from function input. This\n                    // can typically be `self` when implementing a method on a struct.\n                    quote { $name.$param_name }\n                };\n                generate_serialize_to_fields(\n                    quote {$maybe_prefixed_name},\n                    param_type,\n                    omit,\n                    should_pack,\n                )\n            });\n            let struct_flattened_fields = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n            );\n            let struct_flattened_aux_vars = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n            );\n            fields = fields.append(struct_flattened_fields);\n            aux_vars = aux_vars.append(struct_flattened_aux_vars);\n        } else if typ.as_array().is_some() {\n            // For array we recursively call `generate_serialize_to_fields(...)` for each element\n            let (element_type, array_len) = typ.as_array().unwrap();\n            let array_len = array_len.as_constant().unwrap();\n            for i in 0..array_len {\n                let (element_fields, element_aux_vars) = generate_serialize_to_fields(\n                    quote { $name[$i] },\n                    element_type,\n                    omit,\n                    should_pack,\n                );\n                fields = fields.append(element_fields);\n                aux_vars = aux_vars.append(element_aux_vars);\n            }\n        } else if typ.as_str().is_some() {\n            // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n            // then we add each byte to fields as a Field\n            let length_type = typ.as_str().unwrap();\n            let str_len = length_type.as_constant().unwrap();\n            let as_member = name.as_expr().unwrap().as_member_access();\n            let var_name = if as_member.is_some() {\n                as_member.unwrap().1\n            } else {\n                name\n            };\n            let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n            let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n            for i in 0..str_len {\n                fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n            }\n            aux_vars = aux_vars.push_back(as_bytes);\n        } else {\n            panic(\n                f\"Unsupported type for serialization of argument {name} and type {typ}\",\n            )\n        }\n    }\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub(crate) comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    quote {\n        impl Serialize<$serialized_len> for $typ {\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) =\n        generate_serialize_to_fields(quote { self }, typ, &[], packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n"
    },
    "294": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr",
      "source": "pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n"
    },
    "295": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr",
      "source": "use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n"
    },
    "3": {
      "path": "std/array/mod.nr",
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n"
    },
    "304": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr",
      "source": "use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize, ToField},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"
    },
    "315": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr",
      "source": "use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"
    },
    "329": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr",
      "source": "use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n}\n\nimpl<T> Empty for Option<T> {\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n"
    },
    "333": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr",
      "source": "use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"
    },
    "334": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"
    },
    "350": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr",
      "source": "pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n"
    },
    "351": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr",
      "source": "pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"
    },
    "353": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
      "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
    },
    "365": {
      "path": "/Users/eidoo/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr",
      "source": "use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n"
    },
    "394": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/uint-note/src/uint_note.nr",
      "source": "use dep::aztec::{\n    context::{PrivateContext, PublicContext},\n    encrypted_logs::log_assembly_strategies::default_aes128,\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::custom_note,\n    note::note_interface::{NoteHash, NoteType},\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress,\n        constants::{GENERATOR_INDEX__NOTE_HASH, GENERATOR_INDEX__NOTE_NULLIFIER},\n        hash::poseidon2_hash_with_separator,\n        traits::{Deserialize, Hash, Packable, Serialize, ToField},\n        utils::arrays::array_concat,\n    },\n};\n\n// UintNote supports partial notes, i.e. the ability to create an incomplete note in private, hiding certain values (the\n// owner, storage slot and randomness), and then completing the note in public with the ones missing (the amount).\n// Partial notes are being actively developed and are not currently fully supported via macros, and so we rely on the\n// #[custom_note] macro to implement it manually, resulting in some boilerplate. This is expected to be unnecessary once\n// macro support is expanded.\n\n/// A private note representing a numeric value associated to an account (e.g. a token balance).\n#[custom_note]\n#[derive(Eq, Serialize)]\npub struct UintNote {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintPartialNotePrivateContent, and\n    //   b) have the public field at the end\n    // Correct ordering is checked by the tests in this module.\n\n    /// The owner of the note, i.e. the account whose nullifier secret key is required to compute the nullifier.\n    owner: AztecAddress,\n    /// Random value, protects against note hash preimage attacks.\n    randomness: Field,\n    /// The number stored in the note.\n    value: u128,\n}\n\nimpl NoteHash for UintNote {\n    fn compute_note_hash(self, storage_slot: Field) -> Field {\n        // Partial notes can be implemented by having the note hash be either the result of multiscalar multiplication\n        // (MSM), or two rounds of poseidon. MSM results in more constraints and is only required when multiple variants\n        // of partial notes are supported. Because UintNote has just one variant (where the value is public), we use\n        // poseidon instead.\n\n        // We must compute the same note hash as would be produced by a partial note created and completed with the same\n        // values, so that notes all behave the same way regardless of how they were created. To achieve this, we\n        // perform both steps of the partial note computation.\n\n        // First we create the partial note from a commitment to the private content (including storage slot).\n        let private_content =\n            UintPartialNotePrivateContent { owner: self.owner, randomness: self.randomness };\n        let partial_note = PartialUintNote {\n            commitment: private_content.compute_partial_commitment(storage_slot),\n        };\n\n        // Then compute the completion note hash. In a real partial note this step would be performed in public.\n        partial_note.compute_complete_note_hash(self.value)\n    }\n\n    // The nullifiers are nothing special - this is just the canonical implementation that would be injected by the\n    // #[note] macro.\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n\n    unconstrained fn compute_nullifier_unconstrained(self, note_hash_for_nullify: Field) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl UintNote {\n    pub fn new(value: u128, owner: AztecAddress) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { value, owner, randomness }\n    }\n\n    pub fn get_value(self) -> u128 {\n        self.value\n    }\n\n    /// Creates a partial note that will hide the owner and storage slot but not the value, since the note will be later\n    /// completed in public. This is a powerful technique for scenarios in which the value cannot be known in private\n    /// (e.g. because it depends on some public state, such as a DEX).\n    ///\n    /// The returned `PartialUintNote` value must be sent to public execution via a secure channel, since it is not\n    /// possible to verify the integrity of its contents due to it hiding information. The recommended ways to do this\n    /// are to retrieve it from public storage, or to receive it in an internal public function call.\n    ///\n    /// Each partial note should only be used once, since otherwise multiple notes would be linked together and known to\n    /// belong to the same owner.\n    ///\n    /// As part of the partial note creation process, a log will be sent to `recipient` from `sender` so that they can\n    /// discover the note. `recipient` will typically be the same as `owner`.\n    pub fn partial(\n        owner: AztecAddress,\n        storage_slot: Field,\n        context: &mut PrivateContext,\n        recipient: AztecAddress,\n        sender: AztecAddress,\n    ) -> PartialUintNote {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n\n        // We create a commitment to the private data, which we then use to construct the log we send to the recipient.\n        let commitment = UintPartialNotePrivateContent { owner, randomness }\n            .compute_partial_commitment(storage_slot);\n\n        // Our partial note log encoding scheme includes a field with the tag of the public completion log, and we use\n        // the commitment as the tag. This is good for multiple reasons:\n        //  - the commitment is uniquely tied to this partial note\n        //  - the commitment is already public information, so we're not revealing anything else\n        //  - we don't need to create any additional information, private or public, for the tag\n        //  - other contracts cannot impersonate us and emit logs with the same tag due to public log siloing\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n\n        // TODO: we're abusing the note encoding scheme by computing the log for a fake note type with such a note type\n        // id that the recipient will realize that these are the private fields of a partial note. Ideally we'd not rely\n        // on this crude mechanism and we'd instead compute it as a proper event log. However, given the current state\n        // of the log library it's far easier to do it this way.\n        let encrypted_log = default_aes128::note::compute_log(\n            *context,\n            private_log_content,\n            storage_slot,\n            recipient,\n            sender,\n        );\n        context.emit_private_log(encrypted_log);\n\n        PartialUintNote { commitment }\n    }\n}\n\n/// The private content of a partial UintNote, i.e. the fields that will remain private. All other note fields will be\n/// made public.\n#[derive(Packable)]\nstruct UintPartialNotePrivateContent {\n    // The ordering of these fields is important given that it must match that of UintNote.\n    // Correct ordering is checked by the tests in this module.\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl UintPartialNotePrivateContent {\n    fn compute_partial_commitment(self, storage_slot: Field) -> Field {\n        // Here we commit to all private values, including the storage slot.\n        poseidon2_hash_with_separator(\n            array_concat(self.pack(), [storage_slot]),\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\n#[derive(Packable)]\nstruct PrivateUintPartialNotePrivateLogContent {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintNote, and\n    //   b) have the public log tag at the beginning\n    // Correct ordering is checked by the tests in this module.\n    public_log_tag: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl NoteType for PrivateUintPartialNotePrivateLogContent {\n    fn get_id() -> Field {\n        // We abuse the fact that note type ids are 7 bits long to use the 8th bit indicate the log corresponds to a\n        // partial note. Ideally we'd use proper events with selectors, but those are not handled well at the moment.\n        UintNote::get_id() + 128\n    }\n}\n\n/// A partial instance of a UintNote. This value represents a private commitment to the owner, randomness and storage\n/// slot, but the value field has not yet been set. A partial note can be completed in public with the `complete`\n/// function (revealing the value to the public), resulting in a UintNote that can be used like any other one (except\n/// of course that its value is known).\n#[derive(Packable, Serialize, Deserialize)]\npub struct PartialUintNote {\n    commitment: Field,\n}\n\nimpl PartialUintNote {\n    pub fn commitment(self) -> Field {\n        self.commitment\n    }\n}\n\nimpl PartialUintNote {\n    /// Completes the partial note, creating a new note that can be used like any other UintNote.\n    pub fn complete(self, value: u128, context: &mut PublicContext) {\n        // We need to do two things:\n        //  - emit a public log containing the public fields (the value). The contract will later find it by searching\n        //  for the expected tag (which is simply the partial note commitment).\n        //  - insert the completion note hash (i.e. the hash of the note) into the note hash tree. This is typically\n        //  only done in private to hide the preimage of the hash that is inserted, but completed partial notes are\n        //  inserted in public as the public values are provided and the note hash computed.\n        context.emit_public_log(self.compute_note_completion_log(value));\n        context.push_note_hash(self.compute_complete_note_hash(value));\n    }\n\n    fn compute_note_completion_log(self, value: u128) -> [Field; 2] {\n        // The first field of this log must be the tag that the recipient of the partial note private field logs\n        // expects, which is equal to the partial note commitment.\n        [self.commitment, value.to_field()]\n    }\n\n    fn compute_complete_note_hash(self, value: u128) -> Field {\n        // Here we finalize the note hash by including the (public) value into the partial note commitment. Note that we\n        // use the same generator index as we used for the first round of poseidon - this is not an issue.\n        poseidon2_hash_with_separator(\n            [self.commitment, value.to_field()],\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\nmod test {\n    use super::{\n        PartialUintNote, PrivateUintPartialNotePrivateLogContent, UintNote,\n        UintPartialNotePrivateContent,\n    };\n    use dep::aztec::{\n        note::note_interface::NoteHash,\n        protocol_types::{\n            address::AztecAddress,\n            traits::{FromField, Packable},\n            utils::arrays::array_concat,\n        },\n        utils::array::subarray,\n    };\n\n    global value: u128 = 17;\n    global randomness: Field = 42;\n    global owner: AztecAddress = AztecAddress::from_field(50);\n    global storage_slot: Field = 13;\n\n    #[test]\n    fn note_hash_matches_completed_partial_note_hash() {\n        // Tests that a UintNote has the same note hash as a PartialUintNote created and then completed with the same\n        // private values. This requires for the same hash function to be used in both flows, with the fields in the\n        // same order.\n\n        let note = UintNote { value, randomness, owner };\n        let note_hash = note.compute_note_hash(storage_slot);\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n\n        let partial_note = PartialUintNote {\n            commitment: partial_note_private_content.compute_partial_commitment(storage_slot),\n        };\n        let completed_partial_note_hash = partial_note.compute_complete_note_hash(value);\n\n        assert_eq(note_hash, completed_partial_note_hash);\n    }\n\n    #[test]\n    fn unpack_from_partial_note_encoding() {\n        // Tests that the packed representation of a regular UintNote can be reconstructed given the partial note\n        // private fields log and the public completion log, ensuring the recipient will be able to compute the\n        // completed note as if it were a regular UintNote.\n\n        let note = UintNote { value, randomness, owner };\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n        let commitment = partial_note_private_content.compute_partial_commitment(storage_slot);\n\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n        let partial_note = PartialUintNote { commitment };\n\n        // The first field of the partial note private content is the public completion log tag, so it should match the\n        // first field of the public log.\n        assert_eq(\n            private_log_content.pack()[0],\n            partial_note.compute_note_completion_log(value)[0],\n        );\n\n        // Then we extract all fields except the first of both logs (i.e. the public log tag), and combine them to\n        // produce the note's packed representation. This requires that the members of the intermediate structs are in\n        // the same order as in UintNote.\n        let private_log_without_public_tag: [_; 2] = subarray(private_log_content.pack(), 1);\n        let public_log_without_tag: [_; 1] =\n            subarray(partial_note.compute_note_completion_log(value), 1);\n\n        assert_eq(\n            array_concat(private_log_without_public_tag, public_log_without_tag),\n            note.pack(),\n        );\n    }\n}\n"
    },
    "46": {
      "path": "std/option.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"
    },
    "47": {
      "path": "std/panic.nr",
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
    },
    "5": {
      "path": "std/cmp.nr",
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n"
    },
    "50": {
      "path": "std/slice.nr",
      "source": "use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n"
    },
    "55": {
      "path": "/Users/eidoo/Desktop/work/substancelabs/aztec-evm-bridge/aztec/aztec_gateway_7683/src/main.nr",
      "source": "mod config;\nmod types;\nmod utils;\n\nuse dep::aztec::macros::aztec;\n\n#[aztec]\npub contract AztecGateway7683 {\n    // context.chain_id() returns 1, which corresponds to the mainnet, making it unsuitable for our use case.\n    // Instead, we designate 999999 as the destination domain.\n    global LOCAL_DESTINATION_DOMAIN: u32 = 999999;\n\n    global UNKNOWN: u32 = 0;\n    global OPENED: u32 = 1;\n    global FILLED: u32 = 2;\n    global INITIATED_PRIVATELY: u32 = 3;\n\n    global SETTLE_ORDER_TYPE: [u8; 32] = [\n        25, 30, 167, 118, 189, 110, 12, 213, 106, 109, 68, 186, 74, 234, 47, 236, 70, 139, 74, 11,\n        76, 29, 136, 13, 64, 37, 146, 158, 235, 97, 93, 13,\n    ]; // sha256(\"SETTLE_ORDER_TYPE\")\n\n    use crate::{\n        config::Config,\n        types::{\n            events::{Filled, Open},\n            helpers::InternalRCOParams,\n            onchain_cross_chain_order::OnchainCrossChainOrder,\n            order_data::{\n                ORDER_DATA_LENGTH, ORDER_DATA_TYPE, OrderData, PRIVATE_ORDER, PUBLIC_ORDER,\n            },\n            resolved_cross_chain_order::{\n                FILL_INSTRUCTIONS_MAX_INSTRUCTIONS, FillInstruction, MAX_SPENT_MAX_OUTPUTS,\n                MIN_RECEIVED_MAX_OUTPUTS, Output, RESOLVED_CROSS_CHAIN_LENGTH,\n                ResolvedCrossChainOrder,\n            },\n        },\n        utils::{u32_to_u8_4, u8_32_to_aztec_address, u8_32_to_u128},\n    };\n    use dep::aztec::{\n        macros::{functions::{initializer, internal, private, public, view}, storage::storage},\n        prelude::{AztecAddress, EthAddress, Map, PublicImmutable, PublicMutable},\n        protocol_types::{hash::sha256_to_field, traits::{Packable, Serialize}},\n    };\n    use token::Token;\n\n    #[storage]\n    struct Storage<Context> {\n        config: PublicImmutable<Config, Context>,\n        claimable_orders: Map<Field, PublicMutable<Field, Context>, Context>,\n        open_orders: Map<Field, PublicMutable<[u8; 32], Context>, Context>,\n        order_status: Map<Field, PublicMutable<u32, Context>, Context>,\n        used_nonces: Map<AztecAddress, Map<Field, PublicMutable<bool, Context>, Context>, Context>,\n        filled_orders_block_numbers: Map<Field, PublicMutable<Field, Context>, Context>,\n    }\n\n    #[public]\n    #[initializer]\n    fn constructor(portal: EthAddress) {\n        storage.config.initialize(Config { portal });\n    }\n\n    #[public]\n    fn open(order: OnchainCrossChainOrder) {\n        assert(order.order_data_type == ORDER_DATA_TYPE, \"Invalid order data type\");\n\n        let data = _resolve(order, context.msg_sender(), context.timestamp());\n        let order_data = data.order_data;\n        let resolved_order = data.resolved_cross_chain_order;\n        let order_id = data.order_id;\n        let nonce = Field::from_be_bytes(order_data.sender_nonce);\n\n        assert(order_data.order_type == PUBLIC_ORDER, \"Not a public order\");\n        assert(order_data.origin_domain == LOCAL_DESTINATION_DOMAIN, \"Invalid order origin domain\");\n        assert(!storage.used_nonces.at(context.msg_sender()).at(nonce).read(), \"Invalid nonce\");\n\n        // We cannot store the entire order_data + ORDER_DATA_TYPE as it raises the following error:\n        // Reached the limit (63) on number of 'public data (contract storage) write' per tx 'storage_write_opcode(storage_slot, value).\n        // For this reason we store a commitment of it.\n        storage.open_orders.at(order_id).write(_get_open_order_commitment(order.order_data));\n        storage.order_status.at(order_id).write(OPENED);\n        storage.used_nonces.at(context.msg_sender()).at(nonce).write(true);\n\n        for i in 0..resolved_order.min_received.len() {\n            let min_received = resolved_order.min_received[i];\n\n            Token::at(u8_32_to_aztec_address(min_received.token))\n                .transfer_in_public(\n                    context.msg_sender(),\n                    context.this_address(),\n                    u8_32_to_u128(min_received.amount),\n                    nonce,\n                )\n                .call(&mut context);\n        }\n\n        let event = Open::new(data.order_id_bytes, resolved_order.serialize());\n        context.emit_public_log(event.open1.pack());\n        context.emit_public_log(event.open2.pack());\n    }\n\n    #[private]\n    fn open_private(order: OnchainCrossChainOrder) {\n        assert(order.order_data_type == ORDER_DATA_TYPE, \"Invalid order data type\");\n\n        // NOTE: Force the sender to be zero in order to avoid creating a connection between the sender and the recipient.\n        let data = _resolve(order, AztecAddress::zero(), 0 as u64);\n        let order_data = data.order_data;\n        let resolved_order = data.resolved_cross_chain_order;\n        let order_id = data.order_id;\n        let nonce = Field::from_be_bytes(order_data.sender_nonce);\n\n        assert(order_data.order_type == PRIVATE_ORDER, \"Not a private order\");\n        assert(order_data.origin_domain == LOCAL_DESTINATION_DOMAIN, \"Invalid order origin domain\");\n        AztecGateway7683::at(context.this_address())\n            ._assert_nonce_and_set_order_details(order_id, order.order_data, nonce)\n            .enqueue(&mut context);\n\n        for i in 0..resolved_order.min_received.len() {\n            let min_received = resolved_order.min_received[i];\n\n            Token::at(u8_32_to_aztec_address(min_received.token))\n                .transfer_in_private(\n                    context.msg_sender(),\n                    context.this_address(),\n                    u8_32_to_u128(min_received.amount),\n                    nonce,\n                )\n                .call(&mut context);\n        }\n\n        AztecGateway7683::at(context.this_address())\n            ._emit_open(data.order_id_bytes, resolved_order.serialize())\n            .enqueue(&mut context);\n    }\n\n    #[private]\n    fn claim_private(\n        secret: [u8; 32],\n        order_id_bytes: [u8; 32],\n        origin_data_bytes: [u8; ORDER_DATA_LENGTH],\n        filler_data_bytes: [u8; 32],\n    ) {\n        let order_id = Field::from_be_bytes(order_id_bytes);\n\n        AztecGateway7683::at(context.this_address())\n            ._check_order_status(order_id, INITIATED_PRIVATELY)\n            .enqueue(&mut context);\n\n        // verify that a commitment exists for the given order.\n        AztecGateway7683::at(context.this_address())\n            ._check_order_commitment(order_id, origin_data_bytes, filler_data_bytes)\n            .enqueue(&mut context);\n\n        let order_data = OrderData::decode(origin_data_bytes);\n        // if a commitment exists, the order is valid, allowing us to compare the recipient with hash(secret).\n        assert(sha256::digest(secret) == order_data.recipient, \"Invalid secret\");\n\n        Token::at(u8_32_to_aztec_address(order_data.output_token))\n            .transfer_to_private(context.msg_sender(), u8_32_to_u128(order_data.amount_out))\n            .call(&mut context);\n\n        AztecGateway7683::at(context.this_address())._update_order_status(order_id, FILLED).enqueue(\n            &mut context,\n        );\n\n        // TODO: store filled order\n\n        AztecGateway7683::at(context.this_address())\n            ._trigger_settlement(\n                order_id,\n                order_id_bytes,\n                filler_data_bytes, // at the moment filler data contains the ethereum address where the filler wants to receive the funds during the settlement\n            )\n            .enqueue(&mut context);\n    }\n\n    #[public]\n    fn fill(\n        order_id_bytes: [u8; 32],\n        origin_data_bytes: [u8; ORDER_DATA_LENGTH],\n        filler_data_bytes: [u8; 32],\n    ) {\n        let order_id = Field::from_be_bytes(order_id_bytes);\n        AztecGateway7683::at(context.this_address())._check_order_status(order_id, UNKNOWN).call(\n            &mut context,\n        );\n\n        let order_data = OrderData::decode(origin_data_bytes);\n        assert(order_data.order_type == PUBLIC_ORDER, \"Not a public order\");\n        assert(order_id_bytes == sha256::digest(origin_data_bytes), \"Invalid order id\");\n        assert(context.timestamp() as u32 <= order_data.fill_deadline, \"Order fill expired\");\n        assert(\n            order_data.destination_domain == LOCAL_DESTINATION_DOMAIN,\n            \"Invalid order destination domain\",\n        );\n\n        Token::at(u8_32_to_aztec_address(order_data.output_token))\n            .transfer_in_public(\n                context.msg_sender(),\n                u8_32_to_aztec_address(order_data.recipient),\n                u8_32_to_u128(order_data.amount_out),\n                Field::from_be_bytes(order_data.sender_nonce),\n            )\n            .call(&mut context);\n\n        storage.order_status.at(order_id).write(FILLED);\n        // TODO: store filled order\n\n        AztecGateway7683::at(context.this_address())\n            ._trigger_settlement(\n                order_id,\n                order_id_bytes,\n                filler_data_bytes, // at the moment filler data contains the ethereum address where the filler wants to receive the funds during the settlement\n            )\n            .call(&mut context);\n\n        context.emit_public_log(Filled {\n            order_id: order_id_bytes,\n            origin_data: origin_data_bytes,\n            filler_data: filler_data_bytes,\n        }\n            .pack());\n    }\n\n    #[public]\n    fn fill_private(\n        order_id_bytes: [u8; 32],\n        origin_data_bytes: [u8; ORDER_DATA_LENGTH],\n        filler_data_bytes: [u8; 32],\n    ) {\n        let order_id = Field::from_be_bytes(order_id_bytes);\n        AztecGateway7683::at(context.this_address())._check_order_status(order_id, UNKNOWN).call(\n            &mut context,\n        );\n\n        let order_data = OrderData::decode(origin_data_bytes);\n        assert(order_data.order_type == PRIVATE_ORDER, \"Not a private order\");\n        assert(order_id_bytes == sha256::digest(origin_data_bytes), \"Invalid order id\");\n        assert(context.timestamp() as u32 <= order_data.fill_deadline, \"Order fill expired\");\n        assert(order_data.destination_domain == LOCAL_DESTINATION_DOMAIN, \"Invalid order domain\");\n\n        Token::at(u8_32_to_aztec_address(order_data.output_token))\n            .transfer_in_public(\n                context.msg_sender(),\n                context.this_address(),\n                u8_32_to_u128(order_data.amount_out),\n                0,\n            )\n            .call(&mut context);\n\n        storage.claimable_orders.at(order_id).write(sha256_to_field(_get_order_pre_image(\n            origin_data_bytes,\n            filler_data_bytes,\n        )));\n        storage.order_status.at(order_id).write(INITIATED_PRIVATELY);\n\n        context.emit_public_log(Filled {\n            order_id: order_id_bytes,\n            origin_data: origin_data_bytes,\n            filler_data: filler_data_bytes,\n        }\n            .pack());\n    }\n\n    #[public]\n    #[view]\n    fn get_order_status(order_id_bytes: [u8; 32]) -> u32 {\n        storage.order_status.at(Field::from_be_bytes(order_id_bytes)).read()\n    }\n\n    #[public]\n    #[view]\n    fn get_filled_order_block_number(order_id_bytes: [u8; 32]) -> Field {\n        storage.filled_orders_block_numbers.at(Field::from_be_bytes(order_id_bytes)).read()\n    }\n\n    #[internal]\n    #[public]\n    fn _assert_nonce_and_set_order_details(\n        order_id: Field,\n        order_data: [u8; ORDER_DATA_LENGTH],\n        nonce: Field,\n    ) {\n        assert(!storage.used_nonces.at(context.msg_sender()).at(nonce).read(), \"Invalid nonce\");\n        // We cannot store the entire order_data + ORDER_DATA_TYPE as it raises the following error:\n        // Reached the limit (63) on number of 'public data (contract storage) write' per tx 'storage_write_opcode(storage_slot, value).\n        // For this reason we store a commitment of it.\n        storage.open_orders.at(order_id).write(_get_open_order_commitment(order_data));\n        storage.order_status.at(order_id).write(OPENED);\n        storage.used_nonces.at(context.msg_sender()).at(nonce).write(true);\n    }\n\n    #[contract_library_method]\n    fn _get_open_order_commitment(order_data: [u8; ORDER_DATA_LENGTH]) -> [u8; 32] {\n        let mut data: [u8; ORDER_DATA_LENGTH + 32] = [0; ORDER_DATA_LENGTH + 32];\n        for i in 0..32 {\n            data[i] = ORDER_DATA_TYPE[i];\n        }\n        for i in 0..ORDER_DATA_LENGTH {\n            data[i + 32] = order_data[i];\n        }\n        sha256::digest(data)\n    }\n\n    #[public]\n    #[internal]\n    fn _check_order_status(order_id: Field, status: u32) {\n        assert(storage.order_status.at(order_id).read() == status, \"Invalid order status\");\n    }\n\n    #[public]\n    #[internal]\n    fn _check_order_commitment(\n        order_id: Field,\n        origin_data_bytes: [u8; ORDER_DATA_LENGTH],\n        filler_data_bytes: [u8; 32],\n    ) {\n        let order_commitment = storage.claimable_orders.at(order_id).read();\n        assert(\n            order_commitment\n                == sha256_to_field(_get_order_pre_image(origin_data_bytes, filler_data_bytes)),\n            \"Invalid order\",\n        );\n    }\n\n    #[public]\n    #[internal]\n    fn _emit_open(\n        order_id_bytes: [u8; 32],\n        resolved_order_bytes: [Field; RESOLVED_CROSS_CHAIN_LENGTH],\n    ) {\n        let event = Open::new(order_id_bytes, resolved_order_bytes);\n        context.emit_public_log(event.open1.pack());\n        context.emit_public_log(event.open2.pack());\n    }\n\n    #[public]\n    #[internal]\n    fn _trigger_settlement(order_id: Field, order_id_bytes: [u8; 32], filler_data: [u8; 32]) {\n        storage.filled_orders_block_numbers.at(order_id).write(context.block_number());\n\n        let mut settlement_message_bytes: [u8; 96] = [0; 96];\n\n        for i in 0..32 {\n            settlement_message_bytes[i] = SETTLE_ORDER_TYPE[i]; // order_type\n            settlement_message_bytes[i + 32] = order_id_bytes[i]; // order_id_bytes\n            settlement_message_bytes[i + 64] = filler_data[i]; // recipient\n        }\n\n        let config = storage.config.read();\n        context.message_portal(config.portal, sha256_to_field(settlement_message_bytes));\n    }\n\n    #[contract_library_method]\n    fn _resolve(\n        order: OnchainCrossChainOrder,\n        sender: AztecAddress,\n        timestamp: u64,\n    ) -> InternalRCOParams {\n        let mut order_data = OrderData::decode(order.order_data);\n\n        assert(order_data.fill_deadline == order.fill_deadline, \"Invalid fill deadline\");\n        assert(u8_32_to_aztec_address(order_data.sender) == sender, \"Invalid order sender\");\n\n        let order_id_bytes = sha256::digest(order.order_data);\n        let order_id = Field::from_be_bytes(order_id_bytes);\n        let destination_domain_bytes = u32_to_u8_4(order_data.destination_domain);\n\n        let min_received_output = Output {\n            token: order_data.input_token,\n            recipient: [0; 32],\n            amount: order_data.amount_in,\n            chain_id: u32_to_u8_4(order_data.origin_domain),\n        };\n        let min_received: [Output; MIN_RECEIVED_MAX_OUTPUTS] =\n            [min_received_output; MIN_RECEIVED_MAX_OUTPUTS];\n\n        let max_spent_output = Output {\n            token: order_data.output_token,\n            recipient: order_data.recipient,\n            amount: order_data.amount_out,\n            chain_id: destination_domain_bytes,\n        };\n        let max_spent: [Output; MAX_SPENT_MAX_OUTPUTS] = [max_spent_output; MAX_SPENT_MAX_OUTPUTS];\n\n        let fill_instruction = FillInstruction {\n            destination_chain_id: destination_domain_bytes,\n            destination_settler: order_data.destination_settler,\n            origin_data: order.order_data,\n        };\n        let fill_instructions: [FillInstruction; FILL_INSTRUCTIONS_MAX_INSTRUCTIONS] =\n            [fill_instruction; FILL_INSTRUCTIONS_MAX_INSTRUCTIONS];\n\n        let resolved_order = ResolvedCrossChainOrder {\n            user: order_data.sender,\n            origin_chain_id: u32_to_u8_4(LOCAL_DESTINATION_DOMAIN),\n            open_deadline: u32_to_u8_4(timestamp as u32),\n            fill_deadline: u32_to_u8_4(order.fill_deadline),\n            order_id: order_id_bytes,\n            min_received,\n            max_spent,\n            fill_instructions,\n        };\n\n        InternalRCOParams {\n            order_id_bytes,\n            order_id,\n            resolved_cross_chain_order: resolved_order,\n            order_data,\n        }\n    }\n\n    #[contract_library_method]\n    fn _get_order_pre_image(\n        origin_data_bytes: [u8; ORDER_DATA_LENGTH],\n        filler_data_bytes: [u8; 32],\n    ) -> [u8; ORDER_DATA_LENGTH + 32] {\n        let mut pre_image: [u8; ORDER_DATA_LENGTH + 32] = [0; ORDER_DATA_LENGTH + 32];\n        for i in 0..ORDER_DATA_LENGTH {\n            pre_image[i] = origin_data_bytes[i];\n        }\n        for i in 0..32 {\n            pre_image[i + ORDER_DATA_LENGTH] = filler_data_bytes[i];\n        }\n        pre_image\n    }\n\n    #[public]\n    #[internal]\n    fn _update_order_status(order_id: Field, status: u32) {\n        storage.order_status.at(order_id).write(status);\n    }\n}\n"
    },
    "56": {
      "path": "/Users/eidoo/Desktop/work/substancelabs/aztec-evm-bridge/aztec/aztec_gateway_7683/src/types/events.nr",
      "source": "use crate::types::{\n    order_data::ORDER_DATA_LENGTH, resolved_cross_chain_order::RESOLVED_CROSS_CHAIN_LENGTH,\n};\nuse dep::aztec::protocol_types::traits::{Packable, Serialize};\n\n// #[event]\n#[derive(Serialize)]\npub struct Filled {\n    pub order_id: [u8; 32],\n    pub origin_data: [u8; ORDER_DATA_LENGTH],\n    pub filler_data: [u8; 32],\n}\n\n// 301 + 32 + 32 = 365      365 / 31 = 11.74 = 12 + 1 (residual bytes) = 13\nimpl Packable<13> for Filled {\n    fn pack(self) -> [Field; 13] {\n        let mut result = [0; 13];\n        let mut residual_bytes = [0; 31];\n\n        let mut order_id_31 = [0; 31];\n        let mut filler_data_31 = [0; 31];\n        for i in 0..31 {\n            order_id_31[i] = self.order_id[i];\n            filler_data_31[i] = self.filler_data[i];\n        }\n        residual_bytes[0] = self.order_id[31];\n        residual_bytes[10] = self.filler_data[31];\n\n        for i in 0..10 {\n            let mut partial = [0; 31];\n            let offset = 32 * i;\n\n            for j in 0..31 {\n                let k = offset + j;\n                if k < ORDER_DATA_LENGTH {\n                    partial[j] = self.origin_data[k];\n                }\n            }\n            result[i + 1] = Field::from_be_bytes(partial);\n\n            if i < 9 {\n                // no residual bytes for the last one\n                residual_bytes[i + 1] = self.origin_data[offset + 31];\n            }\n        }\n\n        result[0] = Field::from_be_bytes::<31>(order_id_31);\n        result[11] = Field::from_be_bytes::<31>(filler_data_31);\n        result[12] = Field::from_be_bytes::<31>(residual_bytes);\n        result\n    }\n\n    fn unpack(fields: [Field; 13]) -> Self {\n        assert(true == false, \"not implemented\");\n        Self { order_id: [0; 32], origin_data: [0; ORDER_DATA_LENGTH], filler_data: [0; 32] }\n    }\n}\n\n// #[event]\n#[derive(Serialize)]\npub struct Open1 {\n    pub order_id: [u8; 32],\n    pub resolved_order: [u8; 340],\n}\n\nimpl Packable<13> for Open1 {\n    fn pack(self) -> [Field; 13] {\n        let mut result = [0; 13];\n        let mut residual_bytes = [0; 31];\n\n        let mut order_id_31 = [0; 31];\n        for i in 0..31 {\n            order_id_31[i] = self.order_id[i];\n        }\n        residual_bytes[0] = self.order_id[31];\n\n        for i in 0..12 {\n            let mut partial = [0; 31];\n            let offset = 32 * i;\n\n            for j in 0..31 {\n                let k = offset + j;\n                if k < 340 {\n                    partial[j] = self.resolved_order[k];\n                }\n            }\n            result[i + 1] = Field::from_be_bytes(partial);\n\n            let residual_bytes_offset = offset + 31;\n            if residual_bytes_offset < 340 {\n                residual_bytes[i + 1] = self.resolved_order[residual_bytes_offset];\n            }\n        }\n\n        result[0] = Field::from_be_bytes::<31>(order_id_31);\n        result[12] = Field::from_be_bytes::<31>(residual_bytes);\n        result\n    }\n\n    fn unpack(fields: [Field; 13]) -> Self {\n        assert(true == false, \"not implemented\");\n        Self { order_id: [0; 32], resolved_order: [0; 340] }\n    }\n}\n\n// #[event]\n#[derive(Serialize)]\npub struct Open2 {\n    pub order_id: [u8; 32],\n    pub resolved_order: [u8; 273],\n}\n\nimpl Packable<11> for Open2 {\n    fn pack(self) -> [Field; 11] {\n        let mut result = [0; 11];\n        let mut residual_bytes = [0; 31];\n\n        let mut order_id_31 = [0; 31];\n        for i in 0..31 {\n            order_id_31[i] = self.order_id[i];\n        }\n        residual_bytes[0] = self.order_id[31];\n\n        for i in 0..10 {\n            let mut partial = [0; 31];\n            let offset = 32 * i;\n\n            for j in 0..31 {\n                let k = offset + j;\n                if k < 273 {\n                    partial[j] = self.resolved_order[k];\n                }\n            }\n            result[i + 1] = Field::from_be_bytes(partial);\n\n            let residual_bytes_offset = offset + 31;\n            if residual_bytes_offset < 273 {\n                residual_bytes[i + 1] = self.resolved_order[residual_bytes_offset];\n            }\n        }\n\n        result[0] = Field::from_be_bytes::<31>(order_id_31);\n        result[10] = Field::from_be_bytes::<31>(residual_bytes);\n        result\n    }\n\n    fn unpack(fields: [Field; 11]) -> Self {\n        assert(true == false, \"not implemented\");\n        Self { order_id: [0; 32], resolved_order: [0; 273] }\n    }\n}\n\npub struct Open {\n    pub open1: Open1,\n    pub open2: Open2,\n}\n\nimpl Open {\n    pub fn new(order_id: [u8; 32], resolved_order: [Field; RESOLVED_CROSS_CHAIN_LENGTH]) -> Self {\n        let mut resolved_order1 = [0; 340];\n        for i in 0..340 {\n            resolved_order1[i] = resolved_order[i] as u8;\n        }\n        let mut resolved_order2 = [0; 273];\n        for i in 0..273 {\n            resolved_order2[i] = resolved_order[i + 340] as u8;\n        }\n\n        Self {\n            open1: Open1 { order_id, resolved_order: resolved_order1 },\n            open2: Open2 { order_id, resolved_order: resolved_order2 },\n        }\n    }\n}\n"
    },
    "59": {
      "path": "/Users/eidoo/Desktop/work/substancelabs/aztec-evm-bridge/aztec/aztec_gateway_7683/src/types/order_data.nr",
      "source": "use crate::utils::u8_4_to_u32;\nuse dep::aztec::protocol_types::traits::{Deserialize, Serialize};\n\npub global ORDER_DATA_LENGTH: u32 = 301;\npub global ORDER_DATA_TYPE: [u8; 32] = [\n    240, 12, 59, 246, 12, 115, 235, 151, 9, 127, 28, 152, 53, 83, 125, 160, 20, 224, 183, 85, 254,\n    148, 178, 93, 122, 200, 64, 29, 246, 103, 22, 160,\n];\n\npub global PUBLIC_ORDER: u8 = 0;\npub global PRIVATE_ORDER: u8 = 1;\n\n#[derive(Deserialize, Eq, Serialize)]\npub struct OrderData {\n    pub sender: [u8; 32],\n    pub recipient: [u8; 32],\n    pub input_token: [u8; 32],\n    pub output_token: [u8; 32],\n    pub amount_in: [u8; 32],\n    pub amount_out: [u8; 32],\n    pub sender_nonce: [u8; 32],\n    pub origin_domain: u32,\n    pub destination_domain: u32,\n    pub destination_settler: [u8; 32],\n    pub fill_deadline: u32,\n    pub order_type: u8,\n    pub data: [u8; 32],\n}\n\nimpl OrderData {\n    pub fn decode(bytes: [u8; ORDER_DATA_LENGTH]) -> OrderData {\n        let sender = u8_order_data_length_to_u8_32(bytes, 0);\n        let recipient = u8_order_data_length_to_u8_32(bytes, 32);\n        let input_token = u8_order_data_length_to_u8_32(bytes, 64);\n        let output_token = u8_order_data_length_to_u8_32(bytes, 96);\n        let amount_in = u8_order_data_length_to_u8_32(bytes, 128);\n        let amount_out = u8_order_data_length_to_u8_32(bytes, 160);\n        let sender_nonce = u8_order_data_length_to_u8_32(bytes, 192);\n        let origin_domain = u8_4_to_u32(u8_order_data_length_to_u8_4(bytes, 224));\n        let destination_domain = u8_4_to_u32(u8_order_data_length_to_u8_4(bytes, 228));\n        let destination_settler = u8_order_data_length_to_u8_32(bytes, 232);\n        let fill_deadline = u8_4_to_u32(u8_order_data_length_to_u8_4(bytes, 264));\n        let order_type = u8_order_data_length_to_u8(bytes, 268);\n        let data = u8_order_data_length_to_u8_32(bytes, 269);\n\n        OrderData {\n            sender,\n            recipient,\n            input_token,\n            output_token,\n            amount_in,\n            amount_out,\n            sender_nonce,\n            origin_domain,\n            destination_domain,\n            destination_settler,\n            fill_deadline,\n            order_type,\n            data,\n        }\n    }\n}\n\nfn u8_order_data_length_to_u8_32(bytes: [u8; ORDER_DATA_LENGTH], start: u32) -> [u8; 32] {\n    let mut result = [0; 32];\n    for i in 0..32 {\n        result[i] = bytes[start + i];\n    }\n    result\n}\n\nfn u8_order_data_length_to_u8_4(bytes: [u8; ORDER_DATA_LENGTH], start: u32) -> [u8; 4] {\n    let mut result = [0; 4];\n    for i in 0..4 {\n        result[i] = bytes[start + i];\n    }\n    result\n}\n\nfn u8_order_data_length_to_u8(bytes: [u8; ORDER_DATA_LENGTH], start: u32) -> u8 {\n    bytes[start]\n}\n"
    },
    "6": {
      "path": "std/collections/bounded_vec.nr",
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n"
    },
    "62": {
      "path": "/Users/eidoo/Desktop/work/substancelabs/aztec-evm-bridge/aztec/aztec_gateway_7683/src/utils.nr",
      "source": "use dep::aztec::{prelude::AztecAddress, protocol_types::traits::FromField};\n\npub(crate) fn u8_32_to_u128(input: [u8; 32]) -> u128 {\n    let mut result = 0;\n    for i in 0..16 {\n        result = result + (input[31 - i] as u128) * (1 << (i * 8));\n    }\n    result\n}\n\npub(crate) fn u8_4_to_u32(bytes: [u8; 4]) -> u32 {\n    let field = Field::from_be_bytes(bytes);\n    field.assert_max_bit_size::<32>();\n    field as u32\n}\n\npub(crate) fn u8_32_to_aztec_address(bytes: [u8; 32]) -> AztecAddress {\n    AztecAddress::from_field(Field::from_be_bytes(bytes))\n}\n\npub(crate) fn u32_to_u8_4(x: u32) -> [u8; 4] {\n    [((x >> 24) & 0xFF) as u8, ((x >> 16) & 0xFF) as u8, ((x >> 8) & 0xFF) as u8, (x & 0xFF) as u8]\n}\n"
    },
    "63": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/capsules/mod.nr",
      "source": "use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T, let N: u32> CapsuleArray<T>\nwhere\n    T: Serialize<N> + Deserialize<N>,\n{\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push(self, value: T) {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get(self, index: u32) -> T {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().unkonstrained().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n}\n"
    },
    "64": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, traits::Deserialize,\n};\n\nuse crate::context::{gas::GasOpts, private_context::PrivateContext, public_context::PublicContext};\n\nuse crate::hash::hash_args;\nuse crate::oracle::execution_cache;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\n// PrivateCallInterface\n\npub struct PrivateCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let returns: T = returns_hash.get_preimage();\n        returns\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateVoidCallInterface\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static }\n    }\n\n    pub fn call(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticCallInterface\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticVoidCallInterface\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static: true }\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicCallInterface\n\npub struct PublicCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            gas_opts: GasOpts::default(),\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicVoidCallInterface\n\npub struct PublicVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n\n    pub fn set_as_teardown(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.set_public_teardown_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            false,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticCallInterface\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticVoidCallInterface\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n"
    },
    "71": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
      "source": "use dep::protocol_types::debug_log::debug_log_format;\n\nuse crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n            set_public_teardown_function_call_internal,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS, PUBLIC_DISPATCH_SELECTOR,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, FromField, Hash, ToField},\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n\n        // WARNING(https://github.com/AztecProtocol/aztec-packages/issues/10558): if you delete this debug_log_format line, some tests fail.\n        debug_log_format(\n            \"Context.note_hashes, after pushing new note hash: {0}\",\n            self.note_hashes.storage().map(|nh: NoteHash| nh.value),\n        );\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        execution_cache::store(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request =\n            self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index],\n                },\n            );\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_public_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_public_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_public_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // Safety: TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle hashes the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = unsafe {\n            enqueue_public_function_call_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                counter,\n                is_static_call,\n            )\n        };\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n            args_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.set_public_teardown_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn set_public_teardown_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // Safety: TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle hashes the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = unsafe {\n            set_public_teardown_function_call_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                counter,\n                is_static_call,\n            )\n        };\n\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n            args_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
    },
    "72": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr",
      "source": "use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n\n        call(gas_for_call(gas_opts), contract_address, args);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n\n        call_static(gas_for_call(gas_opts), contract_address, args);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_opcode(gas, address, args)\n}\n\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"
    },
    "73": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/context/returns_hash.nr",
      "source": "use crate::{hash::hash_args_array, oracle::execution_cache};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct ReturnsHash {\n    hash: Field,\n}\n\nimpl ReturnsHash {\n    pub fn new(hash: Field) -> Self {\n        ReturnsHash { hash }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.hash, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.hash\n    }\n\n    /// This is only used during private execution, since in public it is the VM itself that keeps track of return\n    /// values.\n    pub fn get_preimage<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        // Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage));\n\n        Deserialize::deserialize(preimage)\n    }\n}\n"
    },
    "74": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr",
      "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"
    },
    "76": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/discovery/mod.nr",
      "source": "// TODO(#12750): don't make this value assume we're using AES.\nuse crate::encrypted_logs::log_assembly_strategies::default_aes128::note::encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\nuse dep::protocol_types::{address::AztecAddress, debug_log::debug_log};\n\npub mod private_logs;\npub mod partial_notes;\npub mod nonce_discovery;\n\n/// We reserve two fields in the note private log that are not part of the note content: one for the storage slot, and\n/// one for the combined log and note type ID.\nglobal NOTE_PRIVATE_LOG_RESERVED_FIELDS: u32 = 2;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size, encryption\n/// overhead and extra fields in the log (e.g. the combined log and note type ID).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS - NOTE_PRIVATE_LOG_RESERVED_FIELDS;\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of note discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, nonce, storage slot and note type\n/// ID and attempts to compute its note hash (not siloed by nonce nor address) and inner nullifier (not siloed by\n/// address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note_content, contract_address, nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note_content.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note_content */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the note discovery process, in which private and public logs are downloaded and inspected to find private\n/// notes, partial notes, and their completion. This is the mechanism via which PXE learns of new notes.\n///\n/// Receives the address of the contract on which discovery is performed (i.e. the contract that emitted the notes)\n/// along with its `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_notes<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing note discovery\");\n\n    private_logs::fetch_and_process_private_tagged_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    partial_notes::fetch_and_process_public_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n}\n"
    },
    "77": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/discovery/nonce_discovery.nr",
      "source": "use crate::{discovery::{ComputeNoteHashAndNullifier, MAX_NOTE_PACKED_LEN}, utils::array};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note_content: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting note discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    array::for_each_in_bounded_vec(\n        unique_note_hashes_in_tx,\n        |expected_unique_note_hash, i| {\n            // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n            // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n            let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n            // Given nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n            // the note hash at the array index we're currently processing.\n            // TODO(#11157): handle failed note_hash_and_nullifier computation\n            let hashes = compute_note_hash_and_nullifier(\n                packed_note_content,\n                storage_slot,\n                note_type_id,\n                contract_address,\n                candidate_nonce,\n            )\n                .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n            let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n            let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n            if unique_note_hash == expected_unique_note_hash {\n                // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n                // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n                // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n                // PXE may fail to realize that a given note has been nullified already, and calls to the application\n                // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n                // application already has more direct means of making a call to it fail the transaction.\n                discovered_notes.push(\n                    DiscoveredNoteInfo {\n                        nonce: candidate_nonce,\n                        note_hash: hashes.note_hash,\n                        inner_nullifier: hashes.inner_nullifier,\n                    },\n                );\n\n                // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n                // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n                // notes containing random values in order to hide their contents.\n            }\n        },\n    );\n\n    debug_log_format(\n        \"Discovered a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n"
    },
    "78": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/discovery/partial_notes.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    discovery::{\n        ComputeNoteHashAndNullifier,\n        nonce_discovery::{attempt_note_nonce_discovery, DiscoveredNoteInfo},\n        private_logs::MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN,\n    },\n    oracle::note_discovery::{deliver_note, get_log_by_tag},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::PUBLIC_LOG_DATA_SIZE_IN_FIELDS,\n    debug_log::debug_log_format,\n    traits::{Deserialize, Serialize, ToField},\n};\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\n// TODO(#11630): come up with some sort of slot allocation scheme.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = 77;\n\n/// Public logs contain an extra field at the beginning with the address of the contract that emitted them, and partial\n/// notes emit their completion tag in the log, resulting in the first two fields in the public log not being part of\n/// the packed public content.\n// TODO(#10273): improve how contract log siloing is handled\npub global NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG: u32 = 2;\n\n/// The maximum length of the packed representation of public fields in a partial note. This is limited by public log\n/// size and extra fields in the log (e.g. the tag).\npub global MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH: u32 =\n    PUBLIC_LOG_DATA_SIZE_IN_FIELDS - NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG;\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\n/// Searches for public logs that would result in the completion of pending partial notes, ultimately resulting in the\n/// notes being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_public_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    let mut i = &mut 0;\n    whyle(\n        || *i < pending_partial_notes.len(),\n        || {\n            let pending_partial_note: DeliveredPendingPartialNote = pending_partial_notes.get(*i);\n\n            let maybe_log = get_log_by_tag(pending_partial_note.note_completion_log_tag);\n            if maybe_log.is_none() {\n                debug_log_format(\n                    \"Found no completion logs for partial note with tag {}\",\n                    [pending_partial_note.note_completion_log_tag],\n                );\n                *i += 1 as u32;\n                // Note that we're not removing the pending partial note from the PXE DB, so we will continue searching\n                // for this tagged log when performing note discovery in the future until we either find it or the entry\n                // is somehow removed from the PXE DB.\n            } else {\n                debug_log_format(\n                    \"Completion log found for partial note with tag {}\",\n                    [pending_partial_note.note_completion_log_tag],\n                );\n                let log = maybe_log.unwrap();\n\n                // Public logs have an extra field at the beginning with the contract address, which we use to verify\n                // that we're getting the logs from the expected contract.\n                // TODO(#10273): improve how contract log siloing is handled\n                assert_eq(\n                    log.log_content.get(0),\n                    contract_address.to_field(),\n                    \"Got a public log emitted by a different contract\",\n                );\n\n                // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n                // private and public packed fields (i.e. the contents of the log sans the extra fields) to get the\n                // complete packed content.\n                let packed_public_note_content: BoundedVec<_, MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH> =\n                    array::subbvec(log.log_content, NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG);\n                let complete_packed_note_content = array::append(\n                    pending_partial_note.packed_private_note_content,\n                    packed_public_note_content,\n                );\n\n                let discovered_notes = attempt_note_nonce_discovery(\n                    log.unique_note_hashes_in_tx,\n                    log.first_nullifier_in_tx,\n                    compute_note_hash_and_nullifier,\n                    contract_address,\n                    pending_partial_note.storage_slot,\n                    pending_partial_note.note_type_id,\n                    complete_packed_note_content,\n                );\n\n                debug_log_format(\n                    \"Discovered {0} notes for partial note with tag {1}\",\n                    [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n                );\n\n                array::for_each_in_bounded_vec(\n                    discovered_notes,\n                    |discovered_note: DiscoveredNoteInfo, _| {\n                        // TODO:(#10728): decide how to handle notes that fail delivery. This could be due to e.g. a\n                        // temporary node connectivity issue - is simply throwing good enough here?\n                        assert(\n                            deliver_note(\n                                contract_address,\n                                pending_partial_note.storage_slot,\n                                discovered_note.nonce,\n                                complete_packed_note_content,\n                                discovered_note.note_hash,\n                                discovered_note.inner_nullifier,\n                                log.tx_hash,\n                                pending_partial_note.recipient,\n                            ),\n                            \"Failed to deliver note\",\n                        );\n                    },\n                );\n\n                // Because there is only a single log for a given tag, once we've processed the tagged log then we\n                // simply delete the pending work entry, regardless of whether it was actually completed or not.\n                // TODO(#11627): only remove the pending entry if we actually process a log that results in the note\n                // being completed.\n                pending_partial_notes.remove(*i);\n\n                // We don't increment `i` here, because CapsuleArray is contiguous and its `remove(...)` function\n                // shifts the elements to the left if the removed element is not the last element.\n            }\n        },\n    );\n}\n\n/// Custom version of a while loop, calls `body` repeatedly until `condition` returns false. To be removed once Noir\n/// supports looping in unconstrained code.\nfn whyle<Env, Env2>(condition: fn[Env]() -> bool, body: fn[Env2]() -> ()) {\n    if condition() {\n        body();\n        whyle(condition, body);\n    }\n}\n"
    },
    "79": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/discovery/private_logs.nr",
      "source": "use std::static_assert;\n\nuse crate::{\n    capsules::CapsuleArray,\n    oracle::note_discovery::{deliver_note, sync_notes},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PRIVATE_LOG_SIZE_IN_FIELDS},\n    debug_log::{debug_log, debug_log_format},\n};\n\nuse crate::discovery::{\n    ComputeNoteHashAndNullifier,\n    MAX_NOTE_PACKED_LEN,\n    nonce_discovery::{attempt_note_nonce_discovery, DiscoveredNoteInfo},\n    NOTE_PRIVATE_LOG_RESERVED_FIELDS,\n    partial_notes::{\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT, DeliveredPendingPartialNote,\n    },\n};\nuse crate::encrypted_logs::log_assembly_strategies::default_aes128::note::encryption::decrypt_log;\n// TODO(#12750): don't make this value assume we're using AES.\nuse crate::encrypted_logs::log_assembly_strategies::default_aes128::note::encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\npub global PARTIAL_NOTE_COMPLETION_LOG_TAG_LEN: u32 = 1;\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private log (i.e.\n/// the note completion log tag).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_NOTE_PACKED_LEN - PARTIAL_NOTE_COMPLETION_LOG_TAG_LEN;\n\n/// Searches for private logs that signal new private notes that are then delivered to PXE, or new partial notes that\n/// are stored in the PXE capsules so that `fetch_and_process_public_partial_note_completion_logs` can later search for\n/// public logs that will complete them.\npub unconstrained fn fetch_and_process_private_tagged_logs<Env>(\n    _contract_address: AztecAddress,\n    _compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    // We will eventually fetch tagged logs, decrypt and process them here, but for now we simply call the `syncNotes`\n    // oracle. This has PXE perform tag synchronization, log download, decryption, and finally calls to the the\n    // `process_log` contract function with the decrypted payload, which will in turn call `do_process_log` with a\n    // decrypted log, letting us continue the work outside of PXE.\n    sync_notes();\n}\n\n/// Processes a log's ciphertext by decrypting it and then searching the plaintext for private notes or partial notes. Private\n/// notes result in nonce discovery being performed prior to delivery, which requires knowledge of the transaction hash in\n/// which the notes would've been created (typically the same transaction in which the log was emitted), along with the\n/// list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier` function.\npub unconstrained fn do_process_log<Env>(\n    contract_address: AztecAddress,\n    log: BoundedVec<Field, PRIVATE_LOG_SIZE_IN_FIELDS>,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let log_plaintext = decrypt_log(log, recipient);\n\n    // The first thing to do after decrypting the log is to determine what type of private log we're processing. We\n    // currently just have two log types: 0 for private notes and 1 for partial notes. This will likely be expanded and\n    // improved upon in the future to also handle events, etc.\n\n    let (storage_slot, note_type_id, log_type_id, log_payload) =\n        destructure_log_plaintext(log_plaintext);\n\n    if log_type_id == 0 {\n        debug_log(\"Processing private note log\");\n\n        attempt_note_discovery(\n            contract_address,\n            tx_hash,\n            unique_note_hashes_in_tx,\n            first_nullifier_in_tx,\n            recipient,\n            compute_note_hash_and_nullifier,\n            storage_slot,\n            note_type_id,\n            log_payload,\n        );\n    } else if log_type_id == 1 {\n        debug_log(\"Processing partial note private log\");\n\n        process_partial_note_private_log(\n            contract_address,\n            storage_slot,\n            note_type_id,\n            log_payload,\n            recipient,\n        );\n    } else {\n        // TODO(#11569): handle events\n        debug_log_format(\n            \"Unknown log type id {0} (probably belonging to an event log)\",\n            [log_type_id],\n        );\n    }\n}\n\nunconstrained fn destructure_log_plaintext(\n    log_plaintext: BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    assert(log_plaintext.len() >= NOTE_PRIVATE_LOG_RESERVED_FIELDS);\n\n    // If NOTE_PRIVATE_LOG_RESERVED_FIELDS is changed, causing the assertion below to fail, then the declarations for\n    // `storage_slot` and `note_type_id` must be updated as well.\n    static_assert(\n        NOTE_PRIVATE_LOG_RESERVED_FIELDS == 2,\n        \"unexpected value for NOTE_PRIVATE_LOG_RESERVED_FIELDS\",\n    );\n    let storage_slot = log_plaintext.get(0);\n\n    // We currently identify log types by packing the log type ID and note type ID into a single field, called the\n    // combined type ID. We can do this because the note type ID is only 7 bits long, and so use an 8th bit to\n    // distinguish private note logs and partial note logs.\n    // This abuses the fact that the encoding of both of these logs is extremely similar, and will need improving and\n    // more formalization once we introduce other dissimilar log types, such as events. Ideally we'd be able to\n    // leverage enums and tagged unions to achieve this goal.\n    let combined_type_id = log_plaintext.get(1);\n    let note_type_id = ((combined_type_id as u64) % 128) as Field;\n    let log_type_id = ((combined_type_id as u64) / 128) as Field;\n\n    let log_payload = array::subbvec(log_plaintext, NOTE_PRIVATE_LOG_RESERVED_FIELDS);\n\n    (storage_slot, note_type_id, log_type_id, log_payload)\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note_content: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note_content,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private log\",\n        [discovered_notes.len() as Field],\n    );\n\n    array::for_each_in_bounded_vec(\n        discovered_notes,\n        |discovered_note: DiscoveredNoteInfo, _| {\n            // TODO:(#10728): handle notes that fail delivery. This could be due to e.g. a temporary node connectivity\n            // issue, and we should perhaps not have marked the tag index as taken.\n            assert(\n                deliver_note(\n                    contract_address,\n                    storage_slot,\n                    discovered_note.nonce,\n                    packed_note_content,\n                    discovered_note.note_hash,\n                    discovered_note.inner_nullifier,\n                    tx_hash,\n                    recipient,\n                ),\n                \"Failed to deliver note\",\n            );\n        },\n    );\n}\n\nunconstrained fn process_partial_note_private_log(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    log_payload: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    recipient: AztecAddress,\n) {\n    // We store the information of the partial note we found so that we can later search for the public log that will\n    // complete it. The tag is the first value in the payload, with the packed note content taking up the rest of it.\n    static_assert(\n        PARTIAL_NOTE_COMPLETION_LOG_TAG_LEN == 1,\n        \"unexpected value for PARTIAL_NOTE_COMPLETION_LOG_TAG_LEN\",\n    );\n\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag: log_payload.get(0),\n        storage_slot,\n        note_type_id,\n        packed_private_note_content: array::subbvec(log_payload, 1),\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n"
    },
    "80": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypt/aes128.nr",
      "source": "use dep::protocol_types::{\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::utils::point::point_to_bytes;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n"
    },
    "86": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/log_assembly_strategies/default_aes128/note/encryption.nr",
      "source": "use crate::{\n    encrypted_logs::{\n        encrypt::aes128::derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256,\n        log_assembly_strategies::default_aes128::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n    },\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    oracle::{\n        aes128_decrypt::aes128_decrypt_oracle,\n        notes::{get_app_tag_as_sender, increment_app_tagging_secret_index_as_sender},\n        shared_secret::get_shared_secret,\n    },\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign},\n        random::get_random_bytes,\n    },\n};\nuse protocol_types::{address::AztecAddress, constants::PRIVATE_LOG_SIZE_IN_FIELDS, traits::ToField};\nuse std::aes128::aes128_encrypt;\n\n// contract_address (32) + ciphertext_length (2) + 16 bytes pkcs#7 AES padding.\npub(crate) global HEADER_CIPHERTEXT_SIZE_IN_BYTES: u32 = 48;\n\nglobal TAG_AND_EPH_PK_X_SIZE_IN_FIELDS: u32 = 2;\nglobal EPH_PK_SIGN_BYTE_SIZE_IN_BYTES: u32 = 1;\npub global PRIVATE_LOG_PLAINTEXT_SIZE_IN_BYTES: u32 = (\n    PRIVATE_LOG_SIZE_IN_FIELDS - TAG_AND_EPH_PK_X_SIZE_IN_FIELDS\n)\n    * 31\n    - HEADER_CIPHERTEXT_SIZE_IN_BYTES\n    - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES;\n// Each field of the original note log was serialized to 32 bytes. Below we convert the bytes back to fields.\npub global PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS: u32 = PRIVATE_LOG_PLAINTEXT_SIZE_IN_BYTES / 32;\n\n/// Computes an encrypted log using AES-128 encryption in CBC mode.\n///\n/// The resulting log has the following format:\n/// ```text\n/// [\n///   tag: Field,                    // Tag for note discovery, derived from sender/recipient\n///   epk_x: Field,                  // X coordinate of ephemeral public key\n///   log_bytes: [Field],            // Encrypted data converted from bytes to fields, containing:\n///     [\n///       epk_sign: u8,              // Sign bit of ephemeral public key Y coordinate\n///       header_ciphertext: [u8],   // AES encrypted header containing:\n///         [\n///           contract_address: [u8; 32],  // Contract address that emitted the note\n///           ciphertext_length: [u8; 2],  // Length of main ciphertext in bytes\n///           padding: [u8; 14]            // PKCS#7 padding to AES block size\n///         ],\n///       ciphertext: [u8],          // AES encrypted note data containing:\n///         [\n///           plaintext_bytes: [u8],       // The plaintext\n///           padding: [u8]                // PKCS#7 padding to AES block size\n///         ],\n///       padding: [u8]              // Random padding to make log_bytes multiple of 31\n///     ],\n///   padding: [Field]               // Random padding to PRIVATE_LOG_SIZE_IN_FIELDS\n/// ]\n/// ```\n///\n/// The encryption process:\n/// 1. Generate ephemeral key-pair and ECDH shared secret with recipient\n/// 2. Derive AES key and IV from shared secret using SHA-256\n/// 3. Encrypt header and note data separately using AES-128-CBC\n/// 4. Format into final log structure with padding\npub fn encrypt_log<let PT: u32>(\n    contract_address: AztecAddress,\n    plaintext: [Field; PT],\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS] {\n    // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n    // (This process is then reversed when processing the log in `do_process_log`)\n    let plaintext_bytes = fields_to_bytes(plaintext);\n\n    // *****************************************************************************\n    // Compute the shared secret\n    // *****************************************************************************\n\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n    // (not to be confused with the tagging shared secret)\n    let ciphertext_shared_secret = derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n    // TODO: also use this shared secret for deriving note randomness.\n\n    // *****************************************************************************\n    // Convert the plaintext into whatever format the encryption function expects\n    // *****************************************************************************\n\n    // Already done for this strategy: AES expects bytes.\n\n    // *****************************************************************************\n    // Encrypt the plaintext\n    // *****************************************************************************\n\n    let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n        ciphertext_shared_secret,\n    );\n\n    let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n    // |full_pt| = |pt_length| + |pt|\n    // |pt_aes_padding| = 16 - (|full_pt| % 16)\n    // or... since a % b is the same as a - b * (a // b) (integer division), so:\n    // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n    // |ct| = |full_pt| + |pt_aes_padding|\n    //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n    //      = 16 + 16 * (|full_pt| // 16)\n    //      = 16 * (1 + |full_pt| // 16)\n    assert(ciphertext_bytes.len() == 16 * (1 + (PT * 32) / 16));\n\n    // *****************************************************************************\n    // Compute the header ciphertext\n    // *****************************************************************************\n\n    let contract_address_bytes = contract_address.to_field().to_be_bytes::<32>();\n\n    let mut header_plaintext: [u8; 32 + 2] = [0; 32 + 2];\n    for i in 0..32 {\n        header_plaintext[i] = contract_address_bytes[i];\n    }\n    let offset = 32;\n    let ciphertext_bytes_length = ciphertext_bytes.len();\n    header_plaintext[offset] = (ciphertext_bytes_length >> 8) as u8;\n    header_plaintext[offset + 1] = ciphertext_bytes_length as u8;\n\n    // TODO: this is insecure and wasteful:\n    // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n    // and again for the proper ciphertext) (at least, I never got the\n    // \"go ahead\" that this would be safe, unfortunately).\n    // \"Wasteful\", because the exact same computation is happening further down.\n    // I'm leaving that 2nd computation where it is, because this 1st computation\n    // will be imminently deleted, when the header logic is deleted.\n    let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n        ciphertext_shared_secret,\n    );\n\n    // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n    // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n    // bytes larger than the input in this case.\n    let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n    // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n    assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n    // *****************************************************************************\n    // Prepend / append more bytes of data to the ciphertext, before converting back\n    // to fields.\n    // *****************************************************************************\n\n    let mut log_bytes_padding_to_mult_31 = get_arr_of_size__log_bytes_padding__from_PT::<PT * 32>();\n    // Safety: this randomness won't be constrained to be random. It's in the\n    // interest of the executor of this fn to encrypt with random bytes.\n    log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n    let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PT * 32>();\n\n    assert(\n        log_bytes.len() % 31 == 0,\n        \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n    );\n\n    log_bytes[0] = eph_pk_sign_byte;\n    let mut offset = 1;\n    for i in 0..header_ciphertext_bytes.len() {\n        log_bytes[offset + i] = header_ciphertext_bytes[i];\n    }\n    offset += header_ciphertext_bytes.len();\n\n    for i in 0..ciphertext_bytes.len() {\n        log_bytes[offset + i] = ciphertext_bytes[i];\n    }\n    offset += ciphertext_bytes.len();\n\n    for i in 0..log_bytes_padding_to_mult_31.len() {\n        log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n    }\n\n    assert(\n        offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n        \"Something has gone wrong\",\n    );\n\n    // *****************************************************************************\n    // Convert bytes back to fields\n    // *****************************************************************************\n\n    // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n    // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n    // should cover a full field.\n    let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n    // *****************************************************************************\n    // Prepend / append fields, to create the final log\n    // *****************************************************************************\n\n    // In this strategy, we prepend [tag, eph_pk.x]\n\n    // Safety: We assume that the sender wants for the recipient to find the tagged note,\n    // and therefore that they will cooperate and use the correct tag. Usage of a bad\n    // tag will result in the recipient not being able to find the note automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n\n    let mut final_log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS] = [0; PRIVATE_LOG_SIZE_IN_FIELDS];\n\n    final_log[0] = tag;\n    final_log[1] = eph_pk.x;\n\n    let mut offset = 2;\n    for i in 0..log_bytes_as_fields.len() {\n        final_log[offset + i] = log_bytes_as_fields[i];\n    }\n    offset += log_bytes_as_fields.len();\n\n    for i in offset..PRIVATE_LOG_SIZE_IN_FIELDS {\n        // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n        // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n        // TODO(#12749): Long term, this is not a good solution.\n\n        // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n        // contents publicly. It is therefore fine to trust the sender to provide random padding.\n        let field_bytes = unsafe { get_random_bytes::<31>() };\n        final_log[i] = Field::from_be_bytes::<31>(field_bytes);\n    }\n\n    final_log\n}\n\npub unconstrained fn decrypt_log(\n    log: BoundedVec<Field, PRIVATE_LOG_SIZE_IN_FIELDS>,\n    recipient: AztecAddress,\n) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n    // let tag = log.get(0);\n    let eph_pk_x = log.get(1);\n\n    let log_ciphertext_fields = array::subbvec::<Field, PRIVATE_LOG_SIZE_IN_FIELDS, PRIVATE_LOG_SIZE_IN_FIELDS - TAG_AND_EPH_PK_X_SIZE_IN_FIELDS>(\n        log,\n        TAG_AND_EPH_PK_X_SIZE_IN_FIELDS,\n    );\n\n    // Convert the ciphertext represented as fields to a byte representation (its original format)\n    let log_ciphertext = bytes_from_fields(log_ciphertext_fields);\n\n    // First byte of the ciphertext represents the ephemeral public key sign\n    let eph_pk_sign_bool = log_ciphertext.get(0) as bool;\n    // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n    let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n    // Derive shared secret and symmetric key\n    let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n    let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n        ciphertext_shared_secret,\n    );\n\n    // Extract the header ciphertext\n    let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n    let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n        array::subarray(log_ciphertext.storage(), header_start);\n    // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n    // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n    // is fixed. But we do it anyway to not have to have duplicate oracles.\n    let header_ciphertext_bvec =\n        BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n    // Decrypt header\n    let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n    // Extract ciphertext length from header (2 bytes, big-endian)\n    let ciphertext_length =\n        ((header_plaintext.get(32) as u32) << 8) | (header_plaintext.get(33) as u32);\n\n    // Extract and decrypt main ciphertext\n    let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n    let ciphertext_with_padding: [u8; (PRIVATE_LOG_SIZE_IN_FIELDS - TAG_AND_EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n        array::subarray(log_ciphertext.storage(), ciphertext_start);\n    let ciphertext: BoundedVec<u8, (PRIVATE_LOG_SIZE_IN_FIELDS - TAG_AND_EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n        BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n    // Decrypt main ciphertext and return it\n    let log_plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n    // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n    fields_from_bytes(log_plaintext_bytes)\n}\n\nmod test {\n    use crate::{\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::{decrypt_log, encrypt_log, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS};\n    use protocol_types::{address::AztecAddress, traits::{FromField, Serialize}};\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn test_encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let contract_address = AztecAddress::from_field(\n            0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04,\n        );\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        let sender = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns([69420, 1337]);\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log =\n            BoundedVec::from_array(encrypt_log(contract_address, plaintext, recipient, sender));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret.serialize());\n\n        // Decrypt the log\n        let decrypted = decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n    }\n}\n"
    },
    "93": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.81.0/noir-projects/aztec-nr/aztec/src/hash.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"
    }
  }
}
