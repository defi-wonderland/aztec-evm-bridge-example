{
  "transpiled": true,
  "noir_version": "1.0.0-beta.4+0000000000000000000000000000000000000000",
  "name": "AztecGateway7683",
  "functions": [
    {
      "name": "_assert_order_commitment",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "order_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "origin_data_bytes",
            "type": {
              "kind": "array",
              "length": 301,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "255477095918156618": {
            "error_kind": "string",
            "string": "Invalid order"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "10391454703121400355": {
            "error_kind": "string",
            "string": "Function _assert_order_commitment can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": [
        "_assert_order_commitment"
      ]
    },
    {
      "name": "_trigger_settlement",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "order_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "order_id_bytes",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "filler_data",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "13594925270014003382": {
            "error_kind": "string",
            "string": "Function _trigger_settlement can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": [
        "_trigger_settlement"
      ]
    },
    {
      "name": "settle_private",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "order_id_bytes",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "origin_data_bytes",
            "type": {
              "kind": "array",
              "length": 301,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "filler_data_bytes",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "message_leaf_index",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5024954142921657308": {
            "error_kind": "string",
            "string": "Not a private order"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": [
        "discover_new_messages",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "build_msg_block",
        "attach_len_to_msg_block",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "open",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "order",
            "type": {
              "kind": "struct",
              "path": "types::onchain_cross_chain_order::OnchainCrossChainOrder",
              "fields": [
                {
                  "name": "fill_deadline",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                },
                {
                  "name": "order_data_type",
                  "type": {
                    "kind": "array",
                    "length": 32,
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  }
                },
                {
                  "name": "order_data",
                  "type": {
                    "kind": "array",
                    "length": 301,
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "1149705418984161792": {
            "error_kind": "string",
            "string": "Invalid nonce"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3089903740940599642": {
            "error_kind": "string",
            "string": "Invalid fill deadline"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5775299686015755157": {
            "error_kind": "string",
            "string": "Not a public order"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6579113687620452371": {
            "error_kind": "string",
            "string": "Invalid order origin domain"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "10411837482733946431": {
            "error_kind": "string",
            "string": "Invalid order sender"
          },
          "13250867036985658079": {
            "error_kind": "string",
            "string": "Invalid order data type"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "open"
      ]
    },
    {
      "name": "fill_private",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "order_id_bytes",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "origin_data_bytes",
            "type": {
              "kind": "array",
              "length": 301,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "filler_data_bytes",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "692953268510459726": {
            "error_kind": "string",
            "string": "Invalid order id"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5024954142921657308": {
            "error_kind": "string",
            "string": "Not a private order"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "10852400770788842366": {
            "error_kind": "string",
            "string": "Invalid order domain"
          },
          "13358931442698543651": {
            "error_kind": "string",
            "string": "Order fill expired"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "fill_private"
      ]
    },
    {
      "name": "public_dispatch",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "selector",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "255477095918156618": {
            "error_kind": "string",
            "string": "Invalid order"
          },
          "692953268510459726": {
            "error_kind": "string",
            "string": "Invalid order id"
          },
          "1149705418984161792": {
            "error_kind": "string",
            "string": "Invalid nonce"
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "2830029349304997821": {
            "error_kind": "fmtstring",
            "length": 27,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3089903740940599642": {
            "error_kind": "string",
            "string": "Invalid fill deadline"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5024954142921657308": {
            "error_kind": "string",
            "string": "Not a private order"
          },
          "5048864367174250545": {
            "error_kind": "string",
            "string": "Function get_filled_order_block_number can only be called statically"
          },
          "5775299686015755157": {
            "error_kind": "string",
            "string": "Not a public order"
          },
          "6017907102598075401": {
            "error_kind": "string",
            "string": "Function get_order_status can only be called statically"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6579113687620452371": {
            "error_kind": "string",
            "string": "Invalid order origin domain"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7354432299782447020": {
            "error_kind": "string",
            "string": "Function _assert_order_status can only be called internally"
          },
          "8412360910299423372": {
            "error_kind": "string",
            "string": "Invalid order destination domain"
          },
          "9169818942746597700": {
            "error_kind": "string",
            "string": "Function _update_order_status can only be called internally"
          },
          "10391454703121400355": {
            "error_kind": "string",
            "string": "Function _assert_order_commitment can only be called internally"
          },
          "10411837482733946431": {
            "error_kind": "string",
            "string": "Invalid order sender"
          },
          "10852400770788842366": {
            "error_kind": "string",
            "string": "Invalid order domain"
          },
          "10883657705690251125": {
            "error_kind": "string",
            "string": "Invalid order status"
          },
          "11094545764365153162": {
            "error_kind": "string",
            "string": "Function _assert_nonce_and_set_order_details can only be called internally"
          },
          "13250867036985658079": {
            "error_kind": "string",
            "string": "Invalid order data type"
          },
          "13358931442698543651": {
            "error_kind": "string",
            "string": "Order fill expired"
          },
          "13459246948365409099": {
            "error_kind": "string",
            "string": "Function _emit_open can only be called internally"
          },
          "13594925270014003382": {
            "error_kind": "string",
            "string": "Function _trigger_settlement can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14563046062317426044": {
            "error_kind": "string",
            "string": "Function _check_order_commitment can only be called internally"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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ATgACQEeASAuDQEgAR8dDAEfASACHQwBIAEeAB0MAR4BHwIoAgEgBACkATgACQEgASIuDQEiASEdDAEhASICHQwBIgEgAB0MASABIQIoAgEiBAClATgACQEiASQuDQEkASMdDAEjASQCHQwBJAEiAB0MASIBIwIoAgEkBACmATgACQEkASYuDQEmASUdDAElASYCHQwBJgEkAB0MASQBJQIoAgEmBACnATgACQEmASguDQEoAScdDAEnASgCHQwBKAEmAB0MASYBJwIoAgEoBACoATgACQEoASouDQEqASkdDAEpASoCHQwBKgEoAB0MASgBKQIoAgEqBACpATgACQEqASwuDQEsASsdDAErASwCHQwBLAEqAB0MASoBKwIoAgEsBACqATgACQEsAS4uDQEuAS0dDAEtAS4CHQwBLgEsAB0MASwBLQIoAgEuBACrATgACQEuATAuDQEwAS8dDAEvATACHQwBMAEuAB0MAS4BLwIoAgEwBACsATgACQEwATIuDQEyATEdDAExATICHQwBMgEwAB0MATABMQIoAgEyBACtATgACQEyATQuDQE0ATMdDAEzATQCHQwBNAEyAB0MATIBMwIoAgE0BACuATgACQE0ATYuDQE2ATUdDAE1ATYCHQwBNgE0AB0MATQBNQIoAgE2BACvATgACQE2ATguDQE4ATcdDAE3ATgCHQwBOAE2AB0MATYBNwIoAgE4BACwATgACQE4ATouDQE6ATkdDAE5AToCHQwBOgE4AB0MATgBOQIoAgE6BACxATgACQE6ATwuDQE8ATsdDAE7ATwCHQwBPAE6AB0MAToBOwIoAgE8BACyATgACQE8AT4uDQE+AT0dDAE9AT4CHQwBPgE8AB0MATwBPQIoAgE+BACzATgACQE+AUAuDQFAAT8dDAE/AUACHQwBQAE+AB0MAT4BPwIoAgFABAC0ATgACQFAAUIuDQFCAUEdDAFBAUICHQwBQgFAAB0MAUABQQIoAgFCBAC1ATgACQFCAUQuDQFEAUMdDAFDAUQCHQwBRAFCAB0MAUIBQwIoAgFEBAC2ATgACQFEAUYuDQFGAUUdDAFFAUYCHQwBRgFEAB0MAUQBRQIoAgFGBAC3ATgACQFGAUguDQFIAUcdDAFHAUgCHQwBSAFGAB0MAUYBRwIoAgFIBAC4ATgACQFIAUouDQFKAUkdDAFJ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KAICTgQBOwE4AAkCTgJQLg0CUAJPHQwCTwJQAh0MAlACTgAdDAJOAk8CKAICUAQBPAE4AAkCUAJSLg0CUgJRHQwCUQJSAh0MAlICUAAdDAJQAlECKAICUgQBPQE4AAkCUgJULg0CVAJTHQwCUwJUAh0MAlQCUgAdDAJSAlMCKAICVAQBPgE4AAkCVAJWLg0CVgJVHQwCVQJWAh0MAlYCVAAdDAJUAlUCKAICVgQBPwE4AAkCVgJYLg0CWAJXHQwCVwJYAh0MAlgCVgAdDAJWAlcCKAICWAQBQAE4AAkCWAJaLg0CWgJZHQwCWQJaAh0MAloCWAAdDAJYAlkCKAICWgQBQQE4AAkCWgJcLg0CXAJbHQwCWwJcAh0MAlwCWgAdDAJaAlsCKAICXAQBQgE4AAkCXAJeLg0CXgJdHQwCXQJeAh0MAl4CXAAdDAJcAl0CKAICXgQBQwE4AAkCXgJgLg0CYAJfHQwCXwJgAh0MAmACXgAdDAJeAl8CKAICYAQBRAE4AAkCYAJiLg0CYgJhHQwCYQJiAh0MAmICYAAdDAJgAmECKAICYgQBRQE4AAkCYgJkLg0CZAJjHQwCYwJkAh0MAmQCYgAdDAJiAmMCKAICZAQBRgE4AAkCZAJmLg0CZgJlHQwCZQJmAh0MAmYCZAAdDAJkAmUCKAICZgQBRwE4AAkCZgJoLg0CaAJnHQwCZwJoAh0MAmgCZgAdDAJmAmcCKAICaAQBSAE4AAkCaAJqLg0CagJpHQwCaQJqAh0MAmoCaAAdDAJoAmkCKAICagQBSQE4AAkCagJsLg0CbAJrHQwCawJsAh0MAmwCagAdDAJqAmsCKAICbAQBSgE4AAkCbAJuLg0CbgJtHQwCbQJuAh0MAm4CbAAdDAJsAm0CKAICbgQBSwE4AAkCbgJwLg0CcAJvHQwCbwJwAh0MAnACbgAdDAJuAm8CKAICcAQBTAE4AAkCcAJyLg0CcgJxHQwCcQJyAh0MAnICcAAdDAJwAnECASgACYDEAnMuDQJzAnIdDAJyAnQCHQwCdAJzAB0MAnMCcgIBOAAJAAMCdS4NAnUCdB0MAnQCdQIdDAJ1AAkAHQwACQJ0Ai4IAAECdSgCAnYEAS4BEAABAnYAASgDAnUEAAEBKAJ1AAICdi4MAnYCdy4OAAwCdwEoAncAAgJ3Lg4ADwJ3ASgCdwACAncuDgATAncBKAJ3AAICdy4OABUCdwEoAncAAgJ3Lg4AFwJ3ASgCdwACAncuDgAZAncBKAJ3AAICdy4OABsCdwEoAncAAgJ3Lg4AHgJ3ASgCdwACAncuDgAiAncBKAJ3AAICdy4OACYCdwEoAncAAgJ3Lg4AKAJ3ASgCdwACAncuDgAuAncBKAJ3AAICdy4OADICdwEoAncAAgJ3Lg4ANgJ3ASgCdwACAncuDgA4AncBKAJ3AAICdy4OADsCdwEoAncAAgJ3Lg4APQJ3ASgCdwACAncuDgA/AncBKAJ3AAICdy4OAEECdwEoAncAAgJ3Lg4AQwJ3ASgCdwACAncuDgBFAncBKAJ3AAICdy4OAEcCdwEoAncAAgJ3Lg4ASAJ3ASgCdwACAncuDgBLAncBKAJ3AAICdy4OAE0CdwEoAncAAgJ3Lg4ATwJ3ASgCdwACAncuDgBRAncBKAJ3AAICdy4OAFMCdwEoAncAAgJ3Lg4AVQJ3ASgCdwACAncuDgBXAncBKAJ3AAICdy4OAFgCdwEoAncAAgJ3Lg4AWgJ3ASgCdwACAncuDgBdAncBKAJ3AAICdy4OAF8CdwEoAncAAgJ3Lg4AYQJ3ASgCdwACAncuDgBjAncBKAJ3AAICdy4OAGUCdwEoAncAAgJ3Lg4AZwJ3ASgCdwACAncuDgBpAncBKAJ3AAICdy4OAGsCdwEoAncAAgJ3Lg4AbQJ3ASgCdwACAncuDgBvAncBKAJ3AAICdy4OAHECdwEoAncAAgJ3Lg4AcwJ3ASgCdwACAncuDgB1AncBKAJ3AAICdy4OAHcCdwEoAncAAgJ3Lg4AeQJ3ASgCdwACAncuDgB7AncBKAJ3AAICdy4OAH0CdwEoAncAAgJ3Lg4AfwJ3ASgCdwACAncuDgCBAncBKAJ3AAICdy4OAIMCdwEoAncAAgJ3Lg4AhQJ3ASgCdwACAncuDgCHAncBKAJ3AAICdy4OAIkCdwEoAncAAgJ3Lg4AiwJ3ASgCdwACAncuDgCNAncBKAJ3AAICdy4OAI8CdwEoAncAAgJ3Lg4AkQJ3ASgCdwACAncuDgCTAncBKAJ3AAICdy4OAJUCdwEoAncAAgJ3Lg4AlwJ3ASgCdwACAncuDgCYAncBKAJ3AAICdy4OAJsCdwEoAncAAgJ3Lg4AnQJ3ASgCdwACAncuDgCfAncBKAJ3AAICdy4OAKECdwEoAncAAgJ3Lg4AowJ3ASgCdwACAncuDgClAncBKAJ3AAICdy4OAKcCdwEoAncAAgJ3Lg4AqQJ3ASgCdwACAncuDgCrAncBKAJ3AAICdy4OAK0CdwEoAncAAgJ3Lg4ArwJ3ASgCdwACAncuDgCxAncBKAJ3AAICdy4OALMCdwEoAncAAgJ3Lg4AtQJ3ASgCdwACAncuDgC3AncBKAJ3AAICdy4OALkCdwEoAncAAgJ3Lg4AuwJ3ASgCdwACAncuDgC9AncBKAJ3AAICdy4OAL8CdwEoAncAAgJ3Lg4AwQJ3ASgCdwACAncuDgDDAncBKAJ3AAICdy4OAMUCdwEoAncAAgJ3Lg4AxwJ3ASgCdwACAncuDgDJAncBKAJ3AAICdy4OAMsCdwEoAncAAgJ3Lg4AzQJ3ASgCdwACAncuDgDPAncBKAJ3AAICdy4OANECdwEoAncAAgJ3Lg4A0wJ3ASgCdwACAncuDgDVAncBKAJ3AAICdy4OANcCdwEoAncAAgJ3Lg4A2AJ3ASgCdwACAncuDgDbAncBKAJ3AAICdy4OAN0CdwEoAncAAgJ3Lg4A3wJ3ASgCdwACAncuDgDhAncBKAJ3AAICdy4OAOMCdwEoAncAAgJ3Lg4A5QJ3ASgCdwACAncuDgDnAncBKAJ3AAICdy4OAOkCdwEoAncAAgJ3Lg4A6wJ3ASgCdwACAncuDgDtAncBKAJ3AAICdy4OAO8CdwEoAncAAgJ3Lg4A8QJ3ASgCdwACAncuDgDzAncBKAJ3AAICdy4OAPUCdwEoAncAAgJ3Lg4A9wJ3ASgCdwACAncuDgD5AncBKAJ3AAICdy4OAPsCdwEoAncAAgJ3Lg4A/QJ3ASgCdwACAncuDgD/AncBKAJ3AAICdy4OAQECdwEoAncAAgJ3Lg4BAwJ3ASgCdwACAncuDgEFAncBKAJ3AAICdy4OAQcCdwEoAncAAgJ3Lg4BCQJ3ASgCdwACAncuDgELAncBKAJ3AAICdy4OAQ0CdwEoAncAAgJ3Lg4BDwJ3ASgCdwACAncuDgERAncBKAJ3AAICdy4OARMCdwEoAncAAgJ3Lg4BFQJ3ASgCdwACAncuDgEXAncBKAJ3AAICdy4OARgCdwEoAncAAgJ3Lg4BGwJ3ASgCdwACAncuDgEdAncBKAJ3AAICdy4OAR8CdwEoAncAAgJ3Lg4BIQJ3ASgCdwACAncuDgEjAncBKAJ3AAICdy4OASUCdwEoAncAAgJ3Lg4BJwJ3ASgCdwACAncuDgEpAncBKAJ3AAICdy4OASsCdwEoAncAAgJ3Lg4BLQJ3ASgCdwACAncuDgEvAncBKAJ3AAICdy4OATECdwEoAncAAgJ3Lg4BMwJ3ASgCdwACAncuDgE1AncBKAJ3AAICdy4OATcCdwEoAncAAgJ3Lg4BOQJ3ASgCdwACAncuDgE7AncBKAJ3AAICdy4OAT0CdwEoAncAAgJ3Lg4BPwJ3ASgCdwACAncuDgFBAncBKAJ3AAICdy4OAUMCdwEoAncAAgJ3Lg4BRQJ3ASgCdwACAncuDgFHAncBKAJ3AAICdy4OAUkCdwEoAncAAgJ3Lg4BSwJ3ASgCdwACAncuDgFNAncBKAJ3AAICdy4OAU8CdwEoAncAAgJ3Lg4BUQJ3ASgCdwACAncuDgFTAncBKAJ3AAICdy4OAVUCdwEoAncAAgJ3Lg4BVwJ3ASgCdwACAncuDgFYAncBKAJ3AAICdy4OAVsCdwEoAncAAgJ3Lg4BXQJ3ASgCdwACAncuDgFfAncBKAJ3AAICdy4OAWECdwEoAncAAgJ3Lg4BYwJ3ASgCdwACAncuDgFlAncBKAJ3AAICdy4OAWcCdwEoAncAAgJ3Lg4BaQJ3ASgCdwACAncuDgFrAncBKAJ3AAICdy4OAW0CdwEoAncAAgJ3Lg4BbwJ3ASgCdwACAncuDgFxAncBKAJ3AAICdy4OAXMCdwEoAncAAgJ3Lg4BdQJ3ASgCdwACAncuDgF3AncBKAJ3AAICdy4OAXkCdwEoAncAAgJ3Lg4BewJ3ASgCdwACAncuDgF9AncBKAJ3AAICdy4OAX8CdwEoAncAAgJ3Lg4BgQJ3ASgCdwACAncuDgGDAncBKAJ3AAICdy4OAYUCdwEoAncAAgJ3Lg4BhwJ3ASgCdwACAncuDgGJAncBKAJ3AAICdy4OAYsCdwEoAncAAgJ3Lg4BjQJ3ASgCdwACAncuDgGPAncBKAJ3AAICdy4OAZECdwEoAncAAgJ3Lg4BkwJ3ASgCdwACAncuDgGVAncBKAJ3AAICdy4OAZcCdwEoAncAAgJ3Lg4BmAJ3ASgCdwACAncuDgGbAncBKAJ3AAICdy4OAZ0CdwEoAncAAgJ3Lg4BnwJ3ASgCdwACAncuDgGgAncBKAJ3AAICdy4OAaMCdwEoAncAAgJ3Lg4BpQJ3ASgCdwACAncuDgGnAncBKAJ3AAICdy4OAagCdwEoAncAAgJ3Lg4BqwJ3ASgCdwACAncuDgGtAncBKAJ3AAICdy4OAa8CdwEoAncAAgJ3Lg4BsQJ3ASgCdwACAncuDgGzAncBKAJ3AAICdy4OAbUCdwEoAncAAgJ3Lg4BtwJ3ASgCdwACAncuDgG5AncBKAJ3AAICdy4OAbsCdwEoAncAAgJ3Lg4BvQJ3ASgCdwACAncuDgG/AncBKAJ3AAICdy4OAcECdwEoAncAAgJ3Lg4BwwJ3ASgCdwACAncuDgHFAncBKAJ3AAICdy4OAccCdwEoAncAAgJ3Lg4ByQJ3ASgCdwACAncuDgHLAncBKAJ3AAICdy4OAc0CdwEoAncAAgJ3Lg4BzwJ3ASgCdwACAncuDgHRAncBKAJ3AAICdy4OAdMCdwEoAncAAgJ3Lg4B1QJ3ASgCdwACAncuDgHXAncBKAJ3AAICdy4OAdgCdwEoAncAAgJ3Lg4B2wJ3ASgCdwACAncuDgHdAncBKAJ3AAICdy4OAd8CdwEoAncAAgJ3Lg4B4QJ3ASgCdwACAncuDgHjAncBKAJ3AAICdy4OAeUCdwEoAncAAgJ3Lg4B5wJ3ASgCdwACAncuDgHoAncBKAJ3AAICdy4OAesCdwEoAncAAgJ3Lg4B7QJ3ASgCdwACAncuDgHvAncBKAJ3AAICdy4OAfECdwEoAncAAgJ3Lg4B8gJ3ASgCdwACAncuDgH1AncBKAJ3AAICdy4OAfcCdwEoAncAAgJ3Lg4B+QJ3ASgCdwACAncuDgH6AncBKAJ3AAICdy4OAf0CdwEoAncAAgJ3Lg4B/wJ3ASgCdwACAncuDgIBAncBKAJ3AAICdy4OAgMCdwEoAncAAgJ3Lg4CBQJ3ASgCdwACAncuDgIHAncBKAJ3AAICdy4OAgkCdwEoAncAAgJ3Lg4CCwJ3ASgCdwACAncuDgINAncBKAJ3AAICdy4OAg8CdwEoAncAAgJ3Lg4CEQJ3ASgCdwACAncuDgITAncBKAJ3AAICdy4OAhUCdwEoAncAAgJ3Lg4CFwJ3ASgCdwACAncuDgIZAncBKAJ3AAICdy4OAhsCdwEoAncAAgJ3Lg4CHQJ3ASgCdwACAncuDgIfAncBKAJ3AAICdy4OAiECdwEoAncAAgJ3Lg4CIwJ3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CgI0ASgCNAACAjQuDgA7AjQBKAI0AAICNC4OAD0CNAEoAjQAAgI0Lg4ARQI0ASgCNAACAjQuDgBHAjQBKAI0AAICNC4OAEgCNAEoAjQAAgI0Lg4ATQI0ASgCNAACAjQuDgBPAjQBKAI0AAICNC4OAFMCNAEoAjQAAgI0Lg4AVQI0ASgCNAACAjQuDgBXAjQBKAI0AAICNC4OAFgCNAEoAjQAAgI0Lg4AWgI0ASgCNAACAjQuDgBdAjQBKAI0AAICNC4OAF8CNAEoAjQAAgI0Lg4AYQI0ASgCNAACAjQuDgBjAjQBKAI0AAICNC4OAGUCNAEoAjQAAgI0Lg4AZwI0ASgCNAACAjQuDgBpAjQBKAI0AAICNC4OAGsCNAEoAjQAAgI0Lg4AbQI0ASgCNAACAjQuDgBvAjQBKAI0AAICNC4OAHECNAEoAjQAAgI0Lg4AcwI0ASgCNAACAjQuDgB1AjQBKAI0AAICNC4OAHcCNAEoAjQAAgI0Lg4AeQI0ASgCNAACAjQuDgB7AjQBKAI0AAICNC4OAH0CNAEoAjQAAgI0Lg4AfwI0ASgCNAACAjQuDgAZAjQBKAI0AAICNC4OAIECNAEoAjQAAgI0Lg4AgwI0ASgCNAACAjQuDgCFAjQBKAI0AAICNC4OAEECNAEoAjQAAgI0Lg4AhwI0ASgCNAACAjQuDgCJAjQBKAI0AAICNC4OAIsCNAEoAjQAAgI0Lg4AQwI0ASgCNAACAjQuDgCNAjQBKAI0AAICNC4OAI8CNAEoAjQAAgI0Lg4AkQI0ASgCNAACAjQuDgAXAjQBKAI0AAICNC4OAJMCNAEoAjQAAgI0Lg4AlQI0ASgCNAACAjQuDgCXAjQBKAI0AAICNC4OAJgCNAEoAjQAAgI0Lg4AmwI0ASgCNAACAjQuDgCdAjQBKAI0AAICNC4OAJ8CNAEoAjQAAgI0Lg4AoQI0ASgCNAACAjQuDgCjAjQBKAI0AAICNC4OAKUCNAEoAjQAAgI0Lg4ApwI0ASgCNAACAjQuDgCpAjQBKAI0AAICNC4OAKsCNAEoAjQAAgI0Lg4ArQI0ASgCNAACAjQuDgCvAjQBKAI0AAICNC4OALECNAEoAjQAAgI0Lg4AswI0ASgCNAACAjQuDgC1AjQBKAI0AAICNC4OALcCNAEoAjQAAgI0Lg4AuQI0ASgCNAACAjQuDgC7AjQBKAI0AAICNC4OAL0CNAEoAjQAAgI0Lg4AvwI0ASgCNAACAjQuDgDBAjQBKAI0AAICNC4OAMMCNAEoAjQAAgI0Lg4AxQI0ASgCNAACAjQuDgDHAjQBKAI0AAICNC4OAMkCNAEoAjQAAgI0Lg4AywI0ASgCNAACAjQuDgDNAjQBKAI0AAICNC4OAM8CNAEoAjQAAgI0Lg4A0QI0ASgCNAACAjQuDgDTAjQBKAI0AAICNC4OANUCNAEoAjQAAgI0Lg4A1wI0ASgCNAACAjQuDgDYAjQBKAI0AAICNC4OANsCNAEoAjQAAgI0Lg4A3QI0ASgCNAACAjQuDgDfAjQBKAI0AAICNC4OAOECNAEoAjQAAgI0Lg4A4wI0ASgCNAACAjQuDgDlAjQBKAI0AAICNC4OAOcCNAEoAjQAAgI0Lg4A6QI0ASgCNAACAjQuDgDrAjQBKAI0AAICNC4OAO0CNAEoAjQAAgI0Lg4A7wI0ASgCNAACAjQuDgDxAjQBKAI0AAICNC4OAPMCNAEoAjQAAgI0Lg4A9QI0ASgCNAACAjQuDgD3AjQBKAI0AAICNC4OAPkCNAEoAjQAAgI0Lg4A+wI0ASgCNAACAjQuDgD9AjQBKAI0AAICNC4OAP8CNAEoAjQAAgI0Lg4BAQI0ASgCNAACAjQuDgEDAjQBKAI0AAICNC4OAQUCNAEoAjQAAgI0Lg4BBwI0ASgCNAACAjQuDgEJAjQBKAI0AAICNC4OAQsCNAEoAjQAAgI0Lg4BDQI0ASgCNAACAjQuDgEPAjQBKAI0AAICNC4OAB4CNAEoAjQAAgI0Lg4BEQI0ASgCNAACAjQuDgETAjQBKAI0AAICNC4OARUCNAEoAjQAAgI0Lg4BFwI0ASgCNAACAjQuDgEYAjQBKAI0AAICNC4OARsCNAEoAjQAAgI0Lg4BHQI0ASgCNAACAjQuDgEfAjQBKAI0AAICNC4OASECNAEoAjQAAgI0Lg4BIwI0ASgCNAACAjQuDgElAjQBKAI0AAICNC4OAScCNAEoAjQAAgI0Lg4BKQI0ASgCNAACAjQuDgErAjQBKAI0AAICNC4OAS0CNAEoAjQAAgI0Lg4BLwI0ASgCNAACAjQuDgExAjQBKAI0AAICNC4OATMCNAEoAjQAAgI0Lg4BNQI0ASgCNAACAjQuDgE3AjQBKAI0AAICNC4OATkCNAEoAjQAAgI0Lg4BOwI0ASgCNAACAjQuDgE9AjQBKAI0AAICNC4OAT8CNAEoAjQAAgI0Lg4BQQI0ASgCNAACAjQuDgFDAjQBKAI0AAICNC4OAUUCNAEoAjQAAgI0Lg4BRwI0ASgCNAACAjQuDgFJAjQBKAI0AAICNC4OAUsCNAEoAjQAAgI0Lg4BTQI0ASgCNAACAjQuDgAmAjQBKAI0AAICNC4KgJYCNAEoAjQAAgI0LgqAlgI0ASgCNAACAjQuCoCWAjQBKAI0AAICNC4KgJYCNAEoAjQAAgI0LgqAlgI0ASgCNAACAjQuCoCWAjQBKAI0AAICNC4KgJYCNAEoAjQAAgI0LgqAlgI0ASgCNAACAjQuCoCWAjQBKAI0AAICNC4KgJYCNAEoAjQAAgI0LgqAlgI0ASgCNAACAjQuCoCWAjQBKAI0AAICNC4KgJYCNAEoAjQAAgI0LgqAlgI0ASgCNAACAjQuCoCWAjQBKAI0AAICNC4KgJYCNAEoAjQAAgI0LgqAlgI0ASgCNAACAjQuCoCWAjQBKAI0AAICNC4KgJYCNAEoAjQAAgI0LgqAlgI0ASgCNAACAjQuCoCWAjQBKAI0AAICNC4KgJYCNAEoAjQAAgI0LgqAlgI0ASgCNAACAjQuCoCWAjQBKAI0AAICNC4KgJYCNAEoAjQAAgI0LgqAlgI0ASgCNAACAjQuCoCWAjQBKAI0AAICNC4KgJYCNAEoAjQAAgI0LgqAlgI0ASgCNAACAjQuCoCWAjQBKAI0AAICNC4KgJYCNAEoAjQAAgI0LgqAlgI0ASgCNAACAjQuDgFPAjQBKAI0AAICNC4OAVECNAEoAjQAAgI0Lg4BUwI0ASgCNAACAjQuDgA2AjQBKAI0AAICNC4OAVUCNAEoAjQAAgI0Lg4BVwI0ASgCNAACAjQuDgFYAjQBKAI0AAICNC4OAVsCNAEoAjQAAgI0Lg4BXQI0ASgCNAACAjQuDgFfAjQBKAI0AAICNC4OAWECNAEoAjQAAgI0Lg4BYwI0ASgCNAACAjQuDgFlAjQBKAI0AAICNC4OAWcCNAEoAjQAAgI0Lg4BaQI0ASgCNAACAjQuDgFrAjQBKAI0AAICNC4OAW0CNAEoAjQAAgI0Lg4BbwI0ASgCNAACAjQuDgFxAjQBKAI0AAICNC4OAXMCNAEoAjQAAgI0Lg4BdQI0ASgCNAACAjQuDgF3AjQBKAI0AAICNC4OAXkCNAEoAjQAAgI0Lg4BewI0ASgCNAACAjQuDgF9AjQBKAI0AAICNC4OAX8CNAEoAjQAAgI0Lg4BgQI0ASgCNAACAjQuDgGDAjQBKAI0AAICNC4OAYUCNAEoAjQAAgI0Lg4BhwI0ASgCNAACAjQuDgGJAjQBKAI0AAICNC4OAYsCNAEoAjQAAgI0Lg4BjQI0ASgCNAACAjQuDgGPAjQBKAI0AAICNC4OAZECNAEoAjQAAgI0Lg4AIgI0ASgCNAACAjQuDgGTAjQBKAI0AAICNC4OAZUCNAEoAjQAAgI0Lg4BlwI0ASgCNAACAjQuDgGYAjQBKAI0AAICNC4OAZsCNAEoAjQAAgI0Lg4BnQI0ASgCNAACAjQuDgGfAjQBKAI0AAICNC4OAaACNAEoAjQAAgI0Lg4BowI0ASgCNAACAjQuDgGlAjQBKAI0AAICNC4OAacCNAEoAjQAAgI0Lg4BqAI0ASgCNAACAjQuDgGrAjQBKAI0AAICNC4OAa0CNAEoAjQAAgI0Lg4BrwI0ASgCNAACAjQuDgGxAjQBKAI0AAICNC4OAbMCNAEoAjQAAgI0Lg4BtQI0ASgCNAACAjQuDgG3AjQBKAI0AAICNC4OAbkCNAEoAjQAAgI0Lg4BuwI0ASgCNAACAjQuDgG9AjQBKAI0AAICNC4OAb8CNAEoAjQAAgI0Lg4BwQI0ASgCNAACAjQuDgHDAjQBKAI0AAICNC4OAcUCNAEoAjQAAgI0Lg4BxwI0ASgCNAACAjQuDgHJAjQBKAI0AAICNC4OAcsCNAEoAjQAAgI0Lg4BzQI0ASgCNAACAjQuDgHPAjQBKAI0AAICNC4OACgCNAEoAjQAAgI0Lg4B0QI0ASgCNAACAjQuDgHTAjQBKAI0AAICNC4OAdUCNAEoAjQAAgI0Lg4B1wI0ASgCNAACAjQuDgHYAjQBKAI0AAICNC4OAdsCNAEoAjQAAgI0Lg4B3QI0ASgCNAACAjQuDgHfAjQBKAI0AAICNC4OAeECNAEoAjQAAgI0Lg4B4wI0ASgCNAACAjQuDgHlAjQBKAI0AAICNC4OAecCNAEoAjQAAgI0Lg4B6AI0ASgCNAACAjQuDgHrAjQBKAI0AAICNC4OAe0CNAEoAjQAAgI0Lg4B7wI0ASgCNAACAjQuDgHxAjQBKAI0AAICNC4OAfICNAEoAjQAAgI0Lg4B9QI0ASgCNAACAjQuDgH3AjQBKAI0AAICNC4OAfkCNAEoAjQAAgI0Lg4B+gI0ASgCNAACAjQuDgH9AjQBKAI0AAICNC4OAf8CNAEoAjQAAgI0Lg4CAQI0ASgCNAACAjQuDgIDAjQBKAI0AAICNC4OAgUCNAEoAjQAAgI0Lg4CBwI0ASgCNAACAjQuDgIJAjQBKAI0AAICNC4OAgsCNAEoAjQAAgI0Lg4CDQI0ASgCNAACAjQuDgAbAjQBKAI0AAICNC4OAg8CNAEoAjQAAgI0Lg4CEQI0ASgCNAACAjQuDgITAjQBKAI0AAICNC4OAD8CNAEoAjQAAgI0Lg4CDwI0ASgCNAACAjQuDgIRAjQBKAI0AAICNC4OAhMCNAEoAjQAAgI0Lg4APwI0ASgCNAACAjQuDgIVAjQBKAI0AAICNC4OAhcCNAEoAjQAAgI0Lg4CGQI0ASgCNAACAjQuDgIbAjQBKAI0AAICNC4OAA4CNAEoAjQAAgI0Lg4AEAI0ASgCNAACAjQuDgASAjQBKAI0AAICNC4OAh0CNAEoAjQAAgI0Lg4CHwI0ASgCNAACAjQuDgIhAjQBKAI0AAICNC4OAiMCNAEoAjQAAgI0Lg4CJQI0ASgCNAACAjQuDgInAjQBKAI0AAICNC4OAikCNAEoAjQAAgI0Lg4CKwI0ASgCNAACAjQuDgItAjQBKAI0AAICNC4OAB0CNAEoAjQAAgI0Lg4AHwI0ASgCNAACAjQuDgAhAjQBKAI0AAICNC4OACMCNAEoAjQAAgI0Lg4AJQI0ASgCNAACAjQuDgAnAjQBKAI0AAICNC4OACkCNAEoAjQAAgI0Lg4AKwI0ASgCNAACAjQuDgAtAjQBKAI0AAICNC4OAC8CNAEoAjQAAgI0Lg4AMQI0ASgCNAACAjQuDgAzAjQBKAI0AAICNC4OADUCNAEoAjQAAgI0Lg4CLwI0ASgCNAACAjQuDgIxAjQBKAI0AAICNC4OADgCNAEoAjQAAgI0Lg4ACwI0ASgCNAACAjQuDgANAjQBKAI0AAICNC4OABECNAEoAjQAAgI0Lg4AFAI0ASgCNAACAjQuDgAWAjQBKAI0AAICNC4OABgCNAEoAjQAAgI0Lg4AGgI0ASgCNAACAjQuDgAcAjQBKAI0AAICNC4OACACNAEoAjQAAgI0Lg4AJAI0ASgCNAACAjQuDgAqAjQBKAI0AAICNC4OACwCNAEoAjQAAgI0Lg4AMAI0ASgCNAACAjQuDgA0AjQBKAI0AAICNC4OADcCNAEoAjQAAgI0Lg4AOQI0ASgCNAACAjQuDgA8AjQBKAI0AAICNC4OAD4CNAEoAjQAAgI0Lg4AQAI0ASgCNAACAjQuDgBCAjQBKAI0AAICNC4OAEQCNAEoAjQAAgI0Lg4ARgI0ASgCNAACAjQuDgBJAjQBKAI0AAICNC4OAEoCNAEoAjQAAgI0Lg4ATAI0ASgCNAACAjQuDgBOAjQBKAI0AAICNC4OAFACNAEoAjQAAgI0Lg4AUgI0ASgCNAACAjQuDgBUAjQBKAI0AAICNC4OAFYCNAEoAjQAAgI0Lg4AWQI0ASgCNAACAjQuDgBbAjQBKAI0AAICNC4OAFwCNAEoAjQAAgI0Lg4AXgI0ASgCNAACAjQuDgBgAjQBKAI0AAICNC4OAGICNAEoAjQAAgI0Lg4AZAI0ASgCNAACAjQuDgBmAjQBKAI0AAICNC4OAGgCNAEoAjQAAgI0Lg4AagI0ASgCNAACAjQuDgBsAjQBKAI0AAICNC4OAG4CNAEoAjQAAgI0Lg4AcAI0ASgCNAACAjQuDgByAjQBKAI0AAICNC4OAHQCNAEoAjQAAgI0Lg4AdgI0ASgCNAACAjQuDgB4AjQBKAI0AAICNC4OAHoCNAEoAjQAAgI0Lg4AfAI0ASgCNAACAjQuDgB+AjQBKAI0AAICNC4OAIACNAEoAjQAAgI0Lg4AggI0ASgCNAACAjQuDgCEAjQBKAI0AAICNC4OAIYCNAEoAjQAAgI0Lg4AiAI0ASgCNAACAjQuDgCKAjQBKAI0AAICNC4OAIwCNAEoAjQAAgI0Lg4AjgI0ASgCNAACAjQuDgCQAjQBKAI0AAICNC4OAJICNAEoAjQAAgI0Lg4AlAI0ASgCNAACAjQuDgCWAjQBKAI0AAICNC4OAJkCNAEoAjQAAgI0Lg4AmgI0ASgCNAACAjQuDgCcAjQBKAI0AAICNC4OAJ4CNAEoAjQAAgI0Lg4AoAI0ASgCNAACAjQuDgCiAjQBKAI0AAICNC4OAKQCNAEoAjQAAgI0Lg4ApgI0ASgCNAACAjQuDgCoAjQBKAI0AAICNC4OAKoCNAEoAjQAAgI0Lg4ArAI0ASgCNAACAjQuDgCuAjQBKAI0AAICNC4OALACNAEoAjQAAgI0Lg4AsgI0ASgCNAACAjQuDgC0AjQBKAI0AAICNC4OALYCNAEoAjQAAgI0Lg4AuAI0ASgCNAACAjQuDgC6AjQBKAI0AAICNC4OALwCNAEoAjQAAgI0Lg4AvgI0ASgCNAACAjQuDgDAAjQBKAI0AAICNC4OAMICNAEoAjQAAgI0Lg4AxAI0ASgCNAACAjQuDgDGAjQBKAI0AAICNC4OAMgCNAEoAjQAAgI0Lg4AygI0ASgCNAACAjQuDgDMAjQBKAI0AAICNC4OAM4CNAEoAjQAAgI0Lg4A0AI0ASgCNAACAjQuDgDSAjQBKAI0AAICNC4OANQCNAEoAjQAAgI0Lg4A1gI0ASgCNAACAjQuDgDZAjQBKAI0AAICNC4OANoCNAEoAjQAAgI0Lg4A3AI0ASgCNAACAjQuDgDeAjQBKAI0AAICNC4OAOACNAEoAjQAAgI0Lg4A4gI0ASgCNAACAjQuDgDkAjQBKAI0AAICNC4OAOYCNAEoAjQAAgI0Lg4A6AI0ASgCNAACAjQuDgDqAjQBKAI0AAICNC4OAOwCNAEoAjQAAgI0Lg4A7gI0ASgCNAACAjQuDgDwAjQBKAI0AAICNC4OAPICNAEoAjQAAgI0Lg4A9AI0ASgCNAACAjQuDgD2AjQBKAI0AAICNC4OAPgCNAEoAjQAAgI0Lg4A+gI0ASgCNAACAjQuDgD8AjQBKAI0AAICNC4OAP4CNAEoAjQAAgI0Lg4BAAI0ASgCNAACAjQuDgECAjQBKAI0AAICNC4OAQQCNAEoAjQAAgI0Lg4BBgI0ASgCNAACAjQuDgEIAjQBKAI0AAICNC4OAQoCNAEoAjQAAgI0Lg4BDAI0ASgCNAACAjQuDgEOAjQBKAI0AAICNC4OARACNAEoAjQAAgI0Lg4BEgI0ASgCNAACAjQuDgEUAjQBKAI0AAICNC4OARYCNAEoAjQAAgI0Lg4BGQI0ASgCNAACAjQuDgEaAjQBKAI0AAICNC4OARwCNAEoAjQAAgI0Lg4BHgI0ASgCNAACAjQuDgEgAjQBKAI0AAICNC4OASICNAEoAjQAAgI0Lg4BJAI0ASgCNAACAjQuDgEmAjQBKAI0AAICNC4OASgCNAEoAjQAAgI0Lg4BKgI0ASgCNAACAjQuDgEsAjQBKAI0AAICNC4OAS4CNAEoAjQAAgI0Lg4BMAI0ASgCNAACAjQuDgEyAjQBKAI0AAICNC4OATQCNAEoAjQAAgI0Lg4BNgI0ASgCNAACAjQuDgE4AjQBKAI0AAICNC4OAToCNAEoAjQAAgI0Lg4BPAI0ASgCNAACAjQuDgE+AjQBKAI0AAICNC4OAUACNAEoAjQAAgI0Lg4BQgI0ASgCNAACAjQuDgFEAjQBKAI0AAICNC4OAUYCNAEoAjQAAgI0Lg4BSAI0ASgCNAACAjQuDgFKAjQBKAI0AAICNC4OAUwCNAEoAjQAAgI0Lg4BTgI0ASgCNAACAjQuDgFQAjQBKAI0AAICNC4OAVICNAEoAjQAAgI0Lg4BVAI0ASgCNAACAjQuDgFWAjQBKAI0AAICNC4OAVkCNAEoAjQAAgI0Lg4BWgI0ASgCNAACAjQuDgFcAjQBKAI0AAICNC4OAV4CNAEoAjQAAgI0Lg4BYAI0ASgCNAACAjQuDgFiAjQBKAI0AAICNC4OAWQCNAEoAjQAAgI0Lg4BZgI0ASgCNAACAjQuDgFoAjQBKAI0AAICNC4OAWoCNAEoAjQAAgI0Lg4BbAI0ASgCNAACAjQuDgFuAjQBKAI0AAICNC4OAXACNAEoAjQAAgI0Lg4BcgI0ASgCNAACAjQuDgF0AjQBKAI0AAICNC4OAXYCNAEoAjQAAgI0Lg4BeAI0ASgCNAACAjQuDgF6AjQBKAI0AAICNC4OAXwCNAEoAjQAAgI0Lg4BfgI0ASgCNAACAjQuDgGAAjQBKAI0AAICNC4OAYICNAEoAjQAAgI0Lg4BhAI0ASgCNAACAjQuDgGGAjQBKAI0AAICNC4OAYgCNAEoAjQAAgI0Lg4BigI0ASgCNAACAjQuDgGMAjQBKAI0AAICNC4OAY4CNAEoAjQAAgI0Lg4BkAI0ASgCNAACAjQuDgGSAjQBKAI0AAICNC4OAZQCNAEoAjQAAgI0Lg4BlgI0ASgCNAACAjQuDgGZAjQBKAI0AAICNC4OAZoCNAEoAjQAAgI0Lg4BnAI0ASgCNAACAjQuDgGeAjQBKAI0AAICNC4OAaECNAEoAjQAAgI0Lg4BogI0ASgCNAACAjQuDgGkAjQBKAI0AAICNC4OAaYCNAEoAjQAAgI0Lg4BqQI0ASgCNAACAjQuDgGqAjQBKAI0AAICNC4OAawCNAEoAjQAAgI0Lg4BrgI0ASgCNAACAjQuDgGwAjQBKAI0AAICNC4OAbICNAEoAjQAAgI0Lg4BtAI0ASgCNAACAjQuDgG2AjQBKAI0AAICNC4OAbgCNAEoAjQAAgI0Lg4BugI0ASgCNAACAjQuDgG8AjQBKAI0AAICNC4OAb4CNAEoAjQAAgI0Lg4BwAI0ASgCNAACAjQuDgHCAjQBKAI0AAICNC4OAcQCNAEoAjQAAgI0Lg4BxgI0ASgCNAACAjQuDgHIAjQBKAI0AAICNC4OAcoCNAEoAjQAAgI0Lg4BzAI0ASgCNAACAjQuDgHOAjQBKAI0AAICNC4OAdACNAEoAjQAAgI0Lg4B0gI0ASgCNAACAjQuDgHUAjQBKAI0AAICNC4OAdYCNAEoAjQAAgI0Lg4B2QI0ASgCNAACAjQuDgHaAjQBKAI0AAICNC4OAdwCNAEoAjQAAgI0Lg4B3gI0ASgCNAACAjQuDgHgAjQBKAI0AAICNC4OAeICNAEoAjQAAgI0Lg4B5AI0ASgCNAACAjQuDgHmAjQBKAI0AAICNC4OAekCNAEoAjQAAgI0Lg4B6gI0ASgCNAACAjQuDgHsAjQBKAI0AAICNC4OAe4CNAEoAjQAAgI0Lg4B8AI0ASgCNAACAjQuDgHzAjQBKAI0AAICNC4OAfQCNAEoAjQAAgI0Lg4B9gI0ASgCNAACAjQuDgH4AjQBKAI0AAICNC4OAfsCNAEoAjQAAgI0Lg4B/AI0ASgCNAACAjQuDgH+AjQBKAI0AAICNC4OAgACNAEoAjQAAgI0Lg4CAgI0ASgCNAACAjQuDgIEAjQBKAI0AAICNC4OAgYCNAEoAjQAAgI0Lg4CCAI0ASgCNAACAjQuDgIKAjQBKAI0AAICNC4OAgwCNAEoAjQAAgI0Lg4CDgI0ASgCNAACAjQuDgIQAjQBKAI0AAICNC4OAhICNAEoAjQAAgI0Lg4CFAI0ASgCNAACAjQuDgIWAjQBKAI0AAICNC4OAhgCNAEoAjQAAgI0Lg4CGgI0ASgCNAACAjQuDgIcAjQBKAI0AAICNC4OAh4CNAEoAjQAAgI0Lg4CIAI0ASgCNAACAjQuDgIiAjQBKAI0AAICNC4OAiQCNAEoAjQAAgI0Lg4CJgI0ASgCNAACAjQuDgIoAjQBKAI0AAICNC4OAioCNAEoAjQAAgI0Lg4CLAI0ASgCNAACAjQuDgIuAjQBKAI0AAICNC4OAjACNAEoAjQA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CAsZKAALgJsADBwMCgsEADgMCwoOOAwKDSQCAA0AATICJQAA0QAtDgoIASgABYBjAAotDAoFIwABMPYlAADN/S0IAQUnAgYEEQAQAQYBJwMFBAEAKAUCBicCBwQQADgHBgctDAYIDDgIBwkWDAkJJAIACQABMmMuCoBkAAgAKAgCCCMAATJCLQgBBgAAAQIBLQ4FBgw4AgMFJAIABQABMuIjAAEyggEoAAOAjwAHDjgDBwgkAgAIAAEynCUAANEADDgCBwgkAgAIAAEyuSMAATKuLgiAjwAFIwABMtkCOAIDBw44AwIIJAIACAABMtAlAAEaMS0MBwUjAAEy2S0MBQQjAAEy7S4IgGQABCMAATLtBygABICCAAItCAEFAAABAgEtDgIFJwIIBAQGOAQICQQ4CQgKAjgECgcLKAAHgGQACCQCAAgAATNOIwABMysBKAACgGMABw44AgcIJAIACAABM0UlAADRAC0OBwUjAAEzTi0NBQcuCIBkAAIjAAEzXQw4AgcFJAIABQABM3gjAAEzby0NBgEtDAQCJi0IAQgAAAECAS4KgGQACAUoAAKAggAJJwILBAALKAALgIIACiQCAAoAATO+BygACYCCAA0KOA0CDCQCAAwAATO+JQABGkMuCIBkAAUjAAEzyQ0oAAWAggAKJAIACgABNDYjAAEz3i0NBgUtDQgJDSgAAoCSAAgkAgAIAAEz+yUAAQw4LgQABYADKACABAQAESUAARTPLgiABQAIACgIAgoAOAoCCy0OCQsBKAACgGMABS0OCAYtDAUCIwABM10AOAkFCw44CQsMJAIADAABNE0lAADRAAw4CwQMJAIADAABNGojAAE0Xy4IgGEACiMAATStADgDCwwOOAMMDSQCAA0AATSBJQAA0QANKAAMgMQACyQCAAsAATSWJQABDDgAKAECDQA4DQwOLQ0OCy0MCwojAAE0rS0NCAsZKAALgJsADBwMCgsEADgMCwoOOAwKDSQCAA0AATTVJQAA0QAtDgoIASgABYBjAAotDAoFIwABM8k=",
      "debug_symbols": "",
      "brillig_names": [
        "public_dispatch"
      ]
    },
    {
      "name": "claim_private",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "secret",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "order_id_bytes",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "origin_data_bytes",
            "type": {
              "kind": "array",
              "length": 301,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "filler_data_bytes",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "15663063161611103517": {
            "error_kind": "string",
            "string": "Invalid secret"
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "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ovt29X22M/mQ+mxpqdnOpOfrs51Jc9dnO5Murs92Ju1an+1M+rI626nOga/PdiadVp/tUlpqqjPP67OlpWa7lJaa6nzv+myX0lJTnZNdn+1SWmqq86brs11KS011bnN9tktpqanOP67PdiktNdU5wvXZLqWlpjqPtz7bpbTUVOfa1me7lJaa6nzY+myX0lJTnbNan+1SWmqq80rrs11KS0117md9tktpqanOz6zPdiktNdU5lPXZLqWlpjrPsT7bpbTUVOci1me7lJaa6nzB+myX0lJTndNXn+1SWmqq8+7qs11KS011blx9tktpqanOX6vPdiktNdU5ZvXZLqWlpjoPrD7bpbTUVOdq1Wc7lZYiZfbZerUlZktLzXYqLVWd7VRaqjrbqbRUdbZTaanqbKfSUrXZTnXuUH22U2mp6myn0lLV2S6lpaY6B6c+26W01FTnydRnu5SWmupclvpsV9JSYarzTeqzXUlLhanOCanPdiUtFTZaarYraakw1bkV9dmupKXCVOc/1Ge7lJaa6hyF+myX0lJTnUdQn+1SWmqqff3rs11KS021P359tktpqan2ma/PdiktNdV+7fXZLqWl5tr3vDrbpbTUXPueV2e7lJaaa9/z6myX0lJz7Xtene1SWmqufc+rs11KS82173l1tktpqbn2Pa/MNl7wrMD5/Wrrgnme7e+Irujnbw/+m3uNKF3/2uyJMMaHSkTGxW2/Omyvx1LFTDuU+UNsjw9xPT7E9/iQ0ONDYocPyTR2mD9E9fgQ3eNDenzjdY9vvO7xjdc9vvG6xzde9/jG6x7feNPjG296fONNj2+86fGNNz2+8abHN970+MabHt940+Mbb3p846nHN556fOOpxzeeenzjqcc3nnp846nHN556fOOpxzeeenzjbY9vvO3xjbc9vvG2xzfe9vjG2x7feNvjG297fONtj2+87fGNdz2+8a7HN971+Ma7Ht941+Mb73p84x3HNz744+q4qcSH+B4fEnp8SOzwIX7r8SGqx4foHh9ienwIMX/Ir8cSLx/C8Y0Px+Mfc+sBf/uQ16vD8YglmMcTFh1c4toY9jBi/H7tPXgnOXgvOfggOfgoOPiwSQ5eSQ5eSw7eSA6eJAcveYUNklfYIHmFDZJX2DD2Cuv2a9W26dfo49hLbC36sdfYWvRjL7K16MdeZWvRj73M1qLnWGej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",
      "brillig_names": [
        "discover_new_messages",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "build_msg_block",
        "attach_len_to_msg_block",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "store_in_execution_cache_oracle_wrapper",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "AAAAAAAEAAAAAAAAAAAAEgAAAAAAAAAQAAAAAAAAVgkBAAAAAAAAAAEAAAACAAAAAwAAAAQAAAAF\nAAAABgAAAAcAAAAIAAAACQAAAAoAAAALAAAADAAAAA0AAAAOAAAADwAAAAAAAAAAAAAADcxXp7u8\nqLunBDtPVrpHhmxDAUUZZ/S/8LRHsLpl+ywa8Ym/80zlOYBOcY0mTx5wSaAjIwB6mP+HTRf7apAj\negQzsCjQEpzzbqDYldarqy4btEBSEQ9jOqLpCg7lWnvlCUVyfOEQ1cB2tONl9VDkO6iCIHmB4BK0\nUhYRpMhnf3sZhLlsaA58USshObJS4Q4wAOlpi4VIWzNe2Y1F1+GRKRyoOOK49xcULRHUJgs4eHNB\n/QP/3w1A6L7RlRj4QAZRJSGUDeWsfGwy5fkzINf1WiJglaPad8XAhVbZ57pK/qsi8+klG3+rIqUX\nmgCzVr7IGifK3noXW0alJPuy0cS5Gi95ze8OdDrTlJSbYltDWRWC63mkXu5gtTWYWp31tO7CEYam\nKhomthgBuJIKS17FJxkEoB+l1KR2HzrG2mEDyOMPfrHCoPnRIs6C44kp7hbrb7tXfO39axyF5fEC\ntDBPXRmcTpg4I6rAZaHjjEiQfnbGV0qZmg4T+Ww0tGYc45QVIuSmLVifXcWOAD4X0sKeZqqcjXq3\nWBuYEO2nPlPhfd8OP4PTyf+mJHwLpRXOLm9SrLCVbfb6d5ltuCSwof5icBeLX7pkty84W07XnANO\nffS98tL2pzWC4p73hAiC46JREAhmzOvN0rd8TPt/+R2+rZKv2lChktlaXccxjKozEasj2/vxoAUf\nD6XbA3+NQzthfSwP3kdqKEsvEUHPoj0/dy9WqoR2odY8P6XWos0aYYvRdugLGSuHbZfb4Keb8Bqw\nCGgqsrfZGNq8zWBcHLM/zTwcTq+zxiXuhz7nzcSDQjADUBzj0Bl5Dn8DNE0cTEN4c6VvEO6RNxgE\nOk/P0MwEhyHrSJuRmKhkLL92LlSOA5ve52T8+85x9jwkt2+sZv9oEf1BtfmTbZMquuTG6TPg05wk\n6o4uDu5wKlMm81nJR8AUoX18ClXS1F7o7fbsFlwRPSgrmEfVYv1BQCIOR+GCrxpw0tC/U/KBmNxu\na015bsn0E4YWuRKVxKct3D6sKlhhIGqouj8Jxtki8brbOO2SMJD0RWklAHP22ccwTaWLQikW24Ti\n6tvXLePTAAhzf4dbDP5pRTFyqXoatNS7wgInuB0aR7lCAsIgds1l3WUSycOiIB3X3iva39HM3fgT\ns2tWAfWJlH2qEKartHJkomp7nolAR5y+5xITzRUAAyta8+sj56GT1KZHsjUnMO4rtRHifVR5xoTI\nVzDsdY/JDvS30BegFZH/Vo+Ppwlzc6WhGr1QvvpVMMkLIvQ9cX9ogApWJTKljIRm3uu8Hv6CYiLA\nHkxTW5kciSmpzSrtDUAUY68JIUmm1K0mcmQYN+KntAouYNuMejqvnJtDN+H0JuevSx7tWWkHCzqB\nbT+br7FLRfzln/NHyBsWEyd87YPeChhEIjmZsP14I5oi84XY2zPc+J4cEpHCnr3mBmbzrubXt0wD\n+g4pVwGwu14paA6eetZunwzGA91oou2mcmGxhwrEfx58XC5XjOiQrMy2jgLge/aPVTVwmxXdV0U+\nJiR2eQpsFfDJ/TBG+hhAJNARtwybkMwKZzJwwabd/aHV65Tj4sMFzqY1/YKyh8QIvvth3ZMDb1Rx\nVhtF7OdV51o8CAPu3A4iNLaV1TLAwbiBCjM6TN4ECX1Vz9eYeE9bGM8LmEcOAMSdevszTMeIigjl\nVpe9muc7HAK7rGqNq8V1Yz2am5sSc41XgvE+8AmTh1JC9/qfLmf16kGoqzjqkmpVgHndGgRkMHTZ\neB1j88OU5vryEacs0gw4v3w+t1GtO+KZiCEBHAlIyjrvn7w36UTQRsgyfmlVqv2E6PeLurti1zva\nd14l0OolqX3f1B8SQq8unf3DePHMjd0dr8vA797PorMtKBAoqtx1Nsj14OtC+xqxo1GsW0GdqFah\nvIm0lDIYUvfLAHYXaAmc4dFUb8HF2T8KO2o9Ml9fz2XeBm/nwG55ldcBazN1btkZIJ9Nb1xpPOIS\nQctqyc8U7pzyCvnJ83Em6gMIU1PxSp2rBzzBk7mLR7GQkPwwLqaUFvfU+HMKjogaLESUKWtigfab\nefMtYKTgpFbKL/hvYxhz/mw3BiBl7EAtm+c5KAbUenket2ewpJYNTV7J9tYNWNz+Y4AqqMsQoA6e\nfOievCZP3GlpR5CVadLo3HzKsWxO4cFJtAqHGXu8IO1CrgTw2toWiVQkdyQBK/11f+E0D/PzBUjh\nc8VPLg0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAACAm18dXbYS+/Y8e8++mxohSRLgCaqbCS148nwGGOcGMEZvfTeqyAJojzO39MG\n9ne/tTnD2nFnmTPFve/egukuCgDENyb3W2/aDeIs4ODfq2vMegX/lalrKJQkxfczZw2WL5tuC04s\nAZaN5cMkgqp9HQoJ1xeOyTuteFj5bmTwtI0dWKphxkrVIgQ9ecSAIhnlW6GXUa3+bDYyTT+2wtoJ\niS18GKk8Pa5YgJ+q7saoanj0s7xh8Z1ucGk1m79H5/kH"
    },
    {
      "name": "get_filled_order_block_number",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "parameters": [
          {
            "name": "order_id_bytes",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "field"
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5048864367174250545": {
            "error_kind": "string",
            "string": "Function get_filled_order_block_number can only be called statically"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "get_filled_order_block_number"
      ]
    },
    {
      "name": "settle",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "order_id_bytes",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "origin_data_bytes",
            "type": {
              "kind": "array",
              "length": 301,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "filler_data_bytes",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "message_leaf_index",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "255477095918156618": {
            "error_kind": "string",
            "string": "Invalid order"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5775299686015755157": {
            "error_kind": "string",
            "string": "Not a public order"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "10883657705690251125": {
            "error_kind": "string",
            "string": "Invalid order status"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "settle"
      ]
    },
    {
      "name": "_check_order_commitment",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "order_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "origin_data_bytes",
            "type": {
              "kind": "array",
              "length": 301,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "filler_data_bytes",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "255477095918156618": {
            "error_kind": "string",
            "string": "Invalid order"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14563046062317426044": {
            "error_kind": "string",
            "string": "Function _check_order_commitment can only be called internally"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "_check_order_commitment"
      ]
    },
    {
      "name": "get_order_status",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "view"
      ],
      "abi": {
        "parameters": [
          {
            "name": "order_id_bytes",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6017907102598075401": {
            "error_kind": "string",
            "string": "Function get_order_status can only be called statically"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "get_order_status"
      ]
    },
    {
      "name": "_update_order_status",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "order_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "status",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "9169818942746597700": {
            "error_kind": "string",
            "string": "Function _update_order_status can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBKJwAABAMnAgMEAicCBAQAHxgABAADgEgdAIBJgEkELgiASAABLgiASQACJQAAAFIlAAAAdigCAAEEgEonAgIEADsNAAEAAigAgEMEAAMoAIBEAQAAKACARQQAACgAgEYBAAEoAIBHBAABJiUAAAJxHgIAAwAeAgAEADM4AAMABAAFJAIABQAAAJolAAACmh4CAAMBHgIABAAKOAMEBSQCAAUAAAC2JQAAAqwnAgMAAC0IAQQnAgUEBAAQAQUBJwMEBAEAKAQCBS0MBQYtDgMGACgGAgYtDgMGACgGAgYtDgMGLQ0EBQAoBQIFLQ4FBCsCAAUAAAAAAAAAAAIAAAAAAAAAAC0IAQYnAgcEBQAQAQcBJwMGBAEAKAYCBy0MBwgtDgMIACgIAggtDgMIACgIAggtDgMIACgIAggtDgUILQ0EBQAoBQIFLQ4FBC0NBgUAKAUCBS0OBQYtCAEFAAABAgEtDgQFLQgBBAAAAQIBLQ4GBC0IAQYAAAECAS4KgEUABi0IAQcAAAECAS4KgEQABycCCAAFJwIJBAotCAAKLQwFCy0MBAwtDAYNLQwHDi0MCA8AEAAJACUAAAK+LQQAACcCCAQJLQgACS0MBQotDAQLLQwGDC0MBw0tDAEOABAACAAlAAACvi0EAAAtDQcBCygAAYBEAAgkAgAIAAACFCcCCQQAPAkBCScCAQQILQgACC0MBQktDAQKLQwGCy0MBwwAEAABACUAAAPnLQQAAC0NBAEBKAABgEcABS0NBQQKOAQDAQsoAAGARAADJAIAAwAAAmUlAAAE+hwMAgEAMAwAAQAEJigAgAQEeAANAAAAgASAAyQAgAMAAAKZKgEAAQX3ofOvpa3UyjwBAQImKgEAAQW+Hj//PqT2+jwBAQImKgEAAQV/Qb2+oQ8ZRDwBAQImJQAAAnEtDQMGLQ0EBwsoAAeARAAIJAIACAAAAuQnAgkEADwJAQkLKAAGgEMAByQCAAcAAANzIwAAAvktDQEGLQ0CBy0NAwgtDQQJDSgACIBDAAokAgAKAAADHiUAAAUMLgQABoADKACABAQABCUAAAUeLgiABQAKACgKAgsAOAsIDC0OBQwBKAAIgEcABQ44CAUGJAIABgAAA14lAAAFrC0OCgEtDgcCLQ4FAy0OCQQjAAAD5icCBgQHLQgABy0MAQgtDAIJLQwDCi0MBAsAEAAGACUAAAPnLQQAAC0NAQYtDQIHLQ0ECC4EAAaAAygAgAQEAAQlAAAFHi4IgAUACQAoCQIKASgACoBFAAstDgULLQ4JAS0OBwIuCoBHAAMtDggEIwAAA+YmJQAAAnEuCIBFAAUjAAAD9w0oAAWAQwAGJAIABgAABGcjAAAEDC0NAQUtDQIGLQ0DBy0NBAgnAgkEBC0IAQonAgsEBQAQAQsBJwMKBAEAKAYCCycCDAQEACgKAg0/DwALAA0tDQoGACgGAgYtDgYKLQ4FAS0OCgItDgcDLQ4IBCYtDQMGDDgFBgcBKAAFgEcABiQCAAcAAASFIwAABPEtDQEHLQ0CCC0NAwktDQQKACgIAgwAOAwFDS0NDQsAKAcCDQA4DQUOLQ0ODAA4CwwNLgQACIADKACABAQABSUAAAUeLgiABQALACgLAgwAOAwFDi0ODQ4tDgcBLQ4LAi0OCQMtDgoEIwAABPEtDAYFIwAAA/cqAQABBQLcbieAdhKdPAEBAiYqAQABBcVrxFoOEAACPAEBAiYuAYADgAYLAIAGAAKAByQAgAcAAAU5IwAABUQuAIADgAUjAAAFqy4AAAGABQEAAAGABAABAQCAA4AEgAkuAIADgAouAIAFgAsLAIAKgAmADCQAgAwAAAWXLgGACoAILgKACIALAQCACgACgAoBAIALAAKACyMAAAVmKAGABQQAAQMAgAYAAoAGIwAABasmKgEAAQVFp8pxGUHkFTwBAQIm",
      "debug_symbols": "7Z3dbupIDMffhWsuxp4Pe86rHK2qfnAqJAQVbVdaVX33DRwSAjFM42HPqopvUFPmj51fPDMeQzIfs6fFw/vz3XL9a/M6+/HzY7baPN6/LTfr5ujjcz572C5Xq+XzXf/fM7d7AfR7wevL/Xp3/Pp2v32b/QCP0c1ni/XT7m/PsfmQX8vVojly/nM+bO8Q2+YuYK+1E1qHlODQOiRyXevEQmOOLh4ac0ToN/5r3vjPt/E/57Y5QP6D/vsb8Y/c8ecSf4hEbevk/XX/c8ztyebkw7n/AW7tP+Cp/3sr+U9YiUG0Ajl3MnSQClYC+9BGB/f6woXoIOyig+mcbpTPG3vdDU/7m/+P4zV9hVEIJx7tdVmnI9LpGCUdOub27NBlx50ughgwyR+HhWNHgYRit0rdRx8viccgtKUcWj8o5+Mn4y4GBq09tWEeej0Qpb6NCN0JYq9vi41jaMeBGLjfdE+QjGAdwQxGsJJgMoJVBJv5yghWErQYrCQIFoO1BKMRrCSYjWAdQQxGsJIgG8E6gnK1xAiOIGirui8Q5LZeEnvFtAPBYNlMLUHLqCsJRmcEiwRT1zadNt0RJOvFtQRtTVJJkK0X1xK0GKwkmC0GawlaDNYStNpMHUHvbF1cS9BqM5UEwb5xryVotZlKgmirulqCVpupJOgtoz4nuMcSDIuExXJfCUuwhFbEYhmChCVa6ilisblcwpJsghaxWB1LxGITtISFbIIWsVgZScJid2PIWGyClrDYfRMyFkv+BSzB7nCQsdjYImGZ7LcUHlqXsSnyDrBMdWy5jgUtWkQsUx1brmOZbOW/gCUYFgnLVJeK17EEG3JFLDbkSljiVJP/AhaLFgnLZCv/BSxTrfwXsEy18n8dy2Qr/wUstoKWsLBN0CIWG3JFLDbkSlhyMCwSFosWAUuc7M0gFNq2SFHfeM9wqrP5GIaQuH3SJZA7v0k9TvahRTdkiNaX6xlOtdB6Q4Z+qlXZUQwpd89VZhjMy5N99M4NGU724Tu3ZGjzcj3DqS49bsgwWm5Tz9DmlGqGyXKbeoYWh9UMJ/tIslsytNzmCwyz784vhwFDtnm5nuFNxkPg4yYnIRYYxphb9xPj0f3mSkgUuy1hiI5uAMHe/Yzf2f3k3Pd2n7+1+/CV8aNnQ3Y/uNYGBKQTI8PW7Kjtjez4OCaIOxwBuN42UMcdjnzA3/7z/+C/T53/ka/7T+zbzcqIsyudbOjcBoi9b4t+b+hE8jcd4LqxsKGVz4Y3knd0KImivJVT7AqPQOeFR7qwP911kQeNKClEwckiTl3fcwMQSXYvYC9iBpbkH2mVRFkhkn/gUxKRQsSac8oa97K8TWAM3cWNBGcidkEhutA1CqKkEMk3p5REpBB5jaUL/SnmLm9KcH57FoegEWWFKJJClFAj0oAgpxFp6PGFHSiP+a2POBCxQiRnlSVRGi/KcgJYEgWNSAEig9eINJYQNSINcq9B7i8gT12C5vl8YMkX5tyCiBSiiBoRK0TJK0QEGpFizs2kyCMye41IYQmcnFpSatNRSmGgkeen3JUtMqWBRg69giYoNDxecyFYr+bkjYo0qgQqVdKoSGWLVLZYZYtVtrLKVtZcL3CgUmnOq5GpVEGlYo0KUaWi0WMMyAvRjO2KPAdBM35cArkXX7eTFL7Ji9CCJo/XyEvQ6wxo/JgJrLAjl3Yzt3FwUpM+aOTMt6AZb+fCbq+985E04+MN5adoFDR5vAbHz53onUITx2sUuQAqcgFU5AIYFdcnjoyDz+bo7/vt8v5htXhtFLs339ePb8vN+nD49s9L+87DdrlaLZ/vXrabx8XT+3Zxt9o87t6bucPLz8aBORLtZ7nmsLkoc0Ded4Xdu8RzZNdYbSz/Cw==",
      "brillig_names": [
        "_update_order_status"
      ]
    },
    {
      "name": "open_private",
      "is_unconstrained": false,
      "custom_attributes": [
        "private"
      ],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "order",
            "type": {
              "kind": "struct",
              "path": "types::onchain_cross_chain_order::OnchainCrossChainOrder",
              "fields": [
                {
                  "name": "fill_deadline",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                },
                {
                  "name": "order_data_type",
                  "type": {
                    "kind": "array",
                    "length": 32,
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  }
                },
                {
                  "name": "order_data",
                  "type": {
                    "kind": "array",
                    "length": 301,
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "filler_data",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::max_block_number::MaxBlockNumber",
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "kind": "struct",
                        "path": "std::option::Option",
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::call_context::CallContext",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "calldata_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::eth_address::EthAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::log::Log",
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::log_hash::LogHash",
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3089903740940599642": {
            "error_kind": "string",
            "string": "Invalid fill deadline"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5024954142921657308": {
            "error_kind": "string",
            "string": "Not a private order"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6579113687620452371": {
            "error_kind": "string",
            "string": "Invalid order origin domain"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "10411837482733946431": {
            "error_kind": "string",
            "string": "Invalid order sender"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13250867036985658079": {
            "error_kind": "string",
            "string": "Invalid order data type"
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "discover_new_messages",
        "build_msg_block",
        "attach_len_to_msg_block",
        "store_in_execution_cache_oracle_wrapper",
        "notify_enqueued_public_function_call_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "store_in_execution_cache_oracle_wrapper",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "fill",
      "is_unconstrained": true,
      "custom_attributes": [
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "order_id_bytes",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "origin_data_bytes",
            "type": {
              "kind": "array",
              "length": 301,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "filler_data_bytes",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "692953268510459726": {
            "error_kind": "string",
            "string": "Invalid order id"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5775299686015755157": {
            "error_kind": "string",
            "string": "Not a public order"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8412360910299423372": {
            "error_kind": "string",
            "string": "Invalid order destination domain"
          },
          "13358931442698543651": {
            "error_kind": "string",
            "string": "Order fill expired"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "fill"
      ]
    },
    {
      "name": "_assert_order_status",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "order_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "status",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7354432299782447020": {
            "error_kind": "string",
            "string": "Function _assert_order_status can only be called internally"
          },
          "10883657705690251125": {
            "error_kind": "string",
            "string": "Invalid order status"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "7Z3bbuM4DIbfJde5kChRh3mVwaLoIVMECJIibRdYFH33VYz40JiyYio7O4V5U9Qxf4v6oiNjSR+rp83D+/Pddv/r8Lr68fNjtTs83r9tD/t09fG5Xj0ct7vd9vlu+PFKnf5oMI3g9eV+f7p+fbs/vq1+aAOo1qvN/un0vwmYHvJru9ukK2U+12N7BdCaKwsDa0VYW+f02do6rzprFwjjgArPxgFBD43/Wif/w238j7E11zr+Rv/Njfhj6PiHEn+N3rfWzphp/yPGNrPRGXvpv9W39l/DV/+bVOLvSAUtmYqOsZOB0q6Qig3GtqUjDOpCpnR46EpH8Jd0kc43DKobfK1v5j8ur+4aRtZ+8ajRRZ7Oe54uAKlzGvqir7FngZosMM70zUJfUbQDslq5s3H6fjpbA5aw9dG2lH2M/ZPhVAZG1sa3xdwOaiBQdRtAtw8GGNRt0hhtCwNtGJo2BL0QrCMYtRCsJOiEYBXB1F8JwUqCUgYrCWopg7UEUQhWEoxCsI4gWCFYSTAIwTqCmWiJELyeoMzqriAY2ngJDoJpZ4JWRjO1BGVEXUkQlRAsEnSdrftqeiLopRbXEpQ5SSXBILW4lqCUwUqCUcpgLUEpg7UEJTZTR9AomRfXEpTYTCVBLb+41xKU2EwlQZBZXS1Bic1UEjQyor4k2GCxgoXCImNfCouVAS2JRUYIFBaUoSeJRfpyCouTDprEInEsEot00BQWLx00iUXCSBQWWY1BY5EOmsIi6yZoLDL4J7BYWeFAY5G2hcKy2F8pjG5dhhTkHWFZatsyjQWktJBYltq2TGNZbOS/gMUKFgrLUqeK01isNLkkFmlyKSy41MF/AYuUFgrLYiP/BSxLjfwXsCw18j+NZbGR/wIWmUFTWIJ00CQWaXJJLNLkUliiFSwUFiktBBZc7GIQb1tb8Mg3bhgutTefw1C70O50qb26XKSOi9206IYMQepyPcOlBlpvyNAsNSo7i6GPHY2gR/3yYrfeuSHDxW6+c0uG0i/XM1zq1OOGDFHGNvUMpU+pZuhkbFPPUMphNcPFbkl2S4YytrmCYTRd/qIdMQzSL9czvEl7qEN/yInFAkPE2LrvAvTup2+CotgdCeN9v0ms9rpxP8J3dt8p9b3dD9/afX1N++Gw5H5Xy7UenFl0SoRwCLvolXeqfzR5wpE3oa263g6OgSKNU9vlXeeIVXFo3uQ2/g+59X1uQZUyELtHg+7PczIWGv+v2tb9T/b/m/O/6u1o74f+N7LIkl21gcRI5g09rFJdh6lViBd9oM+4OC3KbPyh0fbfz2V02mfeAi2IIkOUO/5sWkS35zp0DQuoEYjMqxAW2qZXD9uusygajsjPF4XMqruCCBkizchTAI57mWUtaLsvF72+FGV+GSmIIkNkLUOU2Sm8IEKGyHFSytQnjKZvji7X8AUPHJFniDKvaU2LMlvqFkQcEDHMF0XFoBczRziZfhJkEEYixxCB4ogsRxQYokx1L4g4ICwHueWkhBzkyEGOHOSZ+Kxx3fzGBD0SBYYoEz2aFmV2cS+IHEOU2RehIIrzRVopRqebVJ6j0pqlYqVFDy/TnLEbz9uRhu6jYhffit6NNWG+hu7WCho3X5MpsJPj8vQRslSRo8p0hiUVJ610m6VipaVZaWlWWoAsFSstw8pXZgFsQZVZH1pSOY4KFUuFs9uYzEHfEdrQQbRjDaNd0nQtnk4nMHyjJ6IFjZ+tyRxvO8kgc6DrtEYz0qHff03jhVYTzUhDj34LGk46sZAfQmPmlzewiqHx8zUIDM38PhqcYWgY6TDGAsAYC2SOICpoZpaDz3T19/1xe/+w27wmxenm+/7xbXvYny/f/nlp7zwct7vd9vnu5Xh43Dy9Hzd3u8Pj6d5Knf/8BGfXELDp89NlcmidZhBNE3K6m6JqEEJKNaX8Lw==",
      "brillig_names": [
        "_assert_order_status"
      ]
    },
    {
      "name": "_emit_open",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "internal"
      ],
      "abi": {
        "parameters": [
          {
            "name": "order_id_bytes",
            "type": {
              "kind": "array",
              "length": 32,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "resolved_order_bytes",
            "type": {
              "kind": "array",
              "length": 613,
              "type": {
                "kind": "field"
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13459246948365409099": {
            "error_kind": "string",
            "string": "Function _emit_open can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "_emit_open"
      ]
    },
    {
      "name": "sync_notes",
      "is_unconstrained": true,
      "custom_attributes": [
        "aztec::macros::functions::utility"
      ],
      "abi": {
        "parameters": [],
        "return_type": null,
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2896122431943215824": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3367683922240523006": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "5870202753060865374": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "6336853191198150230": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8830323656616886390": {
            "error_kind": "string",
            "string": "Got a public log emitted by a different contract"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "12822839658937144934": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15366650908120444287": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "17879506016437779469": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "18194595712952743247": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "sync_notes"
      ]
    },
    {
      "name": "constructor",
      "is_unconstrained": true,
      "custom_attributes": [
        "public",
        "initializer"
      ],
      "abi": {
        "parameters": [
          {
            "name": "portal",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::eth_address::EthAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": [
        "constructor"
      ]
    },
    {
      "name": "_assert_nonce_and_set_order_details",
      "is_unconstrained": true,
      "custom_attributes": [
        "internal",
        "public"
      ],
      "abi": {
        "parameters": [
          {
            "name": "order_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "order_data",
            "type": {
              "kind": "array",
              "length": 301,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "1149705418984161792": {
            "error_kind": "string",
            "string": "Invalid nonce"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "11094545764365153162": {
            "error_kind": "string",
            "string": "Function _assert_nonce_and_set_order_details can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "_assert_nonce_and_set_order_details"
      ]
    }
  ],
  "outputs": {
    "globals": {
      "notes": [
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        },
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        }
      ],
      "storage": [
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "Token"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "admin",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "minters",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000002"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "total_supply",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000004"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "public_balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "symbol",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000006"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "name",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000008"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "decimals",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000a"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        },
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "AztecGateway7683"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "config",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "claimable_orders",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "open_orders",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000004"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "order_status",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "used_nonces",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000006"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "filled_orders_block_numbers",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000007"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        }
      ]
    },
    "structs": {
      "functions": [
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "order_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "origin_data_bytes",
                    "type": {
                      "kind": "array",
                      "length": 301,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "filler_data_bytes",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::_check_order_commitment_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::_check_order_commitment_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "order",
                    "type": {
                      "fields": [
                        {
                          "name": "fill_deadline",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 32
                          }
                        },
                        {
                          "name": "order_data_type",
                          "type": {
                            "kind": "array",
                            "length": 32,
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          }
                        },
                        {
                          "name": "order_data",
                          "type": {
                            "kind": "array",
                            "length": 301,
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "types::onchain_cross_chain_order::OnchainCrossChainOrder"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::open_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::open_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "secret",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "order_id_bytes",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "origin_data_bytes",
                    "type": {
                      "kind": "array",
                      "length": 301,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "filler_data_bytes",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::claim_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::claim_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "order_id_bytes",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "resolved_order_bytes",
                    "type": {
                      "kind": "array",
                      "length": 613,
                      "type": {
                        "kind": "field"
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::_emit_open_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::_emit_open_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "order",
                    "type": {
                      "fields": [
                        {
                          "name": "fill_deadline",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 32
                          }
                        },
                        {
                          "name": "order_data_type",
                          "type": {
                            "kind": "array",
                            "length": 32,
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          }
                        },
                        {
                          "name": "order_data",
                          "type": {
                            "kind": "array",
                            "length": 301,
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 8
                            }
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "types::onchain_cross_chain_order::OnchainCrossChainOrder"
                    }
                  },
                  {
                    "name": "filler_data",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::open_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::open_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "order_id_bytes",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "origin_data_bytes",
                    "type": {
                      "kind": "array",
                      "length": 301,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "filler_data_bytes",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::fill_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::fill_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "order_id_bytes",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "origin_data_bytes",
                    "type": {
                      "kind": "array",
                      "length": 301,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "filler_data_bytes",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "message_leaf_index",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::settle_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::settle_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "portal",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::eth_address::EthAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::constructor_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::constructor_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "order_id_bytes",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "origin_data_bytes",
                    "type": {
                      "kind": "array",
                      "length": 301,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "filler_data_bytes",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "message_leaf_index",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::settle_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::settle_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "order_id_bytes",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "origin_data_bytes",
                    "type": {
                      "kind": "array",
                      "length": 301,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "filler_data_bytes",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::fill_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::fill_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "order_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "status",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::_assert_order_status_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::_assert_order_status_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "order_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "order_id_bytes",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "filler_data",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::_trigger_settlement_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::_trigger_settlement_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "order_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "order_data",
                    "type": {
                      "kind": "array",
                      "length": 301,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::_assert_nonce_and_set_order_details_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::_assert_nonce_and_set_order_details_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "order_id_bytes",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::get_order_status_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::get_order_status_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "order_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "origin_data_bytes",
                    "type": {
                      "kind": "array",
                      "length": 301,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::_assert_order_commitment_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::_assert_order_commitment_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "order_id",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "status",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::_update_order_status_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::_update_order_status_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "order_id_bytes",
                    "type": {
                      "kind": "array",
                      "length": 32,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "AztecGateway7683::get_filled_order_block_number_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "AztecGateway7683::get_filled_order_block_number_abi"
        }
      ]
    }
  },
  "file_map": {
    "100": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"
    },
    "103": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr",
      "source": "use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, &[], false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n"
    },
    "105": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/notes.nr",
      "source": "use crate::{macros::utils::AsStrQuote, note::note_getter_options::PropertySelector};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse protocol_types::meta::{derive_packable_and_get_packed_len, generate_serialize_to_fields};\nuse std::{\n    collections::umap::UHashMap,\n    hash::{BuildHasherDefault, Hash, Hasher},\n    meta::{type_of, unquote},\n};\n\n/// A map from note type to (note_struct_definition, note_packed_len, note_type_id, fields).\n/// `fields` is an array of tuples where each tuple contains the name of the field/struct member (e.g. `amount`\n/// in `TokenNote`), the index of where the packed member starts in the packed note and a flag indicating\n/// whether the field is nullable or not.\npub comptime mut global NOTES: UHashMap<Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]), BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\npub comptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < 128 as u32,\n        \"A contract can contain at most 128 different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates a quote that implements `Packable` for a given struct `s`.\n/// If the note struct already implements `Packable`, we return an empty quote.\ncomptime fn derive_packable_if_not_implemented_and_get_len(s: TypeDefinition) -> (Quoted, u32) {\n    // We try to get the packed length of the note struct. If it does not implement `Packable`, we get Option::none()\n    let packed_len_typ = std::meta::typ::fresh_type_variable();\n    // We don't care about the result of the implements check. We just want the get the packed length.\n    let _ = s.as_type().implements(\n        quote { crate::protocol_types::traits::Packable<$packed_len_typ> }.as_trait_constraint(),\n    );\n    let maybe_packed_length = packed_len_typ.as_constant();\n\n    if maybe_packed_length.is_some() {\n        // We got some packed length meaning that the note struct implements `Packable`. For this reason we return\n        // an empty quote for the implementation and the packed length.\n        (quote {}, maybe_packed_length.unwrap())\n    } else {\n        // We didn't manage to get the packed length which means the note struct doesn't implement `Packable`\n        // so we derive it and return it along with the packed length.\n        derive_packable_and_get_packed_len(s)\n    }\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_interface(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::utils::arrays::array_concat(aztec::protocol_types::traits::Packable::pack(self), [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::prelude::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _): (Quoted, Type)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates note export for a given note struct `s`. The export is a global variable that contains note type id,\n/// note name and information about note fields (field name, index and whether the field is nullable or not).\n///\n/// Example:\n/// ```\n/// struct TokenNoteFields_5695262104 {\n///     amount: aztec::note::note_field::NoteField,\n///     owner: aztec::note::note_field::NoteField\n/// }\n///\n/// #[abi(notes)]\n/// global TokenNote_EXPORTS_5695262104: (Field, str<8>, TokenNoteFields_5695262104) = (\n///     0,\n///     \"TokenNote\",\n///     TokenNoteFields_5695262104 {\n///         amount: aztec::note::note_field::NoteField { index: 0, nullable: false },\n///         owner: aztec::note::note_field::NoteField { index: 1, nullable: false }\n///     }\n/// );\n///\n/// Randomly looking value at the end of the export name is generated by hashing the note struct type and is included\n/// to prevent naming collisions in case there are multiple notes with the same name imported in a contract.\npub(crate) comptime fn generate_note_export(\n    s: TypeDefinition,\n    note_type_id: Field,\n    fields: [(Quoted, u32, bool)],\n) -> Quoted {\n    let name = s.name();\n    let mut hasher = Poseidon2Hasher::default();\n    s.as_type().hash(&mut hasher);\n    let hash = hasher.finish() as u32;\n    let global_export_name = f\"{name}_EXPORTS_{hash}\".quoted_contents();\n    let note_fields_name = f\"{name}Fields_{hash}\".quoted_contents();\n    let (note_name_as_str, _) = name.as_str_quote();\n    let note_name_str_len = unquote!(quote { $note_name_as_str.as_bytes().len() });\n\n    let mut note_fields = &[];\n    let mut note_field_constructors = &[];\n    for field in fields {\n        let (name, index, nullable) = field;\n        note_fields = note_fields.push_back(quote { $name: aztec::note::note_field::NoteField });\n        note_field_constructors = note_field_constructors.push_back(\n            quote { $name: aztec::note::note_field::NoteField { index: $index, nullable: $nullable }},\n        );\n    }\n\n    let note_fields = note_fields.join(quote {,});\n    let note_field_constructors = note_field_constructors.join(quote {,});\n\n    quote {\n        pub struct $note_fields_name {\n            pub $note_fields\n        }\n\n        #[abi(notes)]\n        global $global_export_name: (Field, str<$note_name_str_len>, $note_fields_name) = ($note_type_id, $note_name_as_str, $note_fields_name { $note_field_constructors });\n    }\n}\n\n/// Registers a note struct `note` with the given `note_packed_len`, `note_type_id`, `fixed_fields` and\n/// `nullable_fields` in the global `NOTES` map.\ncomptime fn register_note(\n    note: TypeDefinition,\n    note_packed_len: u32,\n    note_type_id: Field,\n    fixed_fields: [(Quoted, Type, u32)],\n    nullable_fields: [(Quoted, Type, u32)],\n) {\n    let mut fields = &[];\n    for field in fixed_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, false));\n    }\n    for field in nullable_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, true));\n    }\n\n    NOTES.insert(note.as_type(), (note, note_packed_len, note_type_id, fields));\n}\n\n/// Separates note struct members into fixed and nullable ones. It also stores the index of where each struct member\n/// starts in the serialized note. Note that each struct member can occupy multiple fields (as in Field type).\ncomptime fn index_note_fields(\n    s: TypeDefinition,\n    nullable_fields: [Quoted],\n) -> ([(Quoted, Type, u32)], [(Quoted, Type, u32)]) {\n    let mut indexed_fixed_fields: [(Quoted, Type, u32)] = &[];\n    let mut indexed_nullable_fields = &[];\n    let mut counter: u32 = 0;\n    for field in s.fields_as_written() {\n        let (name, typ) = field;\n        if nullable_fields.all(|field| field != name) {\n            indexed_fixed_fields = indexed_fixed_fields.push_back((name, typ, counter));\n        } else {\n            indexed_nullable_fields = indexed_nullable_fields.push_back((name, typ, counter));\n        }\n        let (serialization_fields, _) = generate_serialize_to_fields(name, typ, &[], true);\n        // Each struct member can occupy multiple fields so we need to increment the counter accordingly\n        counter += serialization_fields.len();\n    }\n    (indexed_fixed_fields, indexed_nullable_fields)\n}\n\n/// Generates the following:\n/// - NoteTypeProperties\n/// - NoteType trait implementation\n/// - NoteHash trait implementation\n/// - Packable implementation\n///\n/// Registers the note in the global `NOTES` map.\n///\n/// For more details on the generated code, see the individual functions.\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $note_hash_impl\n        $packable_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - Packable implementation: Enables serialization/deserialization of the note\n///\n/// # Registration\n/// Registers the note in the global `NOTES` map with:\n/// - Note type ID\n/// - Packed length\n/// - Field indices and nullability\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n    let note_type_id = get_next_note_type_id();\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    let note_properties = generate_note_properties(s);\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $packable_impl\n    }\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    assert(\n        has_owner,\n        \"Note must have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n"
    },
    "106": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/storage.nr",
      "source": "use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\nuse super::utils::is_note;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract. Only a single struct in the entire contract\n/// should have this macro (or `storage_no_init`) applied to it.\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot }, false);\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n/// Only a single struct in the entire contract should have this macro (or `storage`) applied to it.\npub comptime fn storage_no_init(_s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(\n    typ: Type,\n    slot: Quoted,\n    parent_is_map: bool,\n) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot }, true);\n        (quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }, 1)\n    } else {\n        let storage_size = if parent_is_map {\n            // Variables inside a map do not require contiguous slots since the map slot derivation is assumed to result\n            // in slots very far away from one another.\n            1\n        } else {\n            let (_, container_struct_generics) = typ.as_data_type().unwrap();\n            let stored_struct = container_struct_generics[0];\n\n            if is_note(stored_struct) {\n                // Private notes always occupy a single slot, since the slot is only used as a state variable\n                // identifier.\n                1\n            } else {\n                get_storage_size(typ)\n            }\n        };\n\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        (quote { $struct_name::new(context, $slot)}, storage_size)\n    }\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n"
    },
    "107": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/utils.nr",
      "source": "use std::meta::unquote;\n\npub(crate) comptime fn get_fn_visibility(f: FunctionDefinition) -> Quoted {\n    if f.has_named_attribute(\"private\") {\n        quote { private }\n    } else if f.has_named_attribute(\"public\") {\n        quote { public }\n    } else {\n        panic(f\"Function is neither private nor public\")\n    }\n}\n\npub(crate) comptime fn is_fn_private(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"private\")\n}\n\npub(crate) comptime fn is_fn_public(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"public\")\n}\n\npub(crate) comptime fn is_fn_utility(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"utility\")\n}\n\npub(crate) comptime fn is_fn_contract_library_method(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"contract_library_method\")\n}\n\npub(crate) comptime fn is_fn_test(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"test\")\n}\n\npub(crate) comptime fn is_fn_view(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"view\")\n}\n\npub(crate) comptime fn is_fn_internal(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"internal\")\n}\n\npub(crate) comptime fn is_fn_initializer(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"initializer\")\n}\n\npub(crate) comptime fn fn_has_noinitcheck(f: FunctionDefinition) -> bool {\n    f.has_named_attribute(\"noinitcheck\")\n}\n\n/// Takes a function body as a collection of expressions, and alters it by prepending and appending quoted values.\npub(crate) comptime fn modify_fn_body(body: [Expr], prepend: Quoted, append: Quoted) -> Expr {\n    // We need to quote the body before we can alter its contents, so we fold it by quoting each expression.\n    let mut body_quote = body.fold(quote {}, |full_quote: Quoted, expr: Expr| {\n        let expr_quote = expr.quoted();\n        quote {\n                $full_quote\n                $expr_quote\n            }\n    });\n    body_quote = quote {\n        {\n            $prepend\n            $body_quote\n            $append\n        }\n    };\n    let body_expr = body_quote.as_expr();\n    body_expr.expect(f\"Body is not an expression: {body_quote}\")\n}\n\npub(crate) comptime fn add_to_field_slice(slice_name: Quoted, name: Quoted, typ: Type) -> Quoted {\n    if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        quote { $slice_name = $slice_name.push_back($name as Field); }\n    } else if typ.as_data_type().is_some() {\n        // We invoke serialize as a static trait function rather than calling $name.serialize() directly in the quote\n        // to avoid \"trait not in scope\" compiler warnings.\n        quote { $slice_name = $slice_name.append(aztec::protocol_types::traits::Serialize::serialize($name)); }\n    } else if typ.as_array().is_some() {\n        let (element_type, _) = typ.as_array().unwrap();\n        let serialized_name = f\"{name}_serialized\".quoted_contents();\n        // We invoke serialize as a static trait function rather than calling x.serialize() directly in the quote\n        // to avoid \"trait not in scope\" compiler warnings.\n        quote {\n            let $serialized_name = $name.map(|x: $element_type | aztec::protocol_types::traits::Serialize::serialize(x));\n            for i in 0..$name.len() {\n                $slice_name = $slice_name.append($serialized_name[i].as_slice());\n            }\n        }\n    } else if typ.as_str().is_some() {\n        quote {\n            $slice_name = $slice_name.append($name.as_bytes().map(| byte: u8 | byte as Field).as_slice());\n        }\n    } else {\n        panic(\n            f\"Cannot add to slice: unsupported type {typ} variable {name}\",\n        )\n    }\n}\n\n/// Adds a value to a hash::ArgsHasher. Structs and values inside arrays are required to implement the Serialize trait.\npub(crate) comptime fn add_to_hasher(hasher_name: Quoted, name: Quoted, typ: Type) -> Quoted {\n    if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        quote { $hasher_name.add($name as Field); }\n    } else if typ.as_data_type().is_some() {\n        quote { $hasher_name.add_multiple(dep::aztec::protocol_types::traits::Serialize::serialize($name)); }\n    } else if typ.as_array().is_some() {\n        let (element_type, _) = typ.as_array().unwrap();\n        let serialized_name = f\"{name}_serialized\".quoted_contents();\n        quote {\n           let $serialized_name = $name.map(|x: $element_type | dep::aztec::protocol_types::traits::Serialize::serialize(x));\n            for i in 0..$name.len() {\n                $hasher_name.add_multiple($serialized_name[i]);\n            }\n        }\n    } else if typ.as_str().is_some() {\n        quote {\n            $hasher_name.add_multiple($name.as_bytes().map(| byte: u8 | byte as Field));\n        }\n    } else {\n        panic(\n            f\"Cannot add to hasher: unsupported type {typ} of variable {name}\",\n        )\n    }\n}\n\ncomptime fn signature_of_type(typ: Type) -> Quoted {\n    if typ.is_field() {\n        quote {Field}\n    } else if typ.as_integer().is_some() {\n        let (is_signed, bit_size) = typ.as_integer().unwrap();\n        if is_signed {\n            f\"i{bit_size}\".quoted_contents()\n        } else {\n            f\"u{bit_size}\".quoted_contents()\n        }\n    } else if typ.is_bool() {\n        quote {bool}\n    } else if typ.as_str().is_some() {\n        let str_len_typ = typ.as_str().unwrap();\n        let str_len = str_len_typ.as_constant().unwrap();\n        f\"str<{str_len}>\".quoted_contents()\n    } else if typ.as_array().is_some() {\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let element_typ_quote = signature_of_type(element_type);\n        f\"[{element_typ_quote};{array_len}]\".quoted_contents()\n    } else if typ.as_data_type().is_some() {\n        let (s, generics) = typ.as_data_type().unwrap();\n        let field_signatures = s\n            .fields(generics)\n            .map(|(_, typ): (Quoted, Type)| signature_of_type(typ))\n            .join(quote {,});\n        f\"({field_signatures})\".quoted_contents()\n    } else if typ.as_tuple().is_some() {\n        // Note that tuples are handled the same way as structs\n        let types = typ.as_tuple().unwrap();\n        let field_signatures = types.map(|typ: Type| signature_of_type(typ)).join(quote {,});\n        f\"({field_signatures})\".quoted_contents()\n    } else {\n        panic(f\"Unsupported type {typ}\")\n    }\n}\n\npub(crate) trait AsStrQuote {\n    fn as_str_quote(self) -> (Self, u32);\n}\n\nimpl<let N: u32, Env> AsStrQuote for Quoted {\n    // Used to convert an arbitrary quoted type into a quoted string, removing whitespace between tokens\n    comptime fn as_str_quote(self) -> (Quoted, u32) {\n        let tokens = self.tokens();\n        let mut acc: [u8] = &[];\n        let mut total_len: u32 = 0;\n        for token in tokens {\n            let token_as_fmt_str = f\"{token}\";\n            let token_as_str = unquote!(quote {$token_as_fmt_str});\n            let token_len = unquote!(quote { $token_as_str.as_bytes().len() });\n            let token_as_bytes = unquote!(quote { $token_as_str.as_bytes().as_slice() });\n            total_len += token_len;\n            acc = acc.append(token_as_bytes);\n        }\n        let result = unquote!(\n            quote {\n                let signature_as_array: [u8; $total_len] = $acc.as_array();\n                signature_as_array.as_str_unchecked()\n            },\n        );\n        (quote { $result }, total_len)\n    }\n}\n\npub(crate) comptime fn compute_fn_selector(f: FunctionDefinition) -> Field {\n    // The function selector is computed from the function signature, which is made up of the function name and types of\n    // parameters, but not including the return type. For example, given:\n    //\n    // fn foo(a: Field, b: AztecAddress) -> Field\n    //\n    // The signature will be \"foo(Field,AztecAddress)\".\n    let fn_name = f.name();\n    let args_signatures =\n        f.parameters().map(|(_, typ): (Quoted, Type)| signature_of_type(typ)).join(quote {,});\n    let signature_quote = quote { $fn_name($args_signatures) };\n    let (signature_str_quote, _) = signature_quote.as_str_quote();\n\n    let computation_quote = quote {\n        protocol_types::traits::ToField::to_field(protocol_types::abis::function_selector::FunctionSelector::from_signature($signature_str_quote))\n    };\n    unquote!(computation_quote)\n}\n\npub(crate) comptime fn compute_event_selector(s: TypeDefinition) -> Field {\n    // The event selector is computed from the type signature of the struct in the event, similar to how one might type\n    // the constructor function. For example, given:\n    //\n    // struct Foo {\n    //   a: Field,\n    //   b: AztecAddress,\n    // }\n    //\n    // The signature will be \"Foo(Field,AztecAddress)\".\n    let event_name = s.name();\n    let args_signatures = s\n        .fields_as_written()\n        .map(|(_, typ): (Quoted, Type)| {\n            // signature_of_type can handle structs, so this supports nested structs\n            // FIXME: Field generics are not handled here!\n            signature_of_type(typ)\n        })\n        .join(quote {,});\n    let signature_quote = quote { $event_name($args_signatures) };\n    let (signature_str_quote, _) = signature_quote.as_str_quote();\n\n    let computation_quote = quote {\n        protocol_types::traits::ToField::to_field(protocol_types::abis::event_selector::EventSelector::from_signature($signature_str_quote))\n    };\n    unquote!(computation_quote)\n}\n\n/// Returns how many storage slots a type needs to reserve for itself. State variables must implement the Storage trait\n/// for slots to be allocated for them.\npub(crate) comptime fn get_storage_size(typ: Type) -> u32 {\n    // We create a type variable for the storage size. We can't simply read the value used in the implementation because\n    // it may not be a constant (e.g. N + 1). We then bind it to the implementation of the Storage trait.\n    let storage_size = std::meta::typ::fresh_type_variable();\n    assert(\n        typ.implements(quote { crate::state_vars::Storage<$storage_size> }.as_trait_constraint()),\n        f\"Attempted to fetch storage size, but {typ} does not implement the Storage trait\",\n    );\n\n    storage_size.as_constant().unwrap()\n}\n\npub(crate) comptime fn module_has_storage(m: Module) -> bool {\n    m.structs().any(|s: TypeDefinition| {\n        s.has_named_attribute(\"storage\") | s.has_named_attribute(\"storage_no_init\")\n    })\n}\n\npub(crate) comptime fn module_has_initializer(m: Module) -> bool {\n    m.functions().any(|f: FunctionDefinition| is_fn_initializer(f))\n}\n\npub(crate) comptime fn is_note(typ: Type) -> bool {\n    typ.as_data_type().map_or(false, |struc: (TypeDefinition, [Type])| {\n        let (def, _) = struc;\n        def.has_named_attribute(\"note\")\n            | def.has_named_attribute(\"partial_note\")\n            | def.has_named_attribute(\"custom_note\")\n    })\n}\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `noir-protocol-circuits/crates/types/src/meta/mod.nr`. We maintain separate\n/// copies because importing it here from there would cause the `target_trait` to be interpreted in the context\n/// of the protocol circuits types crate, making it impossible to compile code for traits from this crate\n/// (e.g. NoteType).\npub(crate) comptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Type does not implement trait\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n"
    },
    "108": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/mod.nr",
      "source": "use protocol_types::{address::AztecAddress, debug_log::debug_log};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod pending_tagged_log;\npub mod private_logs;\npub mod private_notes;\n\nuse private_notes::MAX_NOTE_PACKED_LEN;\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, nonce, storage slot and note type\n/// ID and attempts to compute its note hash (not siloed by nonce nor address) and inner nullifier (not siloed by\n/// address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::messages::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    private_logs::fetch_and_process_private_tagged_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    partial_notes::fetch_and_process_public_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n}\n"
    },
    "109": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/nonce_discovery.nr",
      "source": "use crate::messages::discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    unique_note_hashes_in_tx.for_eachi(|i, expected_unique_note_hash| {\n        // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n        // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n        let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n        // Given nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n        // the note hash at the array index we're currently processing.\n        // TODO(#11157): handle failed note_hash_and_nullifier computation\n        let hashes = compute_note_hash_and_nullifier(\n            packed_note,\n            storage_slot,\n            note_type_id,\n            contract_address,\n            candidate_nonce,\n        )\n            .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n        let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n        let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n        if unique_note_hash == expected_unique_note_hash {\n            // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n            // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n            // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n            // PXE may fail to realize that a given note has been nullified already, and calls to the application\n            // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n            // application already has more direct means of making a call to it fail the transaction.\n            discovered_notes.push(\n                DiscoveredNoteInfo {\n                    nonce: candidate_nonce,\n                    note_hash: hashes.note_hash,\n                    inner_nullifier: hashes.inner_nullifier,\n                },\n            );\n\n            // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n            // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n            // notes containing random values in order to hide their contents.\n        }\n    });\n\n    debug_log_format(\n        \"Discovered a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n\nmod test {\n    use crate::{\n        messages::discovery::{NoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n        note::{\n            note_interface::{NoteHash, NoteType},\n            note_metadata::SettledNoteMetadata,\n            retrieved_note::RetrievedNote,\n            utils::compute_note_hash_for_nullify,\n        },\n        oracle::random::random,\n        test::mocks::mock_note::MockNote,\n        utils::array,\n    };\n\n    use dep::protocol_types::{\n        address::AztecAddress,\n        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n        traits::{FromField, Packable},\n    };\n\n    use super::attempt_note_nonce_discovery;\n\n    // This implementation could be simpler, but this serves as a nice example of the expected flow in a real\n    // implementation, and as a sanity check that the interface is sufficient.\n    unconstrained fn compute_note_hash_and_nullifier(\n        packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n        storage_slot: Field,\n        note_type_id: Field,\n        contract_address: AztecAddress,\n        nonce: Field,\n    ) -> Option<NoteHashAndNullifier> {\n        if note_type_id == MockNote::get_id() {\n            let note = MockNote::unpack(array::subarray(packed_note.storage(), 0));\n            let note_hash = note.compute_note_hash(storage_slot);\n\n            let note_hash_for_nullify = compute_note_hash_for_nullify(\n                RetrievedNote {\n                    note,\n                    contract_address,\n                    metadata: SettledNoteMetadata::new(nonce).into(),\n                },\n                storage_slot,\n            );\n\n            let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n\n            Option::some(NoteHashAndNullifier { note_hash, inner_nullifier })\n        } else {\n            Option::none()\n        }\n    }\n\n    global VALUE: Field = 7;\n    global FIRST_NULLIFIER_IN_TX: Field = 47;\n    global CONTRACT_ADDRESS: AztecAddress = AztecAddress::from_field(13);\n    global STORAGE_SLOT: Field = 99;\n\n    #[test]\n    unconstrained fn no_note_hashes() {\n        let unique_note_hashes_in_tx = BoundedVec::new();\n        let packed_note = BoundedVec::new();\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Failed to compute a note hash\")]\n    unconstrained fn failed_hash_computation() {\n        let unique_note_hashes_in_tx = BoundedVec::from_array([random()]);\n        let packed_note = BoundedVec::new();\n        let note_type_id = 0; // This note type id is unknown to compute_note_hash_and_nullifier\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            note_type_id,\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    struct NoteAndData {\n        note: MockNote,\n        nonce: Field,\n        note_hash: Field,\n        unique_note_hash: Field,\n        inner_nullifier: Field,\n    }\n\n    unconstrained fn construct_note(value: Field, note_index_in_tx: u32) -> NoteAndData {\n        let nonce = compute_note_hash_nonce(FIRST_NULLIFIER_IN_TX, note_index_in_tx);\n\n        let retrieved_note = MockNote::new(value)\n            .contract_address(CONTRACT_ADDRESS)\n            .note_metadata(SettledNoteMetadata::new(nonce).into())\n            .build_retrieved_note();\n        let note = retrieved_note.note;\n\n        let note_hash = note.compute_note_hash(STORAGE_SLOT);\n        let unique_note_hash =\n            compute_unique_note_hash(nonce, compute_siloed_note_hash(CONTRACT_ADDRESS, note_hash));\n        let inner_nullifier = note.compute_nullifier_unconstrained(compute_note_hash_for_nullify(\n            retrieved_note,\n            STORAGE_SLOT,\n        ));\n\n        NoteAndData { note, nonce, note_hash, unique_note_hash, inner_nullifier }\n    }\n\n    #[test]\n    unconstrained fn single_note() {\n        let note_index_in_tx = 2;\n        let note_and_data = construct_note(VALUE, note_index_in_tx);\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(note_index_in_tx, note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(note_and_data.note.pack()),\n        );\n\n        assert_eq(discovered_notes.len(), 1);\n        let discovered_note = discovered_notes.get(0);\n\n        assert_eq(discovered_note.nonce, note_and_data.nonce);\n        assert_eq(discovered_note.note_hash, note_and_data.note_hash);\n        assert_eq(discovered_note.inner_nullifier, note_and_data.inner_nullifier);\n    }\n\n    #[test]\n    unconstrained fn multiple_notes_same_preimage() {\n        let first_note_index_in_tx = 3;\n        let first_note_and_data = construct_note(VALUE, first_note_index_in_tx);\n\n        let second_note_index_in_tx = 5;\n        let second_note_and_data = construct_note(VALUE, second_note_index_in_tx);\n\n        // Both notes have the same preimage (and therefore packed representation), so both should be found in the same\n        // call.\n        assert_eq(first_note_and_data.note, second_note_and_data.note);\n        let packed_note = first_note_and_data.note.pack();\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(first_note_index_in_tx, first_note_and_data.unique_note_hash);\n        unique_note_hashes_in_tx.set(second_note_index_in_tx, second_note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(packed_note),\n        );\n\n        assert_eq(discovered_notes.len(), 2);\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == first_note_and_data.nonce)\n                & (discovered_note.note_hash == first_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == first_note_and_data.inner_nullifier)\n        }));\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.nonce == second_note_and_data.nonce)\n                & (discovered_note.note_hash == second_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == second_note_and_data.inner_nullifier)\n        }));\n    }\n}\n"
    },
    "110": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/partial_notes.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle::message_discovery::{deliver_note, get_log_by_tag},\n    utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::PUBLIC_LOG_DATA_SIZE_IN_FIELDS,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize, ToField},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private message\n/// (e.g. the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// Public logs contain an extra field at the beginning with the address of the contract that emitted them, and partial\n/// notes emit their completion tag in the log, resulting in the first two fields in the public log not being part of\n/// the packed public content.\n// TODO(#10273): improve how contract log siloing is handled\npub global NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG: u32 = 2;\n\n/// The maximum length of the packed representation of public fields in a partial note. This is limited by public log\n/// size and extra fields in the log (e.g. the tag).\npub global MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH: u32 =\n    PUBLIC_LOG_DATA_SIZE_IN_FIELDS - NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG;\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_msg(msg_metadata, msg_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for public logs that would result in the completion of pending partial notes, ultimately resulting in the\n/// notes being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_public_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    pending_partial_notes.for_each(|i, pending_partial_note: DeliveredPendingPartialNote| {\n        let maybe_log = get_log_by_tag(pending_partial_note.note_completion_log_tag);\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n\n            // Note that we're not removing the pending partial note from the capsule array, so we will continue\n            // searching for this tagged log when performing message discovery in the future until we either find it or\n            // the entry is somehow removed from the array.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public logs have an extra field at the beginning with the contract address, which we use to verify\n            // that we're getting the logs from the expected contract.\n            // TODO(#10273): improve how contract log siloing is handled\n            assert_eq(\n                log.log_content.get(0),\n                contract_address.to_field(),\n                \"Got a public log emitted by a different contract\",\n            );\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the private message and public log sans the extra\n            // fields) to get the complete packed content.\n            let packed_public_note_content: BoundedVec<_, MAX_PUBLIC_PARTIAL_NOTE_PACKED_CONTENT_LENGTH> =\n                array::subbvec(log.log_content, NON_PACKED_CONTENT_FIELDS_IN_PUBLIC_LOG);\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                packed_public_note_content,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            discovered_notes.for_each(|discovered_note| {\n                // TODO:(#10728): decide how to handle notes that fail delivery. This could be due to e.g. a\n                // temporary node connectivity issue - is simply throwing good enough here?\n                assert(\n                    deliver_note(\n                        contract_address,\n                        pending_partial_note.storage_slot,\n                        discovered_note.nonce,\n                        complete_packed_note,\n                        discovered_note.note_hash,\n                        discovered_note.inner_nullifier,\n                        log.tx_hash,\n                        pending_partial_note.recipient,\n                    ),\n                    \"Failed to deliver note\",\n                );\n            });\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            // TODO(#11627): only remove the pending entry if we actually process a log that results in the note\n            // being completed.\n            pending_partial_notes.remove(i);\n        }\n    });\n}\n\nfn decode_partial_note_private_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all partial note private messages must have at least {PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private message encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = msg_content.get(0);\n    let note_completion_log_tag = msg_content.get(1);\n\n    let packed_private_note_content = array::subbvec(msg_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n"
    },
    "112": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/private_logs.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{\n            ComputeNoteHashAndNullifier,\n            partial_notes::process_partial_note_private_msg,\n            pending_tagged_log::{PENDING_TAGGED_LOG_ARRAY_BASE_SLOT, PendingTaggedLog},\n            private_notes::process_private_note_msg,\n        },\n        encoding::decode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        msg_type::{\n            PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_EVENT_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID,\n        },\n    },\n    oracle::{logs::store_private_event_log, message_discovery::sync_notes},\n    utils::array,\n};\n\nuse protocol_types::{\n    abis::event_selector::EventSelector,\n    address::AztecAddress,\n    debug_log::{debug_log, debug_log_format},\n    traits::FromField,\n};\n\n/// Searches for private logs that signal new private notes that are then delivered to PXE, or new partial notes that\n/// are stored in the PXE capsules so that `fetch_and_process_public_partial_note_completion_logs` can later search for\n/// public logs that will complete them.\npub unconstrained fn fetch_and_process_private_tagged_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `syncNotes` oracle.\n    // This makes PXE synchronize tags, download logs and store the pending tagged logs in capsule array which are then\n    // retrieved and processed here.\n    sync_notes(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    // Get the logs from the capsule array and process them one by one\n    let logs =\n        CapsuleArray::<PendingTaggedLog>::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n    logs.for_each(|i, log: PendingTaggedLog| {\n        process_log(contract_address, compute_note_hash_and_nullifier, log);\n        logs.remove(i);\n    });\n}\n\n/// Processes a log's ciphertext by decrypting it and then searching the plaintext for private notes or partial notes.\n///\n/// Private notes result in nonce discovery being performed prior to delivery, which requires knowledge of the\n/// transaction hash in which the notes would've been created (typically the same transaction in which the log was\n/// emitted), along with the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier`\n/// function.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\nunconstrained fn process_log<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    pending_tagged_log: PendingTaggedLog,\n) {\n    debug_log_format(\n        \"Processing log with tag {0}\",\n        [pending_tagged_log.log.get(0)],\n    );\n\n    // The tag is ignored for now.\n    let ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n    let log_plaintext = AES128::decrypt_log(ciphertext, pending_tagged_log.recipient);\n\n    // The first thing to do after decrypting the log is to determine what type of private log we're processing. We\n    // have 3 log types: private note logs, partial note logs and event logs.\n\n    let (msg_type_id, msg_metadata, msg_content) = decode_message(log_plaintext);\n\n    if msg_type_id == PRIVATE_NOTE_MSG_TYPE_ID {\n        debug_log(\"Processing private note msg\");\n\n        process_private_note_msg(\n            contract_address,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.unique_note_hashes_in_tx,\n            pending_tagged_log.first_nullifier_in_tx,\n            pending_tagged_log.recipient,\n            compute_note_hash_and_nullifier,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID {\n        debug_log(\"Processing partial note private msg\");\n\n        process_partial_note_private_msg(\n            contract_address,\n            pending_tagged_log.recipient,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PRIVATE_EVENT_MSG_TYPE_ID {\n        debug_log(\"Processing private event msg\");\n\n        // In the case of events, the msg metadata is the event selector.\n        let event_selector = EventSelector::from_field(msg_metadata as Field);\n\n        store_private_event_log(\n            contract_address,\n            pending_tagged_log.recipient,\n            event_selector,\n            msg_content,\n            pending_tagged_log.tx_hash,\n            pending_tagged_log.log_index_in_tx,\n            pending_tagged_log.tx_index_in_block,\n        );\n    } else {\n        debug_log_format(\"Unknown msg type id {0}\", [msg_type_id as Field]);\n    }\n}\n"
    },
    "113": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/discovery/private_notes.nr",
      "source": "use crate::{\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n    },\n    oracle,\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note message content that are not the note's packed representation.\nglobal PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_msg<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_msg(msg_metadata, msg_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private message\",\n        [discovered_notes.len() as Field],\n    );\n\n    discovered_notes.for_each(|discovered_note| {\n        // TODO:(#10728): handle notes that fail delivery. This could be due to e.g. a temporary node connectivity\n        // issue, and we should perhaps not have marked the tag index as taken.\n        assert(\n            oracle::message_discovery::deliver_note(\n                contract_address,\n                storage_slot,\n                discovered_note.nonce,\n                packed_note,\n                discovered_note.note_hash,\n                discovered_note.inner_nullifier,\n                tx_hash,\n                recipient,\n            ),\n            \"Failed to deliver note\",\n        );\n    });\n}\n\nfn decode_private_note_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all private note messages must have at least {PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private note message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = msg_content.get(0);\n    let packed_note = array::subbvec(msg_content, PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n"
    },
    "114": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/encoding.nr",
      "source": "// TODO(#12750): don't make these values assume we're using AES.\nuse crate::{\n    messages::encryption::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS, utils::array,\n};\n\nglobal MAX_MESSAGE_LEN: u32 = PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\nglobal MESSAGE_EXPANDED_METADATA_LEN: u32 = 1;\n\n// The standard message layout is composed of:\n//  - an initial field called the 'expanded metadata'\n//  - an arbitrary number of fields following that called the 'message content'\n//\n// ```\n// message: [ msg_expanded_metadata, ...msg_content ]\n// ```\n//\n// The expanded metadata itself is interpreted as a u128, of which:\n//  - the upper 64 bits are the message type id\n//  - the lower 64 bits are called the 'message metadata'\n//\n// ```\n// msg_expanded_metadata: [  msg_type_id    |  msg_metadata  ]\n//                        <---  64 bits --->|<--- 64 bits --->\n// ```\n//\n// The meaning of the message metadata and message content depend on the value of the message type id. Note that there\n// is nothing special about the message metadata, it _can_ be considered part of the content. It just has a different\n// name to make it distinct from the message content given that it is not a full field.\n\n/// The maximum length of a message's content, i.e. not including the expanded message metadata.\npub global MAX_MESSAGE_CONTENT_LEN: u32 = MAX_MESSAGE_LEN - MESSAGE_EXPANDED_METADATA_LEN;\n\n/// Encodes a message following aztec-nr's standard message encoding. This message can later be decoded with\n/// `decode_message` to retrieve the original values.\n///\n/// - The `msg_type` is an identifier that groups types of messages that are all processed the same way, e.g. private\n/// notes or events. Possible values are defined in `aztec::messages::msg_type`.\n/// - The `msg_metadata` and `msg_content` are the values stored in the message, whose meaning depends on the\n///  `msg_type`. The only special thing about `msg_metadata` that separates it from `msg_content` is that it is a u64\n/// instead of a full Field (due to details of how messages are encoded), allowing applications that can fit values into\n/// this smaller variable to achieve higher data efficiency.\npub fn encode_message<let N: u32>(\n    msg_type: u64,\n    msg_metadata: u64,\n    msg_content: [Field; N],\n) -> [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] {\n    std::static_assert(\n        msg_content.len() <= MAX_MESSAGE_CONTENT_LEN,\n        \"Invalid message content: it must have a length of at most MAX_MESSAGE_CONTENT_LEN\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n    let mut message: [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] = std::mem::zeroed();\n\n    message[0] = to_expanded_metadata(msg_type, msg_metadata);\n    for i in 0..msg_content.len() {\n        message[MESSAGE_EXPANDED_METADATA_LEN + i] = msg_content[i];\n    }\n\n    message\n}\n\n/// Decodes a standard aztec-nr message, i.e. one created via `encode_message`, returning the original encoded values.\n///\n/// Note that `encode_message` returns a fixed size array while this function takes a `BoundedVec`: this is because\n/// prior to decoding the message type is unknown, and consequentially not known at compile time. If working with\n/// fixed-size messages, consider using `BoundedVec::from_array` to convert them.\npub unconstrained fn decode_message(\n    message: BoundedVec<Field, MAX_MESSAGE_LEN>,\n) -> (u64, u64, BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>) {\n    assert(\n        message.len() >= MESSAGE_EXPANDED_METADATA_LEN,\n        f\"Invalid message: it must have at least {MESSAGE_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n\n    let msg_expanded_metadata = message.get(0);\n    let (msg_type_id, msg_metadata) = from_expanded_metadata(msg_expanded_metadata);\n    let msg_content = array::subbvec(message, MESSAGE_EXPANDED_METADATA_LEN);\n\n    (msg_type_id, msg_metadata, msg_content)\n}\n\nglobal U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\nfn to_expanded_metadata(msg_type: u64, msg_metadata: u64) -> Field {\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (msg_type as Field) * U64_SHIFT_MULTIPLIER;\n    let msg_metadata_field = msg_metadata as Field;\n\n    type_field + msg_metadata_field\n}\n\nfn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let msg_metadata = (input as u64);\n    let msg_type = ((input - (msg_metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    (msg_type, msg_metadata)\n}\n\nmod tests {\n    use crate::utils::array::subarray::subarray;\n    use super::{\n        decode_message, encode_message, from_expanded_metadata, MAX_MESSAGE_CONTENT_LEN,\n        to_expanded_metadata,\n    };\n\n    global U64_MAX: u64 = (2.pow_32(64) - 1) as u64;\n    global U128_MAX: Field = (2.pow_32(128) - 1);\n\n    #[test]\n    unconstrained fn encode_decode_empty_message(msg_type: u64, msg_metadata: u64) {\n        let encoded = encode_message(msg_type, msg_metadata, []);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_short_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN / 2],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_full_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn to_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(U64_MAX, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let packed = to_expanded_metadata(0, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let packed = to_expanded_metadata(0, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn from_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let input = U128_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let input = (U128_MAX - U64_MAX as Field);\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let input = U64_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let input = 0;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn to_from_expanded_metadata(original_msg_type: u64, original_msg_metadata: u64) {\n        let packed = to_expanded_metadata(original_msg_type, original_msg_metadata);\n        let (unpacked_msg_type, unpacked_msg_metadata) = from_expanded_metadata(packed);\n\n        assert_eq(original_msg_type, unpacked_msg_type);\n        assert_eq(original_msg_metadata, unpacked_msg_metadata);\n    }\n}\n"
    },
    "115": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/messages/encryption/aes128.nr",
      "source": "use dep::protocol_types::{\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::{\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    messages::{\n        encryption::log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_CIPHERTEXT_LEN,\n            PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n        logs::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    prelude::AztecAddress,\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign, point_to_bytes},\n        random::get_random_bytes,\n    },\n};\n\nuse std::aes128::aes128_encrypt;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PLAINTEXT_LEN: u32>(\n        plaintext: [Field; PLAINTEXT_LEN],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.\n        // This would be more costly constraint-wise but cheaper DA-wise.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // TODO: this is insecure and wasteful:\n        // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n        // and again for the proper ciphertext) (at least, I never got the\n        // \"go ahead\" that this would be safe, unfortunately).\n        // \"Wasteful\", because the exact same computation is happening further down.\n        // I'm leaving that 2nd computation where it is, because this 1st computation\n        // will be imminently deleted, when the header logic is deleted.\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) as bool;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret and symmetric key\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        messages::encryption::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(\n            IndexedTaggingSecret::deserialize([69420, 1337]),\n        );\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret);\n\n        // Decrypt the log\n        let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n\n        // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n        // static methods of the struct).\n        let _ = AES128 {};\n    }\n}\n"
    },
    "12": {
      "path": "std/convert.nr",
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n"
    },
    "136": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr",
      "source": "use protocol_types::traits::Serialize;\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, nonce: Field },\n//   Settled{ nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_nonce }\n            }\n        } else if maybe_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(nonce: Field) -> Self {\n        Self { nonce }\n    }\n\n    pub fn nonce(self) -> Field {\n        self.nonce\n    }\n}\n"
    },
    "139": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/note/utils.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let nonce = retrieved_note.metadata.to_pending_previous_phase().nonce();\n\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n"
    },
    "142": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"
    },
    "143": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr",
      "source": "use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n"
    },
    "144": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(notifyEnqueuedPublicFunctionCall)]\nunconstrained fn notify_enqueued_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_enqueued_public_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_enqueued_public_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_enqueued_public_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a public call has been enqueued, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_enqueued_public_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\n#[oracle(notifySetPublicTeardownFunctionCall)]\nunconstrained fn notify_set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_set_public_teardown_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_set_public_teardown_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_public_teardown_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a teardown call has been set, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_set_public_teardown_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"
    },
    "145": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
    },
    "146": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr",
      "source": "/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field], hash: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };\n}\n\nunconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {\n    store_in_execution_cache_oracle(values, hash);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n"
    },
    "147": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr",
      "source": "use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"
    },
    "152": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr",
      "source": "use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n"
    },
    "153": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"
    },
    "154": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr",
      "source": "use crate::messages::encoding::MAX_MESSAGE_CONTENT_LEN;\nuse protocol_types::{abis::event_selector::EventSelector, address::AztecAddress};\n\n/// The below only exists to broadcast the raw log, so we can provide it to the base rollup later to be constrained.\npub unconstrained fn notify_created_contract_class_log<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {\n    notify_created_contract_class_log_private_oracle(contract_address, message, counter)\n}\n\n#[oracle(notifyCreatedContractClassLog)]\nunconstrained fn notify_created_contract_class_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) {}\n\npub unconstrained fn store_private_event_log(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {\n    store_private_event_log_oracle(\n        contract_address,\n        recipient,\n        event_selector,\n        msg_content,\n        tx_hash,\n        log_index_in_tx,\n        tx_index_in_block,\n    )\n}\n\n#[oracle(storePrivateEventLog)]\nunconstrained fn store_private_event_log_oracle(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    event_selector: EventSelector,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n    log_index_in_tx: Field,\n    tx_index_in_block: Field,\n) {}\n"
    },
    "155": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/message_discovery.nr",
      "source": "use crate::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PUBLIC_LOG_DATA_SIZE_IN_FIELDS},\n};\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn sync_notes(pending_tagged_log_array_base_slot: Field) {\n    sync_notes_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n/// Informs PXE of a note's existence so that it can later be retrieved by the `getNotes` oracle. The note will be\n/// scoped to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The packed note is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was successfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        packed_note,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n/// The contents of a public log, plus contextual information about the transaction in which the log was emitted. This\n/// is the data required in order to discover notes that are being delivered in a log.\n// TODO(#11639): this could also be used to fetch private logs, but the `BoundedVec` maximum length is that of a public\n// log.\npub struct LogWithTxData {\n    pub log_content: BoundedVec<Field, PUBLIC_LOG_DATA_SIZE_IN_FIELDS>,\n    pub tx_hash: Field,\n    /// The array of new note hashes created by `tx_hash`\n    pub unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    /// The first nullifier created by `tx_hash`\n    pub first_nullifier_in_tx: Field,\n}\n\n/// Fetches a log from the node that has the corresponding `tag`. The log can be either a public or a private log, and\n/// the tag is the first field in the log's content. Returns `Option::none` if no such log exists. Throws if more than\n/// one log with that tag exists.\n/// Public logs have an extra field included at the beginning with the address of the contract that emitted them.\n// TODO(#11627): handle multiple logs with the same tag.\n// TODO(#10273): improve contract siloing of logs, don't introduce an extra field.\npub unconstrained fn get_log_by_tag(tag: Field) -> Option<LogWithTxData> {\n    get_log_by_tag_oracle(tag)\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n\n#[oracle(getLogByTag)]\nunconstrained fn get_log_by_tag_oracle(tag: Field) -> Option<LogWithTxData> {}\n"
    },
    "159": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr",
      "source": "use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n"
    },
    "16": {
      "path": "std/embedded_curve_ops.nr",
      "source": "use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: x_coordinates_match,\n        };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2)[0]\n}\n"
    },
    "162": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr",
      "source": "use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"
    },
    "17": {
      "path": "std/field/bn254.nr",
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"
    },
    "170": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr",
      "source": "use crate::{\n    context::{PrivateContext, PublicContext, UtilityContext},\n    state_vars::storage::Storage,\n    utils::with_hash::WithHash,\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::Packable};\n\n/// Stores an immutable value in public state which can be read from public, private and unconstrained execution\n/// contexts.\n///\n/// Leverages `WithHash<T>` to enable efficient private reads of public storage. `WithHash` wrapper allows for\n/// efficient reads by verifying large values through a single hash check and then proving inclusion only of the hash\n/// in the public storage. This reduces the number of required tree inclusion proofs from O(M) to O(1).\n///\n/// This is valuable when T packs to multiple fields, as it maintains \"almost constant\" verification overhead\n/// regardless of the original data size.\n///\n/// # Optimizing private reads in your contract\n/// Given that reading T from public immutable in private has \"almost constant\" constraints cost for different sizes\n/// of T it is recommended to group multiple values into a single struct when they are being read together. This can\n/// typically be some kind of configuration set up during contract initialization. E.g.:\n///\n/// ```noir\n/// use dep::aztec::protocol_types::{address::AztecAddress, traits::Packable};\n/// use std::meta::derive;\n///\n/// #[derive(Eq, Packable)]\n/// pub struct Config \\{\n///     pub address_1: AztecAddress,\n///     pub value_1: u128,\n///     pub value_2: u64,\n///     ...\n/// }\n/// ```\n///\n// docs:start:public_immutable_struct\npub struct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\n/// `WithHash<T>` stores both the packed value (using N fields) and its hash (1 field), requiring N = M + 1 total\n/// fields.\nimpl<T, Context, let M: u32, let N: u32> Storage<N> for PublicImmutable<T, Context>\nwhere\n    WithHash<T, M>: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n}\n\nimpl<T> PublicImmutable<T, &mut PublicContext> {\n    // docs:start:public_immutable_struct_write\n    pub fn initialize<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, WithHash::new(value));\n    }\n    // docs:end:public_immutable_struct_write\n\n    // Note that we don't access the context, but we do call oracles that are only available in public\n    // docs:start:public_immutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::public_storage_read(*self.context, self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n}\n\nimpl<T> PublicImmutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::utility_public_storage_read(self.context, self.storage_slot)\n    }\n}\n\nimpl<T> PublicImmutable<T, &mut PrivateContext> {\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::historical_public_storage_read(\n            self.context.get_block_header(),\n            self.context.this_address(),\n            self.storage_slot,\n        )\n    }\n}\n"
    },
    "171": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr",
      "source": "use crate::context::{PublicContext, UtilityContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T> PublicMutable<T, &mut PublicContext> {\n    // docs:start:public_mutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T> PublicMutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"
    },
    "18": {
      "path": "std/field/mod.nr",
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"
    },
    "185": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/array/append.nr",
      "source": "/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n"
    },
    "188": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr",
      "source": "/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n"
    },
    "189": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr",
      "source": "use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n"
    },
    "191": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr",
      "source": "use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n"
    },
    "192": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr",
      "source": "// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump as u32];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n"
    },
    "194": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/field.nr",
      "source": "use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n"
    },
    "196": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/point.nr",
      "source": "use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n"
    },
    "20": {
      "path": "std/hash/poseidon2.nr",
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
    },
    "200": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/utils/with_hash.nr",
      "source": "use crate::{\n    context::{PublicContext, UtilityContext},\n    history::public_storage::PublicStorageHistoricalRead,\n    oracle,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, hash::poseidon2_hash, traits::Packable,\n};\n\n/// A struct that allows for efficient reading of value `T` from public storage in private.\n///\n/// The efficient reads are achieved by verifying large values through a single hash check\n/// and then proving inclusion only of the hash in public storage. This reduces the number\n/// of required tree inclusion proofs from `N` to 1.\n///\n/// # Type Parameters\n/// - `T`: The underlying type being wrapped, must implement `Packable<N>`\n/// - `N`: The number of field elements required to pack values of type `T`\npub struct WithHash<T, let N: u32> {\n    value: T,\n    packed: [Field; N],\n    hash: Field,\n}\n\nimpl<T, let N: u32> WithHash<T, N>\nwhere\n    T: Packable<N> + Eq,\n{\n    pub fn new(value: T) -> Self {\n        let packed = value.pack();\n        Self { value, packed, hash: poseidon2_hash(packed) }\n    }\n\n    pub fn get_value(self) -> T {\n        self.value\n    }\n\n    pub fn get_hash(self) -> Field {\n        self.hash\n    }\n\n    pub fn public_storage_read(context: PublicContext, storage_slot: Field) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub unconstrained fn utility_public_storage_read(\n        context: UtilityContext,\n        storage_slot: Field,\n    ) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub fn historical_public_storage_read(\n        header: BlockHeader,\n        address: AztecAddress,\n        storage_slot: Field,\n    ) -> T {\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for each field in `packed`, but that would require one\n        // full sibling path per storage slot (since due to kernel siloing the storage is not contiguous). Instead, we\n        // get an oracle to provide us the values, and instead we prove inclusion of their hash, which is both a much\n        // smaller proof (a single slot), and also independent of the size of T (except in that we need to pack and hash T).\n        let hint = WithHash::new(\n            // Safety: We verify that a hash of the hint/packed data matches the stored hash.\n            unsafe {\n                oracle::storage::storage_read(address, storage_slot, historical_block_number)\n            },\n        );\n\n        let hash = header.public_storage_historical_read(storage_slot + N as Field, address);\n\n        if hash != 0 {\n            assert_eq(hash, hint.get_hash(), \"Hint values do not match hash\");\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized. Therefore, the hints must then be zero\n            // (i.e. the default value for public storage) as well.\n            assert_eq(\n                hint.get_value(),\n                T::unpack(std::mem::zeroed()),\n                \"Non-zero hint for zero hash\",\n            );\n        };\n\n        hint.get_value()\n    }\n}\n\nimpl<T, let N: u32> Packable<N + 1> for WithHash<T, N>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n        for i in 0..N {\n            result[i] = self.packed[i];\n        }\n        result[N] = self.hash;\n\n        result\n    }\n\n    fn unpack(packed: [Field; N + 1]) -> Self {\n        let mut value_packed: [Field; N] = std::mem::zeroed();\n        for i in 0..N {\n            value_packed[i] = packed[i];\n        }\n        let hash = packed[N];\n\n        Self { value: T::unpack(value_packed), packed: value_packed, hash }\n    }\n}\n\nmod test {\n    use crate::{\n        oracle::random::random,\n        test::{\n            helpers::{cheatcodes, test_environment::TestEnvironment},\n            mocks::mock_struct::MockStruct,\n        },\n        utils::with_hash::WithHash,\n    };\n    use dep::protocol_types::hash::poseidon2_hash;\n    use dep::protocol_types::traits::{Packable, ToField};\n    use dep::std::{mem, test::OracleMock};\n\n    global storage_slot: Field = 47;\n\n    #[test]\n    unconstrained fn create_and_recover() {\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n        let recovered = WithHash::unpack(value_with_hash.pack());\n\n        assert_eq(recovered.value, value);\n        assert_eq(recovered.packed, value.pack());\n        assert_eq(recovered.hash, poseidon2_hash(value.pack()));\n    }\n\n    #[test]\n    unconstrained fn read_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n\n        // We should get zeroed value\n        let expected: MockStruct = mem::zeroed();\n        assert_eq(result, expected);\n    }\n\n    #[test]\n    unconstrained fn read_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n\n        // We write the value with hash to storage\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            storage_slot,\n            value_with_hash.pack(),\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n\n        assert_eq(result, value);\n    }\n\n    #[test(should_fail_with = \"Non-zero hint for zero hash\")]\n    unconstrained fn test_bad_hint_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        env.advance_block_to(6);\n\n        let value_packed = MockStruct { a: 1, b: 1 }.pack();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        // Mock the oracle to return a non-zero hint/packed value\n        let _ = OracleMock::mock(\"storageRead\")\n            .with_params((\n                address.to_field(), storage_slot, block_header.global_variables.block_number as u32,\n                value_packed.len(),\n            ))\n            .returns(value_packed)\n            .times(1);\n\n        // This should revert because the hint value is non-zero and the hash is zero (default value of storage)\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n    }\n\n    #[test(should_fail_with = \"Hint values do not match hash\")]\n    unconstrained fn test_bad_hint_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value_packed = MockStruct { a: 5, b: 3 }.pack();\n\n        // We write the value to storage\n        cheatcodes::direct_storage_write(env.contract_address(), storage_slot, value_packed);\n\n        // Now we write incorrect hash to the hash storage slot\n        let incorrect_hash = random();\n        let hash_storage_slot = storage_slot + (value_packed.len() as Field);\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            hash_storage_slot,\n            [incorrect_hash],\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n    }\n}\n"
    },
    "224": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/event_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"
    },
    "226": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"
    },
    "269": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr",
      "source": "use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"
    },
    "270": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr",
      "source": "use crate::{\n    constants::ETH_ADDRESS_LENGTH,\n    traits::{Deserialize, Empty, Packable, Serialize, ToField},\n};\n\npub struct EthAddress {\n    inner: Field,\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl Packable<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn pack(self) -> [Field; ETH_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size::<160>();\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"
    },
    "286": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr",
      "source": "/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"
    },
    "287": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
      "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"
    },
    "3": {
      "path": "std/array/mod.nr",
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n"
    },
    "301": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr",
      "source": "use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `omit`: A list of field names (as `Quoted`) to be excluded from the serialized output.\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, &[], false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, &[], false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], &[], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, &[], false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with Omitted Field and packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// Serializing while omitting `value2`:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, MyStruct, &[quote { self.value2 }], true)\n/// // Returns:\n/// // ([`value_packed[0]`], [`let value_packed = self.value.pack()`])\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    omit: [Quoted],\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // Proceed if none of the omit rules omits this name\n    if !omit.any(|to_omit| to_omit == name) {\n        // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n        let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n        let packable_constraint =\n            quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n        if (should_pack & typ.implements(packable_constraint)) {\n            // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n            // method, add the resulting field array to `aux_vars` and each field to `fields`.\n            let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n            // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n            let name_at_one_token = collapse_to_one_token(name);\n            let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n            // We add the individual fields to the fields array\n            let pack_method = get_trait_impl_method(\n                typ,\n                quote { crate::traits::Packable<$packed_len> },\n                quote { pack },\n            );\n            let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n            for i in 0..packed_len {\n                fields = fields.push_back(quote { $packed_struct_name[$i] });\n            }\n\n            // We add the new auxiliary variable to the aux_vars array\n            aux_vars = aux_vars.push_back(packed_struct);\n        } else if typ.is_field() {\n            // For field we just add the value to fields\n            fields = fields.push_back(name);\n        } else if typ.as_integer().is_some() | typ.is_bool() {\n            // For integer and bool we just cast to Field and add the value to fields\n            fields = fields.push_back(quote { $name as Field });\n        } else if typ.as_data_type().is_some() {\n            // For struct we pref\n            let nested_struct = typ.as_data_type().unwrap();\n            let params = nested_struct.0.fields(nested_struct.1);\n            let struct_flattened = params.map(|(param_name, param_type): (Quoted, Type)| {\n                let maybe_prefixed_name = if name == quote {} {\n                    // Triggered when the param name is of a value available in the current scope (e.g. a function\n                    // argument) --> then we don't prefix the name with anything.\n                    param_name\n                } else {\n                    // Triggered when we want to prefix the param name with the `name` from function input. This\n                    // can typically be `self` when implementing a method on a struct.\n                    quote { $name.$param_name }\n                };\n                generate_serialize_to_fields(\n                    quote {$maybe_prefixed_name},\n                    param_type,\n                    omit,\n                    should_pack,\n                )\n            });\n            let struct_flattened_fields = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n            );\n            let struct_flattened_aux_vars = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n            );\n            fields = fields.append(struct_flattened_fields);\n            aux_vars = aux_vars.append(struct_flattened_aux_vars);\n        } else if typ.as_array().is_some() {\n            // For array we recursively call `generate_serialize_to_fields(...)` for each element\n            let (element_type, array_len) = typ.as_array().unwrap();\n            let array_len = array_len.as_constant().unwrap();\n            for i in 0..array_len {\n                let (element_fields, element_aux_vars) = generate_serialize_to_fields(\n                    quote { $name[$i] },\n                    element_type,\n                    omit,\n                    should_pack,\n                );\n                fields = fields.append(element_fields);\n                aux_vars = aux_vars.append(element_aux_vars);\n            }\n        } else if typ.as_str().is_some() {\n            // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n            // then we add each byte to fields as a Field\n            let length_type = typ.as_str().unwrap();\n            let str_len = length_type.as_constant().unwrap();\n            let as_member = name.as_expr().unwrap().as_member_access();\n            let var_name = if as_member.is_some() {\n                as_member.unwrap().1\n            } else {\n                name\n            };\n            let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n            let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n            for i in 0..str_len {\n                fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n            }\n            aux_vars = aux_vars.push_back(as_bytes);\n        } else {\n            panic(\n                f\"Unsupported type for serialization of argument {name} and type {typ}\",\n            )\n        }\n    }\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub(crate) comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    quote {\n        impl Serialize<$serialized_len> for $typ {\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) =\n        generate_serialize_to_fields(quote { self }, typ, &[], packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n"
    },
    "303": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr",
      "source": "pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n"
    },
    "304": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr",
      "source": "use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n"
    },
    "313": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr",
      "source": "use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize, ToField},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"
    },
    "324": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr",
      "source": "use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"
    },
    "338": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr",
      "source": "use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n}\n\nimpl<T> Empty for Option<T> {\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n"
    },
    "342": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr",
      "source": "use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"
    },
    "343": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"
    },
    "359": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr",
      "source": "pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n"
    },
    "360": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr",
      "source": "pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\npub(crate) fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub(crate) fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"
    },
    "362": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
      "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
    },
    "368": {
      "path": "/Users/eidoo/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr",
      "source": "use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n"
    },
    "397": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/uint-note/src/uint_note.nr",
      "source": "use dep::aztec::{\n    context::{PrivateContext, PublicContext},\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::custom_note,\n    messages::logs::note,\n    note::note_interface::{NoteHash, NoteType},\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress,\n        constants::{GENERATOR_INDEX__NOTE_HASH, GENERATOR_INDEX__NOTE_NULLIFIER},\n        hash::poseidon2_hash_with_separator,\n        traits::{Deserialize, Hash, Packable, Serialize, ToField},\n        utils::arrays::array_concat,\n    },\n};\n\n// UintNote supports partial notes, i.e. the ability to create an incomplete note in private, hiding certain values (the\n// owner, storage slot and randomness), and then completing the note in public with the ones missing (the amount).\n// Partial notes are being actively developed and are not currently fully supported via macros, and so we rely on the\n// #[custom_note] macro to implement it manually, resulting in some boilerplate. This is expected to be unnecessary once\n// macro support is expanded.\n\n/// A private note representing a numeric value associated to an account (e.g. a token balance).\n#[custom_note]\n#[derive(Eq, Serialize)]\npub struct UintNote {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintPartialNotePrivateContent, and\n    //   b) have the public field at the end\n    // Correct ordering is checked by the tests in this module.\n\n    /// The owner of the note, i.e. the account whose nullifier secret key is required to compute the nullifier.\n    owner: AztecAddress,\n    /// Random value, protects against note hash preimage attacks.\n    randomness: Field,\n    /// The number stored in the note.\n    value: u128,\n}\n\nimpl NoteHash for UintNote {\n    fn compute_note_hash(self, storage_slot: Field) -> Field {\n        // Partial notes can be implemented by having the note hash be either the result of multiscalar multiplication\n        // (MSM), or two rounds of poseidon. MSM results in more constraints and is only required when multiple variants\n        // of partial notes are supported. Because UintNote has just one variant (where the value is public), we use\n        // poseidon instead.\n\n        // We must compute the same note hash as would be produced by a partial note created and completed with the same\n        // values, so that notes all behave the same way regardless of how they were created. To achieve this, we\n        // perform both steps of the partial note computation.\n\n        // First we create the partial note from a commitment to the private content (including storage slot).\n        let private_content =\n            UintPartialNotePrivateContent { owner: self.owner, randomness: self.randomness };\n        let partial_note = PartialUintNote {\n            commitment: private_content.compute_partial_commitment(storage_slot),\n        };\n\n        // Then compute the completion note hash. In a real partial note this step would be performed in public.\n        partial_note.compute_complete_note_hash(self.value)\n    }\n\n    // The nullifiers are nothing special - this is just the canonical implementation that would be injected by the\n    // #[note] macro.\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n\n    unconstrained fn compute_nullifier_unconstrained(self, note_hash_for_nullify: Field) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl UintNote {\n    pub fn new(value: u128, owner: AztecAddress) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { value, owner, randomness }\n    }\n\n    pub fn get_value(self) -> u128 {\n        self.value\n    }\n\n    /// Creates a partial note that will hide the owner and storage slot but not the value, since the note will be later\n    /// completed in public. This is a powerful technique for scenarios in which the value cannot be known in private\n    /// (e.g. because it depends on some public state, such as a DEX).\n    ///\n    /// The returned `PartialUintNote` value must be sent to public execution via a secure channel, since it is not\n    /// possible to verify the integrity of its contents due to it hiding information. The recommended ways to do this\n    /// are to retrieve it from public storage, or to receive it in an internal public function call.\n    ///\n    /// Each partial note should only be used once, since otherwise multiple notes would be linked together and known to\n    /// belong to the same owner.\n    ///\n    /// As part of the partial note creation process, a log will be sent to `recipient` from `sender` so that they can\n    /// discover the note. `recipient` will typically be the same as `owner`.\n    pub fn partial(\n        owner: AztecAddress,\n        storage_slot: Field,\n        context: &mut PrivateContext,\n        recipient: AztecAddress,\n        sender: AztecAddress,\n    ) -> PartialUintNote {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n\n        // We create a commitment to the private data, which we then use to construct the log we send to the recipient.\n        let commitment = UintPartialNotePrivateContent { owner, randomness }\n            .compute_partial_commitment(storage_slot);\n\n        // Our partial note log encoding scheme includes a field with the tag of the public completion log, and we use\n        // the commitment as the tag. This is good for multiple reasons:\n        //  - the commitment is uniquely tied to this partial note\n        //  - the commitment is already public information, so we're not revealing anything else\n        //  - we don't need to create any additional information, private or public, for the tag\n        //  - other contracts cannot impersonate us and emit logs with the same tag due to public log siloing\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n\n        let encrypted_log =\n            note::compute_partial_note_log(private_log_content, storage_slot, recipient, sender);\n        context.emit_private_log(encrypted_log);\n\n        PartialUintNote { commitment }\n    }\n}\n\n/// The private content of a partial UintNote, i.e. the fields that will remain private. All other note fields will be\n/// made public.\n#[derive(Packable)]\nstruct UintPartialNotePrivateContent {\n    // The ordering of these fields is important given that it must match that of UintNote.\n    // Correct ordering is checked by the tests in this module.\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl UintPartialNotePrivateContent {\n    fn compute_partial_commitment(self, storage_slot: Field) -> Field {\n        // Here we commit to all private values, including the storage slot.\n        poseidon2_hash_with_separator(\n            array_concat(self.pack(), [storage_slot]),\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\n#[derive(Packable)]\nstruct PrivateUintPartialNotePrivateLogContent {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintNote, and\n    //   b) have the public log tag at the beginning\n    // Correct ordering is checked by the tests in this module.\n    public_log_tag: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl NoteType for PrivateUintPartialNotePrivateLogContent {\n    fn get_id() -> Field {\n        UintNote::get_id()\n    }\n}\n\n/// A partial instance of a UintNote. This value represents a private commitment to the owner, randomness and storage\n/// slot, but the value field has not yet been set. A partial note can be completed in public with the `complete`\n/// function (revealing the value to the public), resulting in a UintNote that can be used like any other one (except\n/// of course that its value is known).\n#[derive(Packable, Serialize, Deserialize)]\npub struct PartialUintNote {\n    commitment: Field,\n}\n\nimpl PartialUintNote {\n    pub fn commitment(self) -> Field {\n        self.commitment\n    }\n}\n\nimpl PartialUintNote {\n    /// Completes the partial note, creating a new note that can be used like any other UintNote.\n    pub fn complete(self, value: u128, context: &mut PublicContext) {\n        // A note with a value of zero is valid, but we cannot currently complete a partial note with such a value\n        // because this will result in the completion log having its last field set to 0. Public logs currently do not\n        // track their length, and so trailing zeros are simply trimmed. This results in the completion log missing its\n        // last field (the value), and note discovery failing.\n        // TODO(#11636): remove this\n        assert(value != 0, \"Cannot complete a PartialUintNote with a value of 0\");\n\n        // We need to do two things:\n        //  - emit a public log containing the public fields (the value). The contract will later find it by searching\n        //  for the expected tag (which is simply the partial note commitment).\n        //  - insert the completion note hash (i.e. the hash of the note) into the note hash tree. This is typically\n        //  only done in private to hide the preimage of the hash that is inserted, but completed partial notes are\n        //  inserted in public as the public values are provided and the note hash computed.\n        context.emit_public_log(self.compute_note_completion_log(value));\n        context.push_note_hash(self.compute_complete_note_hash(value));\n    }\n\n    fn compute_note_completion_log(self, value: u128) -> [Field; 2] {\n        // The first field of this log must be the tag that the recipient of the partial note private field logs\n        // expects, which is equal to the partial note commitment.\n        [self.commitment, value.to_field()]\n    }\n\n    fn compute_complete_note_hash(self, value: u128) -> Field {\n        // Here we finalize the note hash by including the (public) value into the partial note commitment. Note that we\n        // use the same generator index as we used for the first round of poseidon - this is not an issue.\n        poseidon2_hash_with_separator(\n            [self.commitment, value.to_field()],\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\nmod test {\n    use super::{\n        PartialUintNote, PrivateUintPartialNotePrivateLogContent, UintNote,\n        UintPartialNotePrivateContent,\n    };\n    use dep::aztec::{\n        note::note_interface::NoteHash,\n        protocol_types::{\n            address::AztecAddress,\n            traits::{FromField, Packable},\n            utils::arrays::array_concat,\n        },\n        utils::array::subarray,\n    };\n\n    global value: u128 = 17;\n    global randomness: Field = 42;\n    global owner: AztecAddress = AztecAddress::from_field(50);\n    global storage_slot: Field = 13;\n\n    #[test]\n    fn note_hash_matches_completed_partial_note_hash() {\n        // Tests that a UintNote has the same note hash as a PartialUintNote created and then completed with the same\n        // private values. This requires for the same hash function to be used in both flows, with the fields in the\n        // same order.\n\n        let note = UintNote { value, randomness, owner };\n        let note_hash = note.compute_note_hash(storage_slot);\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n\n        let partial_note = PartialUintNote {\n            commitment: partial_note_private_content.compute_partial_commitment(storage_slot),\n        };\n        let completed_partial_note_hash = partial_note.compute_complete_note_hash(value);\n\n        assert_eq(note_hash, completed_partial_note_hash);\n    }\n\n    #[test]\n    fn unpack_from_partial_note_encoding() {\n        // Tests that the packed representation of a regular UintNote can be reconstructed given the partial note\n        // private fields log and the public completion log, ensuring the recipient will be able to compute the\n        // completed note as if it were a regular UintNote.\n\n        let note = UintNote { value, randomness, owner };\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n        let commitment = partial_note_private_content.compute_partial_commitment(storage_slot);\n\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n        let partial_note = PartialUintNote { commitment };\n\n        // The first field of the partial note private content is the public completion log tag, so it should match the\n        // first field of the public log.\n        assert_eq(\n            private_log_content.pack()[0],\n            partial_note.compute_note_completion_log(value)[0],\n        );\n\n        // Then we extract all fields except the first of both logs (i.e. the public log tag), and combine them to\n        // produce the note's packed representation. This requires that the members of the intermediate structs are in\n        // the same order as in UintNote.\n        let private_log_without_public_tag: [_; 2] = subarray(private_log_content.pack(), 1);\n        let public_log_without_tag: [_; 1] =\n            subarray(partial_note.compute_note_completion_log(value), 1);\n\n        assert_eq(\n            array_concat(private_log_without_public_tag, public_log_without_tag),\n            note.pack(),\n        );\n    }\n}\n"
    },
    "42": {
      "path": "std/option.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"
    },
    "43": {
      "path": "std/panic.nr",
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
    },
    "46": {
      "path": "std/slice.nr",
      "source": "use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice with its index, returning a\n    // new slice containing the mapped elements.\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U] {\n        let mut ret = &[];\n        let mut index = 0;\n        for elem in self {\n            ret = ret.push_back(f(index, elem));\n            index += 1;\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for elem in self {\n            f(elem);\n        }\n    }\n\n    // Apply a function to each element of the slice with its index\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        let mut index = 0;\n        for elem in self {\n            f(index, elem);\n            index += 1;\n        }\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq(&[].map(|x| x + 1), &[]);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq(&[].mapi(|i, x| i * x + 1), &[]);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = &[1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = &[1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_each(|a| { *b_ref = b_ref.push_back(a * 2); });\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { *b_ref = b_ref.push_back(i + a * 2); });\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n}\n"
    },
    "5": {
      "path": "std/cmp.nr",
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n"
    },
    "51": {
      "path": "/Users/eidoo/Desktop/work/substancelabs/aztec-evm-bridge/aztec/aztec_gateway_7683/src/main.nr",
      "source": "mod config;\nmod types;\nmod utils;\n\nuse dep::aztec::macros::aztec;\n\n#[aztec]\npub contract AztecGateway7683 {\n    // context.chain_id() returns 1, which corresponds to the mainnet, making it unsuitable for our use case.\n    // Instead, we designate 999999 as the destination domain.\n    global LOCAL_DESTINATION_DOMAIN: u32 = 999999;\n\n    global UNKNOWN: u32 = 0;\n    global OPENED: u32 = 1;\n    global FILLED: u32 = 2;\n    global INITIATED_PRIVATELY: u32 = 3;\n    global SETTLED: u32 = 4;\n\n    global SETTLE_ORDER_TYPE: [u8; 32] = [\n        25, 30, 167, 118, 189, 110, 12, 213, 106, 109, 68, 186, 74, 234, 47, 236, 70, 139, 74, 11,\n        76, 29, 136, 13, 64, 37, 146, 158, 235, 97, 93, 13,\n    ]; // sha256(\"SETTLE_ORDER_TYPE\")\n    global SECRET: [u8; 6] = [83, 69, 67, 82, 69, 84]; // SECRET\n\n    use crate::{\n        config::Config,\n        types::{\n            events::{Filled, Open},\n            helpers::InternalRCOParams,\n            onchain_cross_chain_order::OnchainCrossChainOrder,\n            order_data::{\n                ORDER_DATA_LENGTH, ORDER_DATA_TYPE, OrderData, PRIVATE_ORDER, PUBLIC_ORDER,\n            },\n            resolved_cross_chain_order::{\n                FILL_INSTRUCTIONS_MAX_INSTRUCTIONS, FillInstruction, MAX_SPENT_MAX_OUTPUTS,\n                MIN_RECEIVED_MAX_OUTPUTS, Output, RESOLVED_CROSS_CHAIN_LENGTH,\n                ResolvedCrossChainOrder,\n            },\n        },\n        utils::{get_settle_content_hash, u32_to_u8_4, u8_32_to_aztec_address, u8_32_to_u128},\n    };\n    use dep::aztec::{\n        macros::{functions::{initializer, internal, private, public, view}, storage::storage},\n        prelude::{AztecAddress, EthAddress, Map, PublicImmutable, PublicMutable},\n        protocol_types::{hash::sha256_to_field, traits::{Packable, Serialize}},\n    };\n    use token::Token;\n\n    #[storage]\n    struct Storage<Context> {\n        config: PublicImmutable<Config, Context>,\n        claimable_orders: Map<Field, PublicMutable<Field, Context>, Context>,\n        open_orders: Map<Field, PublicMutable<[u8; 32], Context>, Context>,\n        order_status: Map<Field, PublicMutable<u32, Context>, Context>,\n        used_nonces: Map<AztecAddress, Map<Field, PublicMutable<bool, Context>, Context>, Context>,\n        filled_orders_block_numbers: Map<Field, PublicMutable<Field, Context>, Context>,\n    }\n\n    #[public]\n    #[initializer]\n    fn constructor(portal: EthAddress) {\n        storage.config.initialize(Config { portal });\n    }\n\n    #[public]\n    fn open(order: OnchainCrossChainOrder) {\n        assert(order.order_data_type == ORDER_DATA_TYPE, \"Invalid order data type\");\n\n        let data = _resolve(order, context.msg_sender(), context.timestamp());\n        let resolved_order = data.resolved_cross_chain_order;\n        let order_id = data.order_id;\n        let nonce = Field::from_be_bytes(data.order_data.sender_nonce);\n\n        assert(data.order_data.order_type == PUBLIC_ORDER, \"Not a public order\");\n        assert(\n            data.order_data.origin_domain == LOCAL_DESTINATION_DOMAIN,\n            \"Invalid order origin domain\",\n        );\n        assert(!storage.used_nonces.at(context.msg_sender()).at(nonce).read(), \"Invalid nonce\");\n\n        // We cannot store the entire order_data + ORDER_DATA_TYPE as it raises the following error:\n        // Reached the limit (63) on number of 'public data (contract storage) write' per tx 'storage_write_opcode(storage_slot, value).\n        // For this reason we store a commitment of it.\n        storage.open_orders.at(order_id).write(_get_open_order_commitment(order.order_data));\n        storage.order_status.at(order_id).write(OPENED);\n        storage.used_nonces.at(context.msg_sender()).at(nonce).write(true);\n\n        for i in 0..resolved_order.min_received.len() {\n            let min_received = resolved_order.min_received[i];\n\n            Token::at(u8_32_to_aztec_address(min_received.token))\n                .transfer_in_public(\n                    context.msg_sender(),\n                    context.this_address(),\n                    u8_32_to_u128(min_received.amount),\n                    nonce,\n                )\n                .call(&mut context);\n        }\n\n        let event = Open::new(data.order_id_bytes, resolved_order.serialize());\n        context.emit_public_log(event.open1.pack());\n        context.emit_public_log(event.open2.pack());\n    }\n\n    #[private]\n    fn open_private(order: OnchainCrossChainOrder, filler_data: AztecAddress) {\n        assert(order.order_data_type == ORDER_DATA_TYPE, \"Invalid order data type\");\n\n        // NOTE: Force the sender to be zero in order to avoid creating a connection between the sender and the recipient.\n        // TODO: timestamp = 0?\n        let data = _resolve(order, AztecAddress::zero(), 0 as u64);\n        let resolved_order = data.resolved_cross_chain_order;\n        let order_id = data.order_id;\n        let nonce = Field::from_be_bytes(data.order_data.sender_nonce);\n\n        assert(data.order_data.order_type == PRIVATE_ORDER, \"Not a private order\");\n        assert(\n            data.order_data.origin_domain == LOCAL_DESTINATION_DOMAIN,\n            \"Invalid order origin domain\",\n        );\n\n        AztecGateway7683::at(context.this_address())\n            ._assert_nonce_and_set_order_details(order_id, order.order_data, nonce)\n            .enqueue(&mut context);\n\n        for i in 0..resolved_order.min_received.len() {\n            let min_received = resolved_order.min_received[i];\n            let amount = u8_32_to_u128(min_received.amount);\n            Token::at(u8_32_to_aztec_address(min_received.token))\n                .transfer_in_private(context.msg_sender(), context.this_address(), amount, nonce)\n                .call(&mut context);\n        }\n\n        AztecGateway7683::at(context.this_address())\n            ._emit_open(data.order_id_bytes, resolved_order.serialize())\n            .enqueue(&mut context);\n    }\n\n    #[private]\n    fn claim_private(\n        secret: [u8; 32],\n        order_id_bytes: [u8; 32],\n        origin_data_bytes: [u8; ORDER_DATA_LENGTH],\n        filler_data_bytes: [u8; 32],\n    ) {\n        let order_id = Field::from_be_bytes(order_id_bytes);\n\n        AztecGateway7683::at(context.this_address())\n            ._assert_order_status(order_id, INITIATED_PRIVATELY)\n            .enqueue(&mut context);\n\n        // verify that a commitment exists for the given order.\n        AztecGateway7683::at(context.this_address())\n            ._check_order_commitment(order_id, origin_data_bytes, filler_data_bytes)\n            .enqueue(&mut context);\n\n        let order_data = OrderData::decode(origin_data_bytes);\n        // if a commitment exists, the order is valid, allowing us to compare the recipient with hash(secret).\n        assert(sha256::digest(secret) == order_data.recipient, \"Invalid secret\");\n\n        // transfer from gateway public balance to user private balance\n        Token::at(u8_32_to_aztec_address(order_data.output_token))\n            .transfer_to_private(context.msg_sender(), u8_32_to_u128(order_data.amount_out))\n            .call(&mut context);\n\n        AztecGateway7683::at(context.this_address())._update_order_status(order_id, FILLED).enqueue(\n            &mut context,\n        );\n\n        // TODO: store filled order\n\n        AztecGateway7683::at(context.this_address())\n            ._trigger_settlement(\n                order_id,\n                order_id_bytes,\n                filler_data_bytes, // at the moment filler data contains the ethereum address where the filler wants to receive the funds during the settlement\n            )\n            .enqueue(&mut context);\n    }\n\n    #[public]\n    fn fill(\n        order_id_bytes: [u8; 32],\n        origin_data_bytes: [u8; ORDER_DATA_LENGTH],\n        filler_data_bytes: [u8; 32],\n    ) {\n        let order_id = Field::from_be_bytes(order_id_bytes);\n        AztecGateway7683::at(context.this_address())._assert_order_status(order_id, UNKNOWN).call(\n            &mut context,\n        );\n\n        let order_data = OrderData::decode(origin_data_bytes);\n        assert(order_data.order_type == PUBLIC_ORDER, \"Not a public order\");\n        assert(order_id_bytes == sha256::digest(origin_data_bytes), \"Invalid order id\");\n        assert(context.timestamp() as u32 <= order_data.fill_deadline, \"Order fill expired\");\n        assert(\n            order_data.destination_domain == LOCAL_DESTINATION_DOMAIN,\n            \"Invalid order destination domain\",\n        );\n\n        Token::at(u8_32_to_aztec_address(order_data.output_token))\n            .transfer_in_public(\n                context.msg_sender(),\n                u8_32_to_aztec_address(order_data.recipient),\n                u8_32_to_u128(order_data.amount_out),\n                Field::from_be_bytes(order_data.sender_nonce),\n            )\n            .call(&mut context);\n\n        storage.order_status.at(order_id).write(FILLED);\n        // TODO: store filled order\n\n        AztecGateway7683::at(context.this_address())\n            ._trigger_settlement(\n                order_id,\n                order_id_bytes,\n                filler_data_bytes, // at the moment filler data contains the ethereum address where the filler wants to receive the funds during the settlement\n            )\n            .call(&mut context);\n\n        context.emit_public_log(Filled {\n            order_id: order_id_bytes,\n            origin_data: origin_data_bytes,\n            filler_data: filler_data_bytes,\n        }\n            .pack());\n    }\n\n    #[public]\n    fn fill_private(\n        order_id_bytes: [u8; 32],\n        origin_data_bytes: [u8; ORDER_DATA_LENGTH],\n        filler_data_bytes: [u8; 32],\n    ) {\n        let order_id = Field::from_be_bytes(order_id_bytes);\n        AztecGateway7683::at(context.this_address())._assert_order_status(order_id, UNKNOWN).call(\n            &mut context,\n        );\n\n        let order_data = OrderData::decode(origin_data_bytes);\n        assert(order_data.order_type == PRIVATE_ORDER, \"Not a private order\");\n        assert(order_id_bytes == sha256::digest(origin_data_bytes), \"Invalid order id\");\n        assert(context.timestamp() as u32 <= order_data.fill_deadline, \"Order fill expired\");\n        assert(order_data.destination_domain == LOCAL_DESTINATION_DOMAIN, \"Invalid order domain\");\n\n        Token::at(u8_32_to_aztec_address(order_data.output_token))\n            .transfer_in_public(\n                context.msg_sender(),\n                context.this_address(),\n                u8_32_to_u128(order_data.amount_out),\n                0,\n            )\n            .call(&mut context);\n\n        storage.claimable_orders.at(order_id).write(sha256_to_field(_get_order_pre_image(\n            origin_data_bytes,\n            filler_data_bytes,\n        )));\n        storage.order_status.at(order_id).write(INITIATED_PRIVATELY);\n\n        context.emit_public_log(Filled {\n            order_id: order_id_bytes,\n            origin_data: origin_data_bytes,\n            filler_data: filler_data_bytes,\n        }\n            .pack());\n    }\n\n    #[public]\n    #[view]\n    fn get_order_status(order_id_bytes: [u8; 32]) -> u32 {\n        storage.order_status.at(Field::from_be_bytes(order_id_bytes)).read()\n    }\n\n    #[public]\n    #[view]\n    fn get_filled_order_block_number(order_id_bytes: [u8; 32]) -> Field {\n        storage.filled_orders_block_numbers.at(Field::from_be_bytes(order_id_bytes)).read()\n    }\n\n    #[public]\n    fn settle(\n        order_id_bytes: [u8; 32],\n        origin_data_bytes: [u8; ORDER_DATA_LENGTH],\n        filler_data_bytes: [u8; 32],\n        message_leaf_index: Field,\n    ) {\n        let order_id = Field::from_be_bytes(order_id_bytes);\n        // If a user wanted to open an order on the same chain, this code wouldn't work because\n        // the order_status would be FILLED. However, considering that for PoC we don't handle that case,\n        // this check is sufficient.\n        assert(storage.order_status.at(order_id).read() == OPENED, \"Invalid order status\");\n\n        let order_commitment = _get_open_order_commitment(origin_data_bytes);\n        assert(storage.open_orders.at(order_id).read() == order_commitment, \"Invalid order\");\n\n        let order_data = OrderData::decode(origin_data_bytes);\n        // This check is necessary because if a user opens a private order, it means they have transferred\n        // tokens privately. As a result, the public state (`token.public_balances`) is not updated,\n        // making it impossible to call `transfer_in_public`, as it would fail.\n        assert(order_data.order_type == PUBLIC_ORDER, \"Not a public order\");\n\n        let content_hash =\n            get_settle_content_hash(SETTLE_ORDER_TYPE, order_id_bytes, filler_data_bytes);\n        /*context.consume_l1_to_l2_message(\n            content_hash,\n            Field::from_be_bytes(SECRET),\n            storage.config.read().portal,\n            message_leaf_index,\n        );*/\n\n        Token::at(u8_32_to_aztec_address(order_data.input_token))\n            .transfer_in_public(\n                context.this_address(),\n                u8_32_to_aztec_address(filler_data_bytes),\n                u8_32_to_u128(order_data.amount_in),\n                0,\n            )\n            .call(&mut context);\n\n        storage.order_status.at(order_id).write(SETTLED);\n\n        // TODO: emit Settle event\n    }\n\n    #[private]\n    fn settle_private(\n        order_id_bytes: [u8; 32],\n        origin_data_bytes: [u8; ORDER_DATA_LENGTH],\n        filler_data_bytes: [u8; 32],\n        message_leaf_index: Field,\n    ) {\n        let order_id = Field::from_be_bytes(order_id_bytes);\n        // same as above\n        AztecGateway7683::at(context.this_address())._assert_order_status(order_id, OPENED).enqueue(\n            &mut context,\n        );\n        AztecGateway7683::at(context.this_address())\n            ._assert_order_commitment(order_id, origin_data_bytes)\n            .enqueue(&mut context);\n\n        let order_data = OrderData::decode(origin_data_bytes);\n        assert(order_data.order_type == PRIVATE_ORDER, \"Not a private order\");\n\n        let content_hash =\n            get_settle_content_hash(SETTLE_ORDER_TYPE, order_id_bytes, filler_data_bytes);\n        /*context.consume_l1_to_l2_message(\n            content_hash,\n            Field::from_be_bytes(SECRET),\n            storage.config.read().portal,\n            message_leaf_index,\n        );*/\n\n        Token::at(u8_32_to_aztec_address(order_data.input_token))\n            .transfer_in_private(\n                context.this_address(),\n                u8_32_to_aztec_address(filler_data_bytes),\n                u8_32_to_u128(order_data.amount_in),\n                0,\n            )\n            .call(&mut context);\n\n        AztecGateway7683::at(context.this_address())\n            ._update_order_status(order_id, SETTLED)\n            .enqueue(&mut context);\n\n        // TODO: emit Settle event\n    }\n\n    #[internal]\n    #[public]\n    fn _assert_nonce_and_set_order_details(\n        order_id: Field,\n        order_data: [u8; ORDER_DATA_LENGTH],\n        nonce: Field,\n    ) {\n        assert(!storage.used_nonces.at(context.msg_sender()).at(nonce).read(), \"Invalid nonce\");\n        // We cannot store the entire order_data + ORDER_DATA_TYPE as it raises the following error:\n        // Reached the limit (63) on number of 'public data (contract storage) write' per tx 'storage_write_opcode(storage_slot, value).\n        // For this reason we store a commitment of it.\n        storage.open_orders.at(order_id).write(_get_open_order_commitment(order_data));\n        storage.order_status.at(order_id).write(OPENED);\n        storage.used_nonces.at(context.msg_sender()).at(nonce).write(true);\n    }\n\n    #[contract_library_method]\n    fn _get_open_order_commitment(order_data: [u8; ORDER_DATA_LENGTH]) -> [u8; 32] {\n        let mut data: [u8; ORDER_DATA_LENGTH + 32] = [0; ORDER_DATA_LENGTH + 32];\n        for i in 0..32 {\n            data[i] = ORDER_DATA_TYPE[i];\n        }\n        for i in 0..ORDER_DATA_LENGTH {\n            data[i + 32] = order_data[i];\n        }\n        sha256::digest(data)\n    }\n\n    #[public]\n    #[internal]\n    fn _assert_order_status(order_id: Field, status: u32) {\n        assert(storage.order_status.at(order_id).read() == status, \"Invalid order status\");\n    }\n\n    #[public]\n    #[internal]\n    fn _assert_order_commitment(order_id: Field, origin_data_bytes: [u8; ORDER_DATA_LENGTH]) {\n        let order_commitment = _get_open_order_commitment(origin_data_bytes);\n        assert(storage.open_orders.at(order_id).read() == order_commitment, \"Invalid order\");\n    }\n\n    #[public]\n    #[internal]\n    fn _check_order_commitment(\n        order_id: Field,\n        origin_data_bytes: [u8; ORDER_DATA_LENGTH],\n        filler_data_bytes: [u8; 32],\n    ) {\n        let order_commitment = storage.claimable_orders.at(order_id).read();\n        assert(\n            order_commitment\n                == sha256_to_field(_get_order_pre_image(origin_data_bytes, filler_data_bytes)),\n            \"Invalid order\",\n        );\n    }\n\n    #[public]\n    #[internal]\n    fn _emit_open(\n        order_id_bytes: [u8; 32],\n        resolved_order_bytes: [Field; RESOLVED_CROSS_CHAIN_LENGTH],\n    ) {\n        let event = Open::new(order_id_bytes, resolved_order_bytes);\n        context.emit_public_log(event.open1.pack());\n        context.emit_public_log(event.open2.pack());\n    }\n\n    #[public]\n    #[internal]\n    fn _trigger_settlement(order_id: Field, order_id_bytes: [u8; 32], filler_data: [u8; 32]) {\n        storage.filled_orders_block_numbers.at(order_id).write(context.block_number());\n\n        let mut settlement_message_bytes: [u8; 96] = [0; 96];\n\n        for i in 0..32 {\n            settlement_message_bytes[i] = SETTLE_ORDER_TYPE[i]; // order_type\n            settlement_message_bytes[i + 32] = order_id_bytes[i]; // order_id_bytes\n            settlement_message_bytes[i + 64] = filler_data[i]; // recipient\n        }\n\n        let config = storage.config.read();\n        context.message_portal(config.portal, sha256_to_field(settlement_message_bytes));\n    }\n\n    #[contract_library_method]\n    fn _resolve(\n        order: OnchainCrossChainOrder,\n        sender: AztecAddress,\n        timestamp: u64,\n    ) -> InternalRCOParams {\n        let mut order_data = OrderData::decode(order.order_data);\n\n        assert(order_data.fill_deadline == order.fill_deadline, \"Invalid fill deadline\");\n        assert(u8_32_to_aztec_address(order_data.sender) == sender, \"Invalid order sender\");\n\n        let order_id_bytes = sha256::digest(order.order_data);\n        let order_id = Field::from_be_bytes(order_id_bytes);\n        let destination_domain_bytes = u32_to_u8_4(order_data.destination_domain);\n\n        let min_received_output = Output {\n            token: order_data.input_token,\n            recipient: [0; 32],\n            amount: order_data.amount_in,\n            chain_id: u32_to_u8_4(order_data.origin_domain),\n        };\n        let min_received: [Output; MIN_RECEIVED_MAX_OUTPUTS] =\n            [min_received_output; MIN_RECEIVED_MAX_OUTPUTS];\n\n        let max_spent_output = Output {\n            token: order_data.output_token,\n            recipient: order_data.recipient,\n            amount: order_data.amount_out,\n            chain_id: destination_domain_bytes,\n        };\n        let max_spent: [Output; MAX_SPENT_MAX_OUTPUTS] = [max_spent_output; MAX_SPENT_MAX_OUTPUTS];\n\n        let fill_instruction = FillInstruction {\n            destination_chain_id: destination_domain_bytes,\n            destination_settler: order_data.destination_settler,\n            origin_data: order.order_data,\n        };\n        let fill_instructions: [FillInstruction; FILL_INSTRUCTIONS_MAX_INSTRUCTIONS] =\n            [fill_instruction; FILL_INSTRUCTIONS_MAX_INSTRUCTIONS];\n\n        let resolved_order = ResolvedCrossChainOrder {\n            user: order_data.sender,\n            origin_chain_id: u32_to_u8_4(LOCAL_DESTINATION_DOMAIN),\n            open_deadline: u32_to_u8_4(timestamp as u32),\n            fill_deadline: u32_to_u8_4(order.fill_deadline),\n            order_id: order_id_bytes,\n            min_received,\n            max_spent,\n            fill_instructions,\n        };\n\n        InternalRCOParams {\n            order_id_bytes,\n            order_id,\n            resolved_cross_chain_order: resolved_order,\n            order_data,\n        }\n    }\n\n    #[contract_library_method]\n    fn _get_order_pre_image(\n        origin_data_bytes: [u8; ORDER_DATA_LENGTH],\n        filler_data_bytes: [u8; 32],\n    ) -> [u8; ORDER_DATA_LENGTH + 32] {\n        let mut pre_image: [u8; ORDER_DATA_LENGTH + 32] = [0; ORDER_DATA_LENGTH + 32];\n        for i in 0..ORDER_DATA_LENGTH {\n            pre_image[i] = origin_data_bytes[i];\n        }\n        for i in 0..32 {\n            pre_image[i + ORDER_DATA_LENGTH] = filler_data_bytes[i];\n        }\n        pre_image\n    }\n\n    #[public]\n    #[internal]\n    fn _update_order_status(order_id: Field, status: u32) {\n        storage.order_status.at(order_id).write(status);\n    }\n}\n"
    },
    "52": {
      "path": "/Users/eidoo/Desktop/work/substancelabs/aztec-evm-bridge/aztec/aztec_gateway_7683/src/types/events.nr",
      "source": "use crate::types::{\n    order_data::ORDER_DATA_LENGTH, resolved_cross_chain_order::RESOLVED_CROSS_CHAIN_LENGTH,\n};\nuse dep::aztec::protocol_types::traits::{Packable, Serialize};\n\n// #[event]\n#[derive(Serialize)]\npub struct Filled {\n    pub order_id: [u8; 32],\n    pub origin_data: [u8; ORDER_DATA_LENGTH],\n    pub filler_data: [u8; 32],\n}\n\n// 301 + 32 + 32 = 365      365 / 31 = 11.74 = 12 + 1 (residual bytes) = 13\nimpl Packable<13> for Filled {\n    fn pack(self) -> [Field; 13] {\n        let mut result = [0; 13];\n        let mut residual_bytes = [0; 31];\n\n        let mut order_id_31 = [0; 31];\n        let mut filler_data_31 = [0; 31];\n        for i in 0..31 {\n            order_id_31[i] = self.order_id[i];\n            filler_data_31[i] = self.filler_data[i];\n        }\n        residual_bytes[0] = self.order_id[31];\n        residual_bytes[10] = self.filler_data[31];\n\n        for i in 0..10 {\n            let mut partial = [0; 31];\n            let offset = 32 * i;\n\n            for j in 0..31 {\n                let k = offset + j;\n                if k < ORDER_DATA_LENGTH {\n                    partial[j] = self.origin_data[k];\n                }\n            }\n            result[i + 1] = Field::from_be_bytes(partial);\n\n            if i < 9 {\n                // no residual bytes for the last one\n                residual_bytes[i + 1] = self.origin_data[offset + 31];\n            }\n        }\n\n        result[0] = Field::from_be_bytes::<31>(order_id_31);\n        result[11] = Field::from_be_bytes::<31>(filler_data_31);\n        result[12] = Field::from_be_bytes::<31>(residual_bytes);\n        result\n    }\n\n    fn unpack(fields: [Field; 13]) -> Self {\n        assert(true == false, \"not implemented\");\n        Self { order_id: [0; 32], origin_data: [0; ORDER_DATA_LENGTH], filler_data: [0; 32] }\n    }\n}\n\n// #[event]\n#[derive(Serialize)]\npub struct Open1 {\n    pub order_id: [u8; 32],\n    pub resolved_order: [u8; 340],\n}\n\nimpl Packable<13> for Open1 {\n    fn pack(self) -> [Field; 13] {\n        let mut result = [0; 13];\n        let mut residual_bytes = [0; 31];\n\n        let mut order_id_31 = [0; 31];\n        for i in 0..31 {\n            order_id_31[i] = self.order_id[i];\n        }\n        residual_bytes[0] = self.order_id[31];\n\n        for i in 0..12 {\n            let mut partial = [0; 31];\n            let offset = 32 * i;\n\n            for j in 0..31 {\n                let k = offset + j;\n                if k < 340 {\n                    partial[j] = self.resolved_order[k];\n                }\n            }\n            result[i + 1] = Field::from_be_bytes(partial);\n\n            let residual_bytes_offset = offset + 31;\n            if residual_bytes_offset < 340 {\n                residual_bytes[i + 1] = self.resolved_order[residual_bytes_offset];\n            }\n        }\n\n        result[0] = Field::from_be_bytes::<31>(order_id_31);\n        result[12] = Field::from_be_bytes::<31>(residual_bytes);\n        result\n    }\n\n    fn unpack(fields: [Field; 13]) -> Self {\n        assert(true == false, \"not implemented\");\n        Self { order_id: [0; 32], resolved_order: [0; 340] }\n    }\n}\n\n// #[event]\n#[derive(Serialize)]\npub struct Open2 {\n    pub order_id: [u8; 32],\n    pub resolved_order: [u8; 273],\n}\n\nimpl Packable<11> for Open2 {\n    fn pack(self) -> [Field; 11] {\n        let mut result = [0; 11];\n        let mut residual_bytes = [0; 31];\n\n        let mut order_id_31 = [0; 31];\n        for i in 0..31 {\n            order_id_31[i] = self.order_id[i];\n        }\n        residual_bytes[0] = self.order_id[31];\n\n        for i in 0..10 {\n            let mut partial = [0; 31];\n            let offset = 32 * i;\n\n            for j in 0..31 {\n                let k = offset + j;\n                if k < 273 {\n                    partial[j] = self.resolved_order[k];\n                }\n            }\n            result[i + 1] = Field::from_be_bytes(partial);\n\n            let residual_bytes_offset = offset + 31;\n            if residual_bytes_offset < 273 {\n                residual_bytes[i + 1] = self.resolved_order[residual_bytes_offset];\n            }\n        }\n\n        result[0] = Field::from_be_bytes::<31>(order_id_31);\n        result[10] = Field::from_be_bytes::<31>(residual_bytes);\n        result\n    }\n\n    fn unpack(fields: [Field; 11]) -> Self {\n        assert(true == false, \"not implemented\");\n        Self { order_id: [0; 32], resolved_order: [0; 273] }\n    }\n}\n\npub struct Open {\n    pub open1: Open1,\n    pub open2: Open2,\n}\n\nimpl Open {\n    pub fn new(order_id: [u8; 32], resolved_order: [Field; RESOLVED_CROSS_CHAIN_LENGTH]) -> Self {\n        let mut resolved_order1 = [0; 340];\n        for i in 0..340 {\n            resolved_order1[i] = resolved_order[i] as u8;\n        }\n        let mut resolved_order2 = [0; 273];\n        for i in 0..273 {\n            resolved_order2[i] = resolved_order[i + 340] as u8;\n        }\n\n        Self {\n            open1: Open1 { order_id, resolved_order: resolved_order1 },\n            open2: Open2 { order_id, resolved_order: resolved_order2 },\n        }\n    }\n}\n"
    },
    "55": {
      "path": "/Users/eidoo/Desktop/work/substancelabs/aztec-evm-bridge/aztec/aztec_gateway_7683/src/types/order_data.nr",
      "source": "use crate::utils::u8_4_to_u32;\nuse dep::aztec::protocol_types::traits::{Deserialize, Serialize};\n\npub global ORDER_DATA_LENGTH: u32 = 301;\npub global ORDER_DATA_TYPE: [u8; 32] = [\n    240, 12, 59, 246, 12, 115, 235, 151, 9, 127, 28, 152, 53, 83, 125, 160, 20, 224, 183, 85, 254,\n    148, 178, 93, 122, 200, 64, 29, 246, 103, 22, 160,\n];\n\npub global PUBLIC_ORDER: u8 = 0;\npub global PRIVATE_ORDER: u8 = 1;\n\n#[derive(Deserialize, Eq, Serialize)]\npub struct OrderData {\n    pub sender: [u8; 32],\n    pub recipient: [u8; 32],\n    pub input_token: [u8; 32],\n    pub output_token: [u8; 32],\n    pub amount_in: [u8; 32],\n    pub amount_out: [u8; 32],\n    pub sender_nonce: [u8; 32],\n    pub origin_domain: u32,\n    pub destination_domain: u32,\n    pub destination_settler: [u8; 32],\n    pub fill_deadline: u32,\n    pub order_type: u8,\n    pub data: [u8; 32],\n}\n\nimpl OrderData {\n    pub fn decode(bytes: [u8; ORDER_DATA_LENGTH]) -> OrderData {\n        let sender = u8_order_data_length_to_u8_32(bytes, 0);\n        let recipient = u8_order_data_length_to_u8_32(bytes, 32);\n        let input_token = u8_order_data_length_to_u8_32(bytes, 64);\n        let output_token = u8_order_data_length_to_u8_32(bytes, 96);\n        let amount_in = u8_order_data_length_to_u8_32(bytes, 128);\n        let amount_out = u8_order_data_length_to_u8_32(bytes, 160);\n        let sender_nonce = u8_order_data_length_to_u8_32(bytes, 192);\n        let origin_domain = u8_4_to_u32(u8_order_data_length_to_u8_4(bytes, 224));\n        let destination_domain = u8_4_to_u32(u8_order_data_length_to_u8_4(bytes, 228));\n        let destination_settler = u8_order_data_length_to_u8_32(bytes, 232);\n        let fill_deadline = u8_4_to_u32(u8_order_data_length_to_u8_4(bytes, 264));\n        let order_type = u8_order_data_length_to_u8(bytes, 268);\n        let data = u8_order_data_length_to_u8_32(bytes, 269);\n\n        OrderData {\n            sender,\n            recipient,\n            input_token,\n            output_token,\n            amount_in,\n            amount_out,\n            sender_nonce,\n            origin_domain,\n            destination_domain,\n            destination_settler,\n            fill_deadline,\n            order_type,\n            data,\n        }\n    }\n}\n\nfn u8_order_data_length_to_u8_32(bytes: [u8; ORDER_DATA_LENGTH], start: u32) -> [u8; 32] {\n    let mut result = [0; 32];\n    for i in 0..32 {\n        result[i] = bytes[start + i];\n    }\n    result\n}\n\nfn u8_order_data_length_to_u8_4(bytes: [u8; ORDER_DATA_LENGTH], start: u32) -> [u8; 4] {\n    let mut result = [0; 4];\n    for i in 0..4 {\n        result[i] = bytes[start + i];\n    }\n    result\n}\n\nfn u8_order_data_length_to_u8(bytes: [u8; ORDER_DATA_LENGTH], start: u32) -> u8 {\n    bytes[start]\n}\n"
    },
    "58": {
      "path": "/Users/eidoo/Desktop/work/substancelabs/aztec-evm-bridge/aztec/aztec_gateway_7683/src/utils.nr",
      "source": "use dep::aztec::{prelude::AztecAddress, protocol_types::traits::FromField};\nuse dep::aztec::protocol_types::hash::sha256_to_field;\n\npub(crate) fn u8_32_to_u128(input: [u8; 32]) -> u128 {\n    let mut result = 0;\n    for i in 0..16 {\n        result = result + (input[31 - i] as u128) * (1 << (i * 8));\n    }\n    result\n}\n\npub(crate) fn u8_4_to_u32(bytes: [u8; 4]) -> u32 {\n    let field = Field::from_be_bytes(bytes);\n    field.assert_max_bit_size::<32>();\n    field as u32\n}\n\npub(crate) fn u8_32_to_aztec_address(bytes: [u8; 32]) -> AztecAddress {\n    AztecAddress::from_field(Field::from_be_bytes(bytes))\n}\n\npub(crate) fn u32_to_u8_4(x: u32) -> [u8; 4] {\n    [((x >> 24) & 0xFF) as u8, ((x >> 16) & 0xFF) as u8, ((x >> 8) & 0xFF) as u8, (x & 0xFF) as u8]\n}\n\npub fn get_settle_content_hash(\n    settle_order_type: [u8; 32],\n    order_id_bytes: [u8; 32],\n    filler_data_bytes: [u8; 32],\n) -> Field {\n    let mut hash_bytes = [0; 96];\n\n    for i in 0..32 {\n        hash_bytes[i] = settle_order_type[i];\n        hash_bytes[i + 32] = order_id_bytes[i];\n        hash_bytes[i + 64] = filler_data_bytes[i];\n    }\n\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n"
    },
    "59": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/capsules/mod.nr",
      "source": "use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push<let N: u32>(self, value: T)\n    where\n        T: Serialize<N>,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get<let N: u32>(self, index: u32) -> T\n    where\n        T: Deserialize<N>,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    /// Iterates over the entire array, calling the callback with all values and their array index. The order in which\n    /// values are processed is arbitrary.\n    ///\n    /// It is safe to delete the current element (and only the current element) from inside the callback via `remove`:\n    /// ```noir\n    /// array.for_each(|index, value| {\n    ///   if some_condition(value) {\n    ///     array.remove(index); // safe only for this index\n    ///   }\n    /// }\n    /// ```\n    ///\n    /// If all elements in the array need to iterated over and then removed, then using `for_each` results in optimal\n    /// efficiency.\n    ///\n    /// It is **not** safe to push new elements into the array from inside the callback.\n    pub unconstrained fn for_each<Env, let N: u32>(self, f: unconstrained fn[Env](u32, T) -> ())\n    where\n        T: Deserialize<N>,\n    {\n        // Iterating over all elements is simple, but we want to do it in such a way that a) deleting the current\n        // element is safe to do, and b) deleting *all* elements is optimally efficient. This is because CapsuleArrays\n        // are typically used to hold pending tasks, so iterating them while clearing completed tasks (sometimes\n        // unconditionally, resulting in a full clear) is a very common access pattern.\n        //\n        // The way we achieve this is by iterating backwards: each element can always be deleted since it won't change\n        // any preceding (lower) indices, and if every element is deleted then every element will (in turn) be the last\n        // element. This results in an optimal full clear since `remove` will be able to skip the `capsules::copy` call\n        // to shift any elements past the deleted one (because there will be none).\n        let mut i = self.len();\n        while i > 0 {\n            i -= 1;\n            f(i, self.get(i));\n        }\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().utility().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn for_each_called_with_all_elements() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        // We store all values that we were called with and check that all (value, index) tuples are present. Note that\n        // we do not care about the order in which each tuple was passed to the closure.\n        let called_with = &mut BoundedVec::<(u32, Field), 3>::new();\n        array.for_each(|index, value| { called_with.push((index, value)); });\n\n        assert_eq(called_with.len(), 3);\n        assert(called_with.any(|(index, value)| (index == 0) & (value == 4)));\n        assert(called_with.any(|(index, value)| (index == 1) & (value == 5)));\n        assert(called_with.any(|(index, value)| (index == 2) & (value == 6)));\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_some() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| {\n            if index == 1 {\n                array.remove(index);\n            }\n        });\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 4);\n        assert_eq(array.get(1), 6);\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| { array.remove(index); });\n\n        assert_eq(array.len(), 0);\n    }\n\n    // TODO: uncomment this test once OracleMock::count is implemented in the stdlib.\n    // #[test]\n    // unconstrained fn for_each_remove_all_no_copy() {\n    //     let contract_address = setup();\n    //     let array = CapsuleArray::at(contract_address, SLOT);\n\n    //     array.push(4);\n    //     array.push(5);\n    //     array.push(6);\n\n    //     // We test that the copyCapsule was never called, which is the expensive operation we want to avoid.\n    //     let mock = OracleMock::mock(\"copyCapsule\");\n\n    //     array.for_each(|index, _| {\n    //         array.remove(index);\n    //     });\n\n    //     assert_eq(mock.count(), 0);\n    // }\n}\n"
    },
    "6": {
      "path": "std/collections/bounded_vec.nr",
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n"
    },
    "60": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    traits::{Deserialize, ToField},\n};\n\nuse crate::context::{gas::GasOpts, private_context::PrivateContext, public_context::PublicContext};\n\nuse crate::hash::{hash_args, hash_calldata};\nuse crate::oracle::execution_cache;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\n// PrivateCallInterface\n\npub struct PrivateCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let returns: T = returns_hash.get_preimage();\n        returns\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateVoidCallInterface\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static }\n    }\n\n    pub fn call(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticCallInterface\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticVoidCallInterface\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: (), is_static: true }\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicCallInterface\n\npub struct PublicCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            gas_opts: GasOpts::default(),\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicVoidCallInterface\n\npub struct PublicVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n\n    pub fn set_as_teardown(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.set_public_teardown_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            false,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticCallInterface\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticVoidCallInterface\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<N>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: (),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n"
    },
    "67": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
      "source": "use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
    },
    "68": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr",
      "source": "use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(gas_for_call(gas_opts), contract_address, calldata);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_opcode(gas, address, args)\n}\n\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"
    },
    "69": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/returns_hash.nr",
      "source": "use crate::{hash::hash_args_array, oracle::execution_cache};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct ReturnsHash {\n    hash: Field,\n}\n\nimpl ReturnsHash {\n    pub fn new(hash: Field) -> Self {\n        ReturnsHash { hash }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.hash, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.hash\n    }\n\n    /// This is only used during private execution, since in public it is the VM itself that keeps track of return\n    /// values.\n    pub fn get_preimage<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        // Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage));\n\n        Deserialize::deserialize(preimage)\n    }\n}\n"
    },
    "70": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/context/utility_context.nr",
      "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"
    },
    "74": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/hash.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_CALLDATA, GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"
    },
    "91": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr",
      "source": "use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n"
    },
    "95": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/aztec.nr",
      "source": "use crate::{\n    macros::{\n        dispatch::generate_public_dispatch,\n        functions::{stub_registry, utils::check_each_fn_macroified},\n        notes::{generate_note_export, NOTES},\n        storage::STORAGE_LAYOUT_NAME,\n        utils::{get_trait_impl_method, module_has_storage},\n    },\n    messages::discovery::private_notes::MAX_NOTE_PACKED_LEN,\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_notes` utility function PXE requires in order to discover notes.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_notes = generate_sync_notes();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_notes\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::messages::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(nonce).into() \n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::messages::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::messages::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_notes() -> Quoted {\n    // TODO(https://github.com/noir-lang/noir/issues/7912): Doing the following unfortunately doesn't work. Once\n    // the issue is fixed uncomment the following and remove the workaround from TS (look for the issue link in the\n    // codebase).\n    // let utility: fn(FunctionDefinition) -> () = crate::macros::functions::utility;\n    // quote {\n    //     #[$utility]\n    //     unconstrained fn sync_notes() {\n    //     }\n    // }\n\n    // All we need to do here is trigger message discovery, but this is already done by the #[utility] macro - we don't\n    // need to do anything extra.\n    quote {\n        #[aztec::macros::functions::utility]\n        unconstrained fn sync_notes() { }\n    }\n}\n"
    },
    "96": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr",
      "source": "use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n"
    },
    "99": {
      "path": "/Users/eidoo/nargo/github.com/AztecProtocol/aztec-packages/v0.85.0/noir-projects/aztec-nr/aztec/src/macros/functions/call_interface_stubs.nr",
      "source": "use crate::macros::utils::{\n    add_to_field_slice, AsStrQuote, compute_fn_selector, is_fn_private, is_fn_view,\n};\nuse std::meta::{type_of, unquote};\n\ncomptime global FROM_FIELD: TypedExpr = {\n    let from_field_trait = quote { protocol_types::traits::FromField }.as_trait_constraint();\n    let function_selector_typ =\n        quote { protocol_types::abis::function_selector::FunctionSelector }.as_type();\n    function_selector_typ.get_trait_impl(from_field_trait).unwrap().methods().filter(|m| {\n        m.name() == quote { from_field }\n    })[0]\n        .as_typed_expr()\n};\n\ncomptime global SERIALIZED_ARGS_SLICE_NAME: Quoted = quote { serialized_args };\n\npub comptime fn stub_fn(f: FunctionDefinition) -> Quoted {\n    let is_static_call = is_fn_view(f);\n    let is_void = f.return_type() == type_of(());\n\n    if is_fn_private(f) {\n        if is_static_call {\n            if is_void {\n                create_private_static_void_stub(f)\n            } else {\n                create_private_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_private_void_stub(f)\n            } else {\n                create_private_stub(f)\n            }\n        }\n    } else {\n        if is_static_call {\n            if is_void {\n                create_public_static_void_stub(f)\n            } else {\n                create_public_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_public_void_stub(f)\n            } else {\n                create_public_stub(f)\n            }\n        }\n    }\n}\n\n/// Utility function creating stubs used by all the stub functions in this file.\ncomptime fn create_stub_base(\n    f: FunctionDefinition,\n) -> (Quoted, Quoted, Quoted, Quoted, u32, Field) {\n    let fn_name = f.name();\n    let fn_parameters = f.parameters();\n    let fn_parameters_list =\n        fn_parameters.map(|(name, typ): (Quoted, Type)| quote { $name: $typ }).join(quote {,});\n\n    // Example of what the fold(...) below will generate for `target_address` and `fee_juice_limit_per_tx` function\n    // parameters:\n    // ```\n    // let mut serialized_args =  &[];\n    // serialized_args = serialized_args.append(aztec::protocol_types::traits::Serialize::serialize(target_address));\n    // serialized_args = serialized_args.push_back(fee_juice_limit_per_tx as Field);\n    // ```\n    let serialized_args_slice_construction = fn_parameters.fold(\n        quote {\n            let mut $SERIALIZED_ARGS_SLICE_NAME = &[];\n        },\n        |args, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let arg_to_append = add_to_field_slice(SERIALIZED_ARGS_SLICE_NAME, name, typ);\n            quote {\n                $args\n                $arg_to_append\n            }\n        },\n    );\n\n    let (fn_name_str, _) = fn_name.as_str_quote();\n    let fn_name_len: u32 = unquote!(quote { $fn_name_str.as_bytes().len()});\n    let fn_selector: Field = compute_fn_selector(f);\n\n    (\n        fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len,\n        fn_selector,\n    )\n}\n\ncomptime fn create_private_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_private_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n\ncomptime fn create_public_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_public_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n"
    }
  }
}
